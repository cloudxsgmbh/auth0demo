
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function (buffer, url, events) {
    'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var url__namespace = /*#__PURE__*/_interopNamespace(url);
    var events__namespace = /*#__PURE__*/_interopNamespace(events);

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /*
     * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __read$c = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$4 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$c(arguments[i]));
        return ar;
    };
    var LOG_LEVELS = {
        VERBOSE: 1,
        DEBUG: 2,
        INFO: 3,
        WARN: 4,
        ERROR: 5,
    };
    /**
     * Write logs
     * @class Logger
     */
    var ConsoleLogger = /** @class */ (function () {
        /**
         * @constructor
         * @param {string} name - Name of the logger
         */
        function ConsoleLogger(name, level) {
            if (level === void 0) { level = 'WARN'; }
            this.name = name;
            this.level = level;
        }
        ConsoleLogger.prototype._padding = function (n) {
            return n < 10 ? '0' + n : '' + n;
        };
        ConsoleLogger.prototype._ts = function () {
            var dt = new Date();
            return ([this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') +
                '.' +
                dt.getMilliseconds());
        };
        /**
         * Write log
         * @method
         * @memeberof Logger
         * @param {string} type - log type, default INFO
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype._log = function (type) {
            var msg = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                msg[_i - 1] = arguments[_i];
            }
            var logger_level_name = this.level;
            if (ConsoleLogger.LOG_LEVEL) {
                logger_level_name = ConsoleLogger.LOG_LEVEL;
            }
            if (typeof window !== 'undefined' && window.LOG_LEVEL) {
                logger_level_name = window.LOG_LEVEL;
            }
            var logger_level = LOG_LEVELS[logger_level_name];
            var type_level = LOG_LEVELS[type];
            if (!(type_level >= logger_level)) {
                // Do nothing if type is not greater than or equal to logger level (handle undefined)
                return;
            }
            var log = console.log.bind(console);
            if (type === 'ERROR' && console.error) {
                log = console.error.bind(console);
            }
            if (type === 'WARN' && console.warn) {
                log = console.warn.bind(console);
            }
            var prefix = "[" + type + "] " + this._ts() + " " + this.name;
            if (msg.length === 1 && typeof msg[0] === 'string') {
                log(prefix + " - " + msg[0]);
            }
            else if (msg.length === 1) {
                log(prefix, msg[0]);
            }
            else if (typeof msg[0] === 'string') {
                var obj = msg.slice(1);
                if (obj.length === 1) {
                    obj = obj[0];
                }
                log(prefix + " - " + msg[0], obj);
            }
            else {
                log(prefix, msg);
            }
        };
        /**
         * Write General log. Default to INFO
         * @method
         * @memeberof Logger
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype.log = function () {
            var msg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                msg[_i] = arguments[_i];
            }
            this._log.apply(this, __spread$4(['INFO'], msg));
        };
        /**
         * Write INFO log
         * @method
         * @memeberof Logger
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype.info = function () {
            var msg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                msg[_i] = arguments[_i];
            }
            this._log.apply(this, __spread$4(['INFO'], msg));
        };
        /**
         * Write WARN log
         * @method
         * @memeberof Logger
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype.warn = function () {
            var msg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                msg[_i] = arguments[_i];
            }
            this._log.apply(this, __spread$4(['WARN'], msg));
        };
        /**
         * Write ERROR log
         * @method
         * @memeberof Logger
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype.error = function () {
            var msg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                msg[_i] = arguments[_i];
            }
            this._log.apply(this, __spread$4(['ERROR'], msg));
        };
        /**
         * Write DEBUG log
         * @method
         * @memeberof Logger
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype.debug = function () {
            var msg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                msg[_i] = arguments[_i];
            }
            this._log.apply(this, __spread$4(['DEBUG'], msg));
        };
        /**
         * Write VERBOSE log
         * @method
         * @memeberof Logger
         * @param {string|object} msg - Logging message or object
         */
        ConsoleLogger.prototype.verbose = function () {
            var msg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                msg[_i] = arguments[_i];
            }
            this._log.apply(this, __spread$4(['VERBOSE'], msg));
        };
        ConsoleLogger.LOG_LEVEL = null;
        return ConsoleLogger;
    }());

    var __read$b = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var logger$s = new ConsoleLogger('Amplify');
    var AmplifyClass = /** @class */ (function () {
        function AmplifyClass() {
            // Everything that is `register`ed is tracked here
            this._components = [];
            this._config = {};
            // All modules (with `getModuleName()`) are stored here for dependency injection
            this._modules = {};
            // for backward compatibility to avoid breaking change
            // if someone is using like Amplify.Auth
            this.Auth = null;
            this.Analytics = null;
            this.API = null;
            this.Credentials = null;
            this.Storage = null;
            this.I18n = null;
            this.Cache = null;
            this.PubSub = null;
            this.Interactions = null;
            this.Pushnotification = null;
            this.UI = null;
            this.XR = null;
            this.Predictions = null;
            this.DataStore = null;
            this.Logger = ConsoleLogger;
            this.ServiceWorker = null;
        }
        AmplifyClass.prototype.register = function (comp) {
            logger$s.debug('component registered in amplify', comp);
            this._components.push(comp);
            if (typeof comp.getModuleName === 'function') {
                this._modules[comp.getModuleName()] = comp;
                this[comp.getModuleName()] = comp;
            }
            else {
                logger$s.debug('no getModuleName method for component', comp);
            }
            // Finally configure this new component(category) loaded
            // With the new modularization changes in Amplify V3, all the Amplify
            // component are not loaded/registered right away but when they are
            // imported (and hence instantiated) in the client's app. This ensures
            // that all new components imported get correctly configured with the
            // configuration that Amplify.configure() was called with.
            comp.configure(this._config);
        };
        AmplifyClass.prototype.configure = function (config) {
            var _this = this;
            if (!config)
                return this._config;
            this._config = Object.assign(this._config, config);
            logger$s.debug('amplify config', this._config);
            // Dependency Injection via property-setting.
            // This avoids introducing a public method/interface/setter that's difficult to remove later.
            // Plus, it reduces `if` statements within the `constructor` and `configure` of each module
            Object.entries(this._modules).forEach(function (_a) {
                var _b = __read$b(_a, 2); _b[0]; var comp = _b[1];
                // e.g. Auth.*
                Object.keys(comp).forEach(function (property) {
                    // e.g. Auth["Credentials"] = this._modules["Credentials"] when set
                    if (_this._modules[property]) {
                        comp[property] = _this._modules[property];
                    }
                });
            });
            this._components.map(function (comp) {
                comp.configure(_this._config);
            });
            return this._config;
        };
        AmplifyClass.prototype.addPluggable = function (pluggable) {
            if (pluggable &&
                pluggable['getCategory'] &&
                typeof pluggable['getCategory'] === 'function') {
                this._components.map(function (comp) {
                    if (comp['addPluggable'] &&
                        typeof comp['addPluggable'] === 'function') {
                        comp.addPluggable(pluggable);
                    }
                });
            }
        };
        return AmplifyClass;
    }());
    var Amplify = new AmplifyClass();

    // generated by genversion
    var version$2 = '3.8.22';

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var BASE_USER_AGENT = "aws-amplify/" + version$2;
    var Platform = {
        userAgent: BASE_USER_AGENT + " js",
        product: '',
        navigator: null,
        isReactNative: false,
    };
    if (typeof navigator !== 'undefined' && navigator.product) {
        Platform.product = navigator.product || '';
        Platform.navigator = navigator || null;
        switch (navigator.product) {
            case 'ReactNative':
                Platform.userAgent = BASE_USER_AGENT + " react-native";
                Platform.isReactNative = true;
                break;
            default:
                Platform.userAgent = BASE_USER_AGENT + " js";
                Platform.isReactNative = false;
                break;
        }
    }
    var getAmplifyUserAgent = function () {
        return Platform.userAgent;
    };

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$j = (undefined && undefined.__assign) || function () {
        __assign$j = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$j.apply(this, arguments);
    };
    var __read$a = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$3 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$a(arguments[i]));
        return ar;
    };
    var logger$r = new ConsoleLogger('Hub');
    var AMPLIFY_SYMBOL$4 = (typeof Symbol !== 'undefined' &&
        typeof Symbol.for === 'function'
        ? Symbol.for('amplify_default')
        : '@@amplify_default');
    function isLegacyCallback(callback) {
        return callback.onHubCapsule !== undefined;
    }
    var HubClass = /** @class */ (function () {
        function HubClass(name) {
            this.listeners = [];
            this.patterns = [];
            this.protectedChannels = [
                'core',
                'auth',
                'api',
                'analytics',
                'interactions',
                'pubsub',
                'storage',
                'xr',
            ];
            this.name = name;
        }
        // Note - Need to pass channel as a reference for removal to work and not anonymous function
        HubClass.prototype.remove = function (channel, listener) {
            if (channel instanceof RegExp) {
                var pattern_1 = this.patterns.find(function (_a) {
                    var pattern = _a.pattern;
                    return pattern.source === channel.source;
                });
                if (!pattern_1) {
                    logger$r.warn("No listeners for " + channel);
                    return;
                }
                this.patterns = __spread$3(this.patterns.filter(function (x) { return x !== pattern_1; }));
            }
            else {
                var holder = this.listeners[channel];
                if (!holder) {
                    logger$r.warn("No listeners for " + channel);
                    return;
                }
                this.listeners[channel] = __spread$3(holder.filter(function (_a) {
                    var callback = _a.callback;
                    return callback !== listener;
                }));
            }
        };
        HubClass.prototype.dispatch = function (channel, payload, source, ampSymbol) {
            if (source === void 0) { source = ''; }
            if (this.protectedChannels.indexOf(channel) > -1) {
                var hasAccess = ampSymbol === AMPLIFY_SYMBOL$4;
                if (!hasAccess) {
                    logger$r.warn("WARNING: " + channel + " is protected and dispatching on it can have unintended consequences");
                }
            }
            var capsule = {
                channel: channel,
                payload: __assign$j({}, payload),
                source: source,
                patternInfo: [],
            };
            try {
                this._toListeners(capsule);
            }
            catch (e) {
                logger$r.error(e);
            }
        };
        HubClass.prototype.listen = function (channel, callback, listenerName) {
            var _this = this;
            if (listenerName === void 0) { listenerName = 'noname'; }
            var cb;
            // Check for legacy onHubCapsule callback for backwards compatability
            if (isLegacyCallback(callback)) {
                logger$r.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
                cb = callback.onHubCapsule.bind(callback);
            }
            else if (typeof callback !== 'function') {
                throw new Error('No callback supplied to Hub');
            }
            else {
                cb = callback;
            }
            if (channel instanceof RegExp) {
                this.patterns.push({
                    pattern: channel,
                    callback: cb,
                });
            }
            else {
                var holder = this.listeners[channel];
                if (!holder) {
                    holder = [];
                    this.listeners[channel] = holder;
                }
                holder.push({
                    name: listenerName,
                    callback: cb,
                });
            }
            return function () {
                _this.remove(channel, cb);
            };
        };
        HubClass.prototype._toListeners = function (capsule) {
            var channel = capsule.channel, payload = capsule.payload;
            var holder = this.listeners[channel];
            if (holder) {
                holder.forEach(function (listener) {
                    logger$r.debug("Dispatching to " + channel + " with ", payload);
                    try {
                        listener.callback(capsule);
                    }
                    catch (e) {
                        logger$r.error(e);
                    }
                });
            }
            if (this.patterns.length > 0) {
                if (!payload.message) {
                    logger$r.warn("Cannot perform pattern matching without a message key");
                    return;
                }
                var payloadStr_1 = payload.message;
                this.patterns.forEach(function (pattern) {
                    var match = payloadStr_1.match(pattern.pattern);
                    if (match) {
                        var _a = __read$a(match), groups = _a.slice(1);
                        var dispatchingCapsule = __assign$j(__assign$j({}, capsule), { patternInfo: groups });
                        try {
                            pattern.callback(dispatchingCapsule);
                        }
                        catch (e) {
                            logger$r.error(e);
                        }
                    }
                });
            }
        };
        return HubClass;
    }());
    /*We export a __default__ instance of HubClass to use it as a
    psuedo Singleton for the main messaging bus, however you can still create
    your own instance of HubClass() for a separate "private bus" of events.*/
    var Hub = new HubClass('__default__');

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var logger$q = new ConsoleLogger('I18n');
    /**
     * Language transition class
     */
    var I18n$1 = /** @class */ (function () {
        /**
         * @constructor
         * Initialize with configurations
         * @param {Object} options
         */
        function I18n(options) {
            /**
             * @private
             */
            this._options = null;
            /**
             * @private
             */
            this._lang = null;
            /**
             * @private
             */
            this._dict = {};
            this._options = Object.assign({}, options);
            this._lang = this._options.language;
            if (!this._lang &&
                typeof window !== 'undefined' &&
                window &&
                window.navigator) {
                this._lang = window.navigator.language;
            }
            logger$q.debug(this._lang);
        }
        /**
         * @method
         * Explicitly setting language
         * @param {String} lang
         */
        I18n.prototype.setLanguage = function (lang) {
            this._lang = lang;
        };
        /**
         * @method
         * Get value
         * @param {String} key
         * @param {String} defVal - Default value
         */
        I18n.prototype.get = function (key, defVal) {
            if (defVal === void 0) { defVal = undefined; }
            if (!this._lang) {
                return typeof defVal !== 'undefined' ? defVal : key;
            }
            var lang = this._lang;
            var val = this.getByLanguage(key, lang);
            if (val) {
                return val;
            }
            if (lang.indexOf('-') > 0) {
                val = this.getByLanguage(key, lang.split('-')[0]);
            }
            if (val) {
                return val;
            }
            return typeof defVal !== 'undefined' ? defVal : key;
        };
        /**
         * @method
         * Get value according to specified language
         * @param {String} key
         * @param {String} language - Specified langurage to be used
         * @param {String} defVal - Default value
         */
        I18n.prototype.getByLanguage = function (key, language, defVal) {
            if (defVal === void 0) { defVal = null; }
            if (!language) {
                return defVal;
            }
            var lang_dict = this._dict[language];
            if (!lang_dict) {
                return defVal;
            }
            return lang_dict[key];
        };
        /**
         * @method
         * Add vocabularies for one language
         * @param {String} language - Language of the dictionary
         * @param {Object} vocabularies - Object that has key-value as dictionary entry
         */
        I18n.prototype.putVocabulariesForLanguage = function (language, vocabularies) {
            var lang_dict = this._dict[language];
            if (!lang_dict) {
                lang_dict = this._dict[language] = {};
            }
            Object.assign(lang_dict, vocabularies);
        };
        /**
         * @method
         * Add vocabularies for one language
         * @param {Object} vocabularies - Object that has language as key,
         *                                vocabularies of each language as value
         */
        I18n.prototype.putVocabularies = function (vocabularies) {
            var _this = this;
            Object.keys(vocabularies).map(function (key) {
                _this.putVocabulariesForLanguage(key, vocabularies[key]);
            });
        };
        return I18n;
    }());

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var logger$p = new ConsoleLogger('I18n');
    var _config = null;
    var _i18n = null;
    /**
     * Export I18n APIs
     */
    var I18n = /** @class */ (function () {
        function I18n() {
        }
        /**
         * @static
         * @method
         * Configure I18n part
         * @param {Object} config - Configuration of the I18n
         */
        I18n.configure = function (config) {
            logger$p.debug('configure I18n');
            if (!config) {
                return _config;
            }
            _config = Object.assign({}, _config, config.I18n || config);
            I18n.createInstance();
            return _config;
        };
        I18n.getModuleName = function () {
            return 'I18n';
        };
        /**
         * @static
         * @method
         * Create an instance of I18n for the library
         */
        I18n.createInstance = function () {
            logger$p.debug('create I18n instance');
            if (_i18n) {
                return;
            }
            _i18n = new I18n$1(_config);
        };
        /**
         * @static @method
         * Explicitly setting language
         * @param {String} lang
         */
        I18n.setLanguage = function (lang) {
            I18n.checkConfig();
            return _i18n.setLanguage(lang);
        };
        /**
         * @static @method
         * Get value
         * @param {String} key
         * @param {String} defVal - Default value
         */
        I18n.get = function (key, defVal) {
            if (!I18n.checkConfig()) {
                return typeof defVal === 'undefined' ? key : defVal;
            }
            return _i18n.get(key, defVal);
        };
        /**
         * @static
         * @method
         * Add vocabularies for one language
         * @param {String} langurage - Language of the dictionary
         * @param {Object} vocabularies - Object that has key-value as dictionary entry
         */
        I18n.putVocabulariesForLanguage = function (language, vocabularies) {
            I18n.checkConfig();
            return _i18n.putVocabulariesForLanguage(language, vocabularies);
        };
        /**
         * @static
         * @method
         * Add vocabularies for one language
         * @param {Object} vocabularies - Object that has language as key,
         *                                vocabularies of each language as value
         */
        I18n.putVocabularies = function (vocabularies) {
            I18n.checkConfig();
            return _i18n.putVocabularies(vocabularies);
        };
        I18n.checkConfig = function () {
            if (!_i18n) {
                _i18n = new I18n$1(_config);
            }
            return true;
        };
        return I18n;
    }());
    Amplify.register(I18n);

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var MIME_MAP = [
        { type: 'text/plain', ext: 'txt' },
        { type: 'text/html', ext: 'html' },
        { type: 'text/javascript', ext: 'js' },
        { type: 'text/css', ext: 'css' },
        { type: 'text/csv', ext: 'csv' },
        { type: 'text/yaml', ext: 'yml' },
        { type: 'text/yaml', ext: 'yaml' },
        { type: 'text/calendar', ext: 'ics' },
        { type: 'text/calendar', ext: 'ical' },
        { type: 'image/apng', ext: 'apng' },
        { type: 'image/bmp', ext: 'bmp' },
        { type: 'image/gif', ext: 'gif' },
        { type: 'image/x-icon', ext: 'ico' },
        { type: 'image/x-icon', ext: 'cur' },
        { type: 'image/jpeg', ext: 'jpg' },
        { type: 'image/jpeg', ext: 'jpeg' },
        { type: 'image/jpeg', ext: 'jfif' },
        { type: 'image/jpeg', ext: 'pjp' },
        { type: 'image/jpeg', ext: 'pjpeg' },
        { type: 'image/png', ext: 'png' },
        { type: 'image/svg+xml', ext: 'svg' },
        { type: 'image/tiff', ext: 'tif' },
        { type: 'image/tiff', ext: 'tiff' },
        { type: 'image/webp', ext: 'webp' },
        { type: 'application/json', ext: 'json' },
        { type: 'application/xml', ext: 'xml' },
        { type: 'application/x-sh', ext: 'sh' },
        { type: 'application/zip', ext: 'zip' },
        { type: 'application/x-rar-compressed', ext: 'rar' },
        { type: 'application/x-tar', ext: 'tar' },
        { type: 'application/x-bzip', ext: 'bz' },
        { type: 'application/x-bzip2', ext: 'bz2' },
        { type: 'application/pdf', ext: 'pdf' },
        { type: 'application/java-archive', ext: 'jar' },
        { type: 'application/msword', ext: 'doc' },
        { type: 'application/vnd.ms-excel', ext: 'xls' },
        { type: 'application/vnd.ms-excel', ext: 'xlsx' },
        { type: 'message/rfc822', ext: 'eml' },
    ];
    var isEmpty = function (obj) {
        if (obj === void 0) { obj = {}; }
        return Object.keys(obj).length === 0;
    };
    var sortByField = function (list, field, dir) {
        if (!list || !list.sort) {
            return false;
        }
        var dirX = dir && dir === 'desc' ? -1 : 1;
        list.sort(function (a, b) {
            var a_val = a[field];
            var b_val = b[field];
            if (typeof b_val === 'undefined') {
                return typeof a_val === 'undefined' ? 0 : 1 * dirX;
            }
            if (typeof a_val === 'undefined') {
                return -1 * dirX;
            }
            if (a_val < b_val) {
                return -1 * dirX;
            }
            if (a_val > b_val) {
                return 1 * dirX;
            }
            return 0;
        });
        return true;
    };
    var objectLessAttributes = function (obj, less) {
        var ret = Object.assign({}, obj);
        if (less) {
            if (typeof less === 'string') {
                delete ret[less];
            }
            else {
                less.forEach(function (attr) {
                    delete ret[attr];
                });
            }
        }
        return ret;
    };
    var filenameToContentType = function (filename, defVal) {
        if (defVal === void 0) { defVal = 'application/octet-stream'; }
        var name = filename.toLowerCase();
        var filtered = MIME_MAP.filter(function (mime) { return name.endsWith('.' + mime.ext); });
        return filtered.length > 0 ? filtered[0].type : defVal;
    };
    var isTextFile = function (contentType) {
        var type = contentType.toLowerCase();
        if (type.startsWith('text/')) {
            return true;
        }
        return ('application/json' === type ||
            'application/xml' === type ||
            'application/sh' === type);
    };
    var generateRandomString = function () {
        var result = '';
        var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (var i = 32; i > 0; i -= 1) {
            result += chars[Math.floor(Math.random() * chars.length)];
        }
        return result;
    };
    var makeQuerablePromise = function (promise) {
        if (promise.isResolved)
            return promise;
        var isPending = true;
        var isRejected = false;
        var isFullfilled = false;
        var result = promise.then(function (data) {
            isFullfilled = true;
            isPending = false;
            return data;
        }, function (e) {
            isRejected = true;
            isPending = false;
            throw e;
        });
        result.isFullfilled = function () { return isFullfilled; };
        result.isPending = function () { return isPending; };
        result.isRejected = function () { return isRejected; };
        return result;
    };
    var isWebWorker = function () {
        if (typeof self === 'undefined') {
            return false;
        }
        var selfContext = self;
        return typeof selfContext.WorkerGlobalScope !== 'undefined' &&
            self instanceof selfContext.WorkerGlobalScope;
    };
    var browserOrNode = function () {
        var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
        var isNode = typeof process !== 'undefined' &&
            process.versions != null &&
            process.versions.node != null;
        return {
            isBrowser: isBrowser,
            isNode: isNode,
        };
    };
    /**
     * transfer the first letter of the keys to lowercase
     * @param {Object} obj - the object need to be transferred
     * @param {Array} whiteListForItself - whitelist itself from being transferred
     * @param {Array} whiteListForChildren - whitelist its children keys from being transferred
     */
    var transferKeyToLowerCase = function (obj, whiteListForItself, whiteListForChildren) {
        if (whiteListForItself === void 0) { whiteListForItself = []; }
        if (whiteListForChildren === void 0) { whiteListForChildren = []; }
        if (!isStrictObject(obj))
            return obj;
        var ret = {};
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                var transferedKey = whiteListForItself.includes(key)
                    ? key
                    : key[0].toLowerCase() + key.slice(1);
                ret[transferedKey] = whiteListForChildren.includes(key)
                    ? obj[key]
                    : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
            }
        }
        return ret;
    };
    /**
     * transfer the first letter of the keys to lowercase
     * @param {Object} obj - the object need to be transferred
     * @param {Array} whiteListForItself - whitelist itself from being transferred
     * @param {Array} whiteListForChildren - whitelist its children keys from being transferred
     */
    var transferKeyToUpperCase = function (obj, whiteListForItself, whiteListForChildren) {
        if (whiteListForItself === void 0) { whiteListForItself = []; }
        if (whiteListForChildren === void 0) { whiteListForChildren = []; }
        if (!isStrictObject(obj))
            return obj;
        var ret = {};
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                var transferredKey = whiteListForItself.includes(key)
                    ? key
                    : key[0].toUpperCase() + key.slice(1);
                ret[transferredKey] = whiteListForChildren.includes(key)
                    ? obj[key]
                    : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
            }
        }
        return ret;
    };
    /**
     * Return true if the object is a strict object
     * which means it's not Array, Function, Number, String, Boolean or Null
     * @param obj the Object
     */
    var isStrictObject = function (obj) {
        return (obj instanceof Object &&
            !(obj instanceof Array) &&
            !(obj instanceof Function) &&
            !(obj instanceof Number) &&
            !(obj instanceof String) &&
            !(obj instanceof Boolean));
    };
    /**
     * @deprecated use per-function imports
     */
    var JS = /** @class */ (function () {
        function JS() {
        }
        JS.isEmpty = isEmpty;
        JS.sortByField = sortByField;
        JS.objectLessAttributes = objectLessAttributes;
        JS.filenameToContentType = filenameToContentType;
        JS.isTextFile = isTextFile;
        JS.generateRandomString = generateRandomString;
        JS.makeQuerablePromise = makeQuerablePromise;
        JS.isWebWorker = isWebWorker;
        JS.browserOrNode = browserOrNode;
        JS.transferKeyToLowerCase = transferKeyToLowerCase;
        JS.transferKeyToUpperCase = transferKeyToUpperCase;
        JS.isStrictObject = isStrictObject;
        return JS;
    }());

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$2 = function(d, b) {
        extendStatics$2 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$2(d, b);
    };

    function __extends$8(d, b) {
        extendStatics$2(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$i = function() {
        __assign$i = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$i.apply(this, arguments);
    };

    function __rest$6(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter$j(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$j(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values$1(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$9(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$2() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$9(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends$8,
        get __assign () { return __assign$i; },
        __rest: __rest$6,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter$j,
        __generator: __generator$j,
        __createBinding: __createBinding,
        __exportStar: __exportStar,
        __values: __values$1,
        __read: __read$9,
        __spread: __spread$2,
        __spreadArrays: __spreadArrays,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues,
        __makeTemplateObject: __makeTemplateObject,
        __importStar: __importStar,
        __importDefault: __importDefault,
        __classPrivateFieldGet: __classPrivateFieldGet,
        __classPrivateFieldSet: __classPrivateFieldSet
    });

    /**
     * @internal
     */
    var BLOCK_SIZE$1 = 64;
    /**
     * @internal
     */
    var DIGEST_LENGTH$1 = 32;
    /**
     * @internal
     */
    var KEY = new Uint32Array([
        0x428a2f98,
        0x71374491,
        0xb5c0fbcf,
        0xe9b5dba5,
        0x3956c25b,
        0x59f111f1,
        0x923f82a4,
        0xab1c5ed5,
        0xd807aa98,
        0x12835b01,
        0x243185be,
        0x550c7dc3,
        0x72be5d74,
        0x80deb1fe,
        0x9bdc06a7,
        0xc19bf174,
        0xe49b69c1,
        0xefbe4786,
        0x0fc19dc6,
        0x240ca1cc,
        0x2de92c6f,
        0x4a7484aa,
        0x5cb0a9dc,
        0x76f988da,
        0x983e5152,
        0xa831c66d,
        0xb00327c8,
        0xbf597fc7,
        0xc6e00bf3,
        0xd5a79147,
        0x06ca6351,
        0x14292967,
        0x27b70a85,
        0x2e1b2138,
        0x4d2c6dfc,
        0x53380d13,
        0x650a7354,
        0x766a0abb,
        0x81c2c92e,
        0x92722c85,
        0xa2bfe8a1,
        0xa81a664b,
        0xc24b8b70,
        0xc76c51a3,
        0xd192e819,
        0xd6990624,
        0xf40e3585,
        0x106aa070,
        0x19a4c116,
        0x1e376c08,
        0x2748774c,
        0x34b0bcb5,
        0x391c0cb3,
        0x4ed8aa4a,
        0x5b9cca4f,
        0x682e6ff3,
        0x748f82ee,
        0x78a5636f,
        0x84c87814,
        0x8cc70208,
        0x90befffa,
        0xa4506ceb,
        0xbef9a3f7,
        0xc67178f2
    ]);
    /**
     * @internal
     */
    var INIT$1 = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    /**
     * @internal
     */
    var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;


    var constants$2 = /*#__PURE__*/Object.defineProperty({
    	BLOCK_SIZE: BLOCK_SIZE$1,
    	DIGEST_LENGTH: DIGEST_LENGTH$1,
    	KEY: KEY,
    	INIT: INIT$1,
    	MAX_HASHABLE_LENGTH: MAX_HASHABLE_LENGTH
    }, '__esModule', {value: true});

    /**
     * @internal
     */
    var RawSha256 = /** @class */ (function () {
        function RawSha256() {
            this.state = Int32Array.from(constants$2.INIT);
            this.temp = new Int32Array(64);
            this.buffer = new Uint8Array(64);
            this.bufferLength = 0;
            this.bytesHashed = 0;
            /**
             * @internal
             */
            this.finished = false;
        }
        RawSha256.prototype.update = function (data) {
            if (this.finished) {
                throw new Error("Attempted to update an already finished hash.");
            }
            var position = 0;
            var byteLength = data.byteLength;
            this.bytesHashed += byteLength;
            if (this.bytesHashed * 8 > constants$2.MAX_HASHABLE_LENGTH) {
                throw new Error("Cannot hash more than 2^53 - 1 bits");
            }
            while (byteLength > 0) {
                this.buffer[this.bufferLength++] = data[position++];
                byteLength--;
                if (this.bufferLength === constants$2.BLOCK_SIZE) {
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
            }
        };
        RawSha256.prototype.digest = function () {
            if (!this.finished) {
                var bitsHashed = this.bytesHashed * 8;
                var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
                var undecoratedLength = this.bufferLength;
                bufferView.setUint8(this.bufferLength++, 0x80);
                // Ensure the final block has enough room for the hashed length
                if (undecoratedLength % constants$2.BLOCK_SIZE >= constants$2.BLOCK_SIZE - 8) {
                    for (var i = this.bufferLength; i < constants$2.BLOCK_SIZE; i++) {
                        bufferView.setUint8(i, 0);
                    }
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
                for (var i = this.bufferLength; i < constants$2.BLOCK_SIZE - 8; i++) {
                    bufferView.setUint8(i, 0);
                }
                bufferView.setUint32(constants$2.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
                bufferView.setUint32(constants$2.BLOCK_SIZE - 4, bitsHashed);
                this.hashBuffer();
                this.finished = true;
            }
            // The value in state is little-endian rather than big-endian, so flip
            // each word into a new Uint8Array
            var out = new Uint8Array(constants$2.DIGEST_LENGTH);
            for (var i = 0; i < 8; i++) {
                out[i * 4] = (this.state[i] >>> 24) & 0xff;
                out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
                out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
                out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
            }
            return out;
        };
        RawSha256.prototype.hashBuffer = function () {
            var _a = this, buffer = _a.buffer, state = _a.state;
            var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
            for (var i = 0; i < constants$2.BLOCK_SIZE; i++) {
                if (i < 16) {
                    this.temp[i] =
                        ((buffer[i * 4] & 0xff) << 24) |
                            ((buffer[i * 4 + 1] & 0xff) << 16) |
                            ((buffer[i * 4 + 2] & 0xff) << 8) |
                            (buffer[i * 4 + 3] & 0xff);
                }
                else {
                    var u = this.temp[i - 2];
                    var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);
                    u = this.temp[i - 15];
                    var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);
                    this.temp[i] =
                        ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);
                }
                var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^
                    ((state4 >>> 11) | (state4 << 21)) ^
                    ((state4 >>> 25) | (state4 << 7))) +
                    ((state4 & state5) ^ (~state4 & state6))) |
                    0) +
                    ((state7 + ((constants$2.KEY[i] + this.temp[i]) | 0)) | 0)) |
                    0;
                var t2 = ((((state0 >>> 2) | (state0 << 30)) ^
                    ((state0 >>> 13) | (state0 << 19)) ^
                    ((state0 >>> 22) | (state0 << 10))) +
                    ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |
                    0;
                state7 = state6;
                state6 = state5;
                state5 = state4;
                state4 = (state3 + t1) | 0;
                state3 = state2;
                state2 = state1;
                state1 = state0;
                state0 = (t1 + t2) | 0;
            }
            state[0] += state0;
            state[1] += state1;
            state[2] += state2;
            state[3] += state3;
            state[4] += state4;
            state[5] += state5;
            state[6] += state6;
            state[7] += state7;
        };
        return RawSha256;
    }());
    var RawSha256_2 = RawSha256;


    var RawSha256_1$1 = /*#__PURE__*/Object.defineProperty({
    	RawSha256: RawSha256_2
    }, '__esModule', {value: true});

    /**
     * Converts a JS string from its native UCS-2/UTF-16 representation into a
     * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.
     *
     * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google
     * Closure library, though updated to use typed arrays.
     */
    var fromUtf8$5 = function (input) {
        var bytes = [];
        for (var i = 0, len = input.length; i < len; i++) {
            var value = input.charCodeAt(i);
            if (value < 0x80) {
                bytes.push(value);
            }
            else if (value < 0x800) {
                bytes.push((value >> 6) | 192, (value & 63) | 128);
            }
            else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
                bytes.push((surrogatePair >> 18) | 240, ((surrogatePair >> 12) & 63) | 128, ((surrogatePair >> 6) & 63) | 128, (surrogatePair & 63) | 128);
            }
            else {
                bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);
            }
        }
        return Uint8Array.from(bytes);
    };
    /**
     * Converts a typed array of bytes containing UTF-8 data into a native JS
     * string.
     *
     * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the
     * Google Closure library, though updated to use typed arrays and to better
     * handle astral plane code points.
     */
    var toUtf8$5 = function (input) {
        var decoded = "";
        for (var i = 0, len = input.length; i < len; i++) {
            var byte = input[i];
            if (byte < 0x80) {
                decoded += String.fromCharCode(byte);
            }
            else if (192 <= byte && byte < 224) {
                var nextByte = input[++i];
                decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));
            }
            else if (240 <= byte && byte < 365) {
                var surrogatePair = [byte, input[++i], input[++i], input[++i]];
                var encoded = "%" + surrogatePair.map(function (byteValue) { return byteValue.toString(16); }).join("%");
                decoded += decodeURIComponent(encoded);
            }
            else {
                decoded += String.fromCharCode(((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63));
            }
        }
        return decoded;
    };

    function fromUtf8$4(input) {
        return new TextEncoder().encode(input);
    }
    function toUtf8$4(input) {
        return new TextDecoder("utf-8").decode(input);
    }

    var fromUtf8$3 = function (input) {
        return typeof TextEncoder === "function" ? fromUtf8$4(input) : fromUtf8$5(input);
    };
    var toUtf8$3 = function (input) {
        return typeof TextDecoder === "function" ? toUtf8$4(input) : toUtf8$5(input);
    };

    var es$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fromUtf8: fromUtf8$3,
        toUtf8: toUtf8$3
    });

    var tslib_1 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

    var util_utf8_browser_1$1 = /*@__PURE__*/getAugmentedNamespace(es$2);

    var Sha256 = /** @class */ (function () {
        function Sha256(secret) {
            this.hash = new RawSha256_1$1.RawSha256();
            if (secret) {
                this.outer = new RawSha256_1$1.RawSha256();
                var inner = bufferFromSecret(secret);
                var outer = new Uint8Array(constants$2.BLOCK_SIZE);
                outer.set(inner);
                for (var i = 0; i < constants$2.BLOCK_SIZE; i++) {
                    inner[i] ^= 0x36;
                    outer[i] ^= 0x5c;
                }
                this.hash.update(inner);
                this.outer.update(outer);
                // overwrite the copied key in memory
                for (var i = 0; i < inner.byteLength; i++) {
                    inner[i] = 0;
                }
            }
        }
        Sha256.prototype.update = function (toHash) {
            if (isEmptyData$1(toHash) || this.error) {
                return;
            }
            try {
                this.hash.update(convertToBuffer$1(toHash));
            }
            catch (e) {
                this.error = e;
            }
        };
        /* This synchronous method keeps compatibility
         * with the v2 aws-sdk.
         */
        Sha256.prototype.digestSync = function () {
            if (this.error) {
                throw this.error;
            }
            if (this.outer) {
                if (!this.outer.finished) {
                    this.outer.update(this.hash.digest());
                }
                return this.outer.digest();
            }
            return this.hash.digest();
        };
        /* The underlying digest method here is synchronous.
         * To keep the same interface with the other hash functions
         * the default is to expose this as an async method.
         * However, it can sometimes be useful to have a sync method.
         */
        Sha256.prototype.digest = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    return [2 /*return*/, this.digestSync()];
                });
            });
        };
        return Sha256;
    }());
    var Sha256_1 = Sha256;
    function bufferFromSecret(secret) {
        var input = convertToBuffer$1(secret);
        if (input.byteLength > constants$2.BLOCK_SIZE) {
            var bufferHash = new RawSha256_1$1.RawSha256();
            bufferHash.update(input);
            input = bufferHash.digest();
        }
        var buffer = new Uint8Array(constants$2.BLOCK_SIZE);
        buffer.set(input);
        return buffer;
    }
    function isEmptyData$1(data) {
        if (typeof data === "string") {
            return data.length === 0;
        }
        return data.byteLength === 0;
    }
    function convertToBuffer$1(data) {
        if (typeof data === "string") {
            return util_utf8_browser_1$1.fromUtf8(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
        }
        return new Uint8Array(data);
    }


    var jsSha256$1 = /*#__PURE__*/Object.defineProperty({
    	Sha256: Sha256_1
    }, '__esModule', {value: true});

    var build$5 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1.__exportStar(jsSha256$1, exports);
    //# sourceMappingURL=index.js.map
    });

    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (var i$3 = 0; i$3 < 256; i$3++) {
        var encodedByte = i$3.toString(16).toLowerCase();
        if (encodedByte.length === 1) {
            encodedByte = "0" + encodedByte;
        }
        SHORT_TO_HEX[i$3] = encodedByte;
        HEX_TO_SHORT[encodedByte] = i$3;
    }
    /**
     * Converts a hexadecimal encoded string to a Uint8Array of bytes.
     *
     * @param encoded The hexadecimal encoded string
     */
    function fromHex(encoded) {
        if (encoded.length % 2 !== 0) {
            throw new Error("Hex encoded strings must have an even number length");
        }
        var out = new Uint8Array(encoded.length / 2);
        for (var i = 0; i < encoded.length; i += 2) {
            var encodedByte = encoded.substr(i, 2).toLowerCase();
            if (encodedByte in HEX_TO_SHORT) {
                out[i / 2] = HEX_TO_SHORT[encodedByte];
            }
            else {
                throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
            }
        }
        return out;
    }
    /**
     * Converts a Uint8Array of binary data to a hexadecimal encoded string.
     *
     * @param bytes The binary data to encode
     */
    function toHex(bytes) {
        var out = "";
        for (var i = 0; i < bytes.byteLength; i++) {
            out += SHORT_TO_HEX[bytes[i]];
        }
        return out;
    }

    var __extends$7 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$i = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$i = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$8 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$1 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$8(arguments[i]));
        return ar;
    };
    var logger$o = new ConsoleLogger('Util');
    var NonRetryableError = /** @class */ (function (_super) {
        __extends$7(NonRetryableError, _super);
        function NonRetryableError(message) {
            var _this = _super.call(this, message) || this;
            _this.nonRetryable = true;
            return _this;
        }
        return NonRetryableError;
    }(Error));
    var isNonRetryableError = function (obj) {
        var key = 'nonRetryable';
        return obj && obj[key];
    };
    /**
     * @private
     * Internal use of Amplify only
     */
    function retry(functionToRetry, args, delayFn, attempt) {
        if (attempt === void 0) { attempt = 1; }
        return __awaiter$i(this, void 0, void 0, function () {
            var err_1, retryIn_1;
            return __generator$i(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof functionToRetry !== 'function') {
                            throw Error('functionToRetry must be a function');
                        }
                        logger$o.debug(functionToRetry.name + " attempt #" + attempt + " with this vars: " + JSON.stringify(args));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 8]);
                        return [4 /*yield*/, functionToRetry.apply(void 0, __spread$1(args))];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        err_1 = _a.sent();
                        logger$o.debug("error on " + functionToRetry.name, err_1);
                        if (isNonRetryableError(err_1)) {
                            logger$o.debug(functionToRetry.name + " non retryable error", err_1);
                            throw err_1;
                        }
                        retryIn_1 = delayFn(attempt, args, err_1);
                        logger$o.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
                        if (!(retryIn_1 !== false)) return [3 /*break*/, 6];
                        return [4 /*yield*/, new Promise(function (res) { return setTimeout(res, retryIn_1); })];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, retry(functionToRetry, args, delayFn, attempt + 1)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: throw err_1;
                    case 7: return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    var MAX_DELAY_MS$1 = 5 * 60 * 1000;
    function jitteredBackoff(maxDelayMs) {
        var BASE_TIME_MS = 100;
        var JITTER_FACTOR = 100;
        return function (attempt) {
            var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
            return delay > maxDelayMs ? false : delay;
        };
    }
    /**
     * @private
     * Internal use of Amplify only
     */
    var jitteredExponentialRetry = function (functionToRetry, args, maxDelayMs) {
        if (maxDelayMs === void 0) { maxDelayMs = MAX_DELAY_MS$1; }
        return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
    };

    var Observable_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    // === Symbol Support ===
    var hasSymbols = function () {
      return typeof Symbol === 'function';
    };

    var hasSymbol = function (name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };

    var getSymbol = function (name) {
      return hasSymbol(name) ? Symbol[name] : '@@' + name;
    };

    if (hasSymbols() && !hasSymbol('observable')) {
      Symbol.observable = Symbol('observable');
    }

    var SymbolIterator = getSymbol('iterator');
    var SymbolObservable = getSymbol('observable');
    var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null) return undefined;
      if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
      return value;
    }

    function getSpecies(obj) {
      var ctor = obj.constructor;

      if (ctor !== undefined) {
        ctor = ctor[SymbolSpecies];

        if (ctor === null) {
          ctor = undefined;
        }
      }

      return ctor !== undefined ? ctor : Observable;
    }

    function isObservable(x) {
      return x instanceof Observable; // SPEC: Brand check
    }

    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function () {
          throw e;
        });
      }
    }

    function enqueue(fn) {
      Promise.resolve().then(function () {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }

    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === undefined) return;
      subscription._cleanup = undefined;

      if (!cleanup) {
        return;
      }

      try {
        if (typeof cleanup === 'function') {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, 'unsubscribe');

          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }

    function closeSubscription(subscription) {
      subscription._observer = undefined;
      subscription._queue = undefined;
      subscription._state = 'closed';
    }

    function flushSubscription(subscription) {
      var queue = subscription._queue;

      if (!queue) {
        return;
      }

      subscription._queue = undefined;
      subscription._state = 'ready';

      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === 'closed') break;
      }
    }

    function notifySubscription(subscription, type, value) {
      subscription._state = 'running';
      var observer = subscription._observer;

      try {
        var m = getMethod(observer, type);

        switch (type) {
          case 'next':
            if (m) m.call(observer, value);
            break;

          case 'error':
            closeSubscription(subscription);
            if (m) m.call(observer, value);else throw value;
            break;

          case 'complete':
            closeSubscription(subscription);
            if (m) m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }

      if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
    }

    function onNotify(subscription, type, value) {
      if (subscription._state === 'closed') return;

      if (subscription._state === 'buffering') {
        subscription._queue.push({
          type: type,
          value: value
        });

        return;
      }

      if (subscription._state !== 'ready') {
        subscription._state = 'buffering';
        subscription._queue = [{
          type: type,
          value: value
        }];
        enqueue(function () {
          return flushSubscription(subscription);
        });
        return;
      }

      notifySubscription(subscription, type, value);
    }

    var Subscription =
    /*#__PURE__*/
    function () {
      function Subscription(observer, subscriber) {
        _classCallCheck(this, Subscription);

        // ASSERT: observer is an object
        // ASSERT: subscriber is callable
        this._cleanup = undefined;
        this._observer = observer;
        this._queue = undefined;
        this._state = 'initializing';
        var subscriptionObserver = new SubscriptionObserver(this);

        try {
          this._cleanup = subscriber.call(undefined, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }

        if (this._state === 'initializing') this._state = 'ready';
      }

      _createClass(Subscription, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== 'closed') {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function () {
          return this._state === 'closed';
        }
      }]);

      return Subscription;
    }();

    var SubscriptionObserver =
    /*#__PURE__*/
    function () {
      function SubscriptionObserver(subscription) {
        _classCallCheck(this, SubscriptionObserver);

        this._subscription = subscription;
      }

      _createClass(SubscriptionObserver, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, 'next', value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, 'error', value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, 'complete');
        }
      }, {
        key: "closed",
        get: function () {
          return this._subscription._state === 'closed';
        }
      }]);

      return SubscriptionObserver;
    }();

    var Observable =
    /*#__PURE__*/
    function () {
      function Observable(subscriber) {
        _classCallCheck(this, Observable);

        if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
        if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
        this._subscriber = subscriber;
      }

      _createClass(Observable, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== 'object' || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }

          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;

          return new Promise(function (resolve, reject) {
            if (typeof fn !== 'function') {
              reject(new TypeError(fn + ' is not a function'));
              return;
            }

            function done() {
              subscription.unsubscribe();
              resolve();
            }

            var subscription = _this.subscribe({
              next: function (value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          return new C(function (observer) {
            return _this2.subscribe({
              next: function (value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }

                observer.next(value);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          return new C(function (observer) {
            return _this3.subscribe({
              next: function (value) {
                try {
                  if (!fn(value)) return;
                } catch (e) {
                  return observer.error(e);
                }

                observer.next(value);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function (observer) {
            return _this4.subscribe({
              next: function (value) {
                var first = !hasValue;
                hasValue = true;

                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;

          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }

          var C = getSpecies(this);
          return new C(function (observer) {
            var subscription;
            var index = 0;

            function startNext(next) {
              subscription = next.subscribe({
                next: function (v) {
                  observer.next(v);
                },
                error: function (e) {
                  observer.error(e);
                },
                complete: function () {
                  if (index === sources.length) {
                    subscription = undefined;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }

            startNext(_this5);
            return function () {
              if (subscription) {
                subscription.unsubscribe();
                subscription = undefined;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          return new C(function (observer) {
            var subscriptions = [];

            var outer = _this6.subscribe({
              next: function (value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }

                var inner = C.from(value).subscribe({
                  next: function (value) {
                    observer.next(value);
                  },
                  error: function (e) {
                    observer.error(e);
                  },
                  complete: function () {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0) subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                completeIfDone();
              }
            });

            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0) observer.complete();
            }

            return function () {
              subscriptions.forEach(function (s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function () {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x) {
          var C = typeof this === 'function' ? this : Observable;
          if (x == null) throw new TypeError(x + ' is not an object');
          var method = getMethod(x, SymbolObservable);

          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
            if (isObservable(observable) && observable.constructor === C) return observable;
            return new C(function (observer) {
              return observable.subscribe(observer);
            });
          }

          if (hasSymbol('iterator')) {
            method = getMethod(x, SymbolIterator);

            if (method) {
              return new C(function (observer) {
                enqueue(function () {
                  if (observer.closed) return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed) return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }

                  observer.complete();
                });
              });
            }
          }

          if (Array.isArray(x)) {
            return new C(function (observer) {
              enqueue(function () {
                if (observer.closed) return;

                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed) return;
                }

                observer.complete();
              });
            });
          }

          throw new TypeError(x + ' is not observable');
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }

          var C = typeof this === 'function' ? this : Observable;
          return new C(function (observer) {
            enqueue(function () {
              if (observer.closed) return;

              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed) return;
              }

              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function () {
          return this;
        }
      }]);

      return Observable;
    }();

    exports.Observable = Observable;

    if (hasSymbols()) {
      Object.defineProperty(Observable, Symbol('extensions'), {
        value: {
          symbol: SymbolObservable,
          hostReportError: hostReportError
        },
        configurable: true
      });
    }
    });

    var zenObservable = Observable_1.Observable;

    var Observable = zenObservable;

    /**
     * Date & time utility functions to abstract the `aws-sdk` away from users.
     * (v2 => v3 modularization is a breaking change)
     *
     * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262
     */
    var __read$7 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    // Comment - TODO: remove
    var FIVE_MINUTES_IN_MS = 1000 * 60 * 5;
    var DateUtils = {
        /**
         * Milliseconds to offset the date to compensate for clock skew between device & services
         */
        clockOffset: 0,
        getDateWithClockOffset: function () {
            if (DateUtils.clockOffset) {
                return new Date(new Date().getTime() + DateUtils.clockOffset);
            }
            else {
                return new Date();
            }
        },
        /**
         * @returns {number} Clock offset in milliseconds
         */
        getClockOffset: function () {
            return DateUtils.clockOffset;
        },
        getHeaderStringFromDate: function (date) {
            if (date === void 0) { date = DateUtils.getDateWithClockOffset(); }
            return date.toISOString().replace(/[:\-]|\.\d{3}/g, '');
        },
        getDateFromHeaderString: function (header) {
            var _a = __read$7(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
            return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
        },
        isClockSkewed: function (serverDate) {
            // API gateway permits client calls that are off by no more than ±5 minutes
            return (Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS);
        },
        isClockSkewError: function (error) {
            if (!error.response || !error.response.headers) {
                return false;
            }
            var headers = error.response.headers;
            return Boolean(headers['x-amzn-errortype'] === 'BadRequestException' &&
                (headers.date || headers.Date));
        },
        /**
         * @param {number} offset Clock offset in milliseconds
         */
        setClockOffset: function (offset) {
            DateUtils.clockOffset = offset;
        },
    };

    function urlSafeEncode(str) {
        return str
            .split('')
            .map(function (char) {
            return char
                .charCodeAt(0)
                .toString(16)
                .padStart(2, '0');
        })
            .join('');
    }
    function urlSafeDecode(hex) {
        return hex
            .match(/.{2}/g)
            .map(function (char) { return String.fromCharCode(parseInt(char, 16)); })
            .join('');
    }

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$h = (undefined && undefined.__assign) || function () {
        __assign$h = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$h.apply(this, arguments);
    };
    var __rest$5 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var logger$n = new ConsoleLogger('Signer');
    var DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';
    var IOT_SERVICE_NAME = 'iotdevicegateway';
    var encrypt = function (key, src) {
        var hash = new build$5.Sha256(key);
        hash.update(src);
        return hash.digestSync();
    };
    var hash = function (src) {
        var arg = src || '';
        var hash = new build$5.Sha256();
        hash.update(arg);
        return toHex(hash.digestSync());
    };
    /**
     * @private
     * RFC 3986 compliant version of encodeURIComponent
     */
    var escape_RFC3986 = function (component) {
        return component.replace(/[!'()*]/g, function (c) {
            return ('%' +
                c
                    .charCodeAt(0)
                    .toString(16)
                    .toUpperCase());
        });
    };
    /**
     * @private
     * Create canonical query string
     *
     */
    var canonical_query = function (query) {
        if (!query || query.length === 0) {
            return '';
        }
        return query
            .split('&')
            .map(function (e) {
            var key_val = e.split('=');
            if (key_val.length === 1) {
                return e;
            }
            else {
                var reencoded_val = escape_RFC3986(key_val[1]);
                return key_val[0] + '=' + reencoded_val;
            }
        })
            .sort(function (a, b) {
            var key_a = a.split('=')[0];
            var key_b = b.split('=')[0];
            if (key_a === key_b) {
                return a < b ? -1 : 1;
            }
            else {
                return key_a < key_b ? -1 : 1;
            }
        })
            .join('&');
    };
    /**
    * @private
    * Create canonical headers
    *
    <pre>
    CanonicalHeaders =
        CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN
    CanonicalHeadersEntry =
        Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\n'
    </pre>
    */
    var canonical_headers = function (headers) {
        if (!headers || Object.keys(headers).length === 0) {
            return '';
        }
        return (Object.keys(headers)
            .map(function (key) {
            return {
                key: key.toLowerCase(),
                value: headers[key] ? headers[key].trim().replace(/\s+/g, ' ') : '',
            };
        })
            .sort(function (a, b) {
            return a.key < b.key ? -1 : 1;
        })
            .map(function (item) {
            return item.key + ':' + item.value;
        })
            .join('\n') + '\n');
    };
    /**
     * List of header keys included in the canonical headers.
     * @access private
     */
    var signed_headers = function (headers) {
        return Object.keys(headers)
            .map(function (key) {
            return key.toLowerCase();
        })
            .sort()
            .join(';');
    };
    /**
    * @private
    * Create canonical request
    * Refer to
    * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}
    *
    <pre>
    CanonicalRequest =
        HTTPRequestMethod + '\n' +
        CanonicalURI + '\n' +
        CanonicalQueryString + '\n' +
        CanonicalHeaders + '\n' +
        SignedHeaders + '\n' +
        HexEncode(Hash(RequestPayload))
    </pre>
    */
    var canonical_request = function (request) {
        var url_info = url.parse(request.url);
        return [
            request.method || '/',
            encodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'),
            canonical_query(url_info.query),
            canonical_headers(request.headers),
            signed_headers(request.headers),
            hash(request.data),
        ].join('\n');
    };
    var parse_service_info = function (request) {
        var url_info = url.parse(request.url), host = url_info.host;
        var matched = host.match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
        var parsed = (matched || []).slice(1, 3);
        if (parsed[1] === 'es') {
            // Elastic Search
            parsed = parsed.reverse();
        }
        return {
            service: request.service || parsed[0],
            region: request.region || parsed[1],
        };
    };
    var credential_scope = function (d_str, region, service) {
        return [d_str, region, service, 'aws4_request'].join('/');
    };
    /**
    * @private
    * Create a string to sign
    * Refer to
    * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}
    *
    <pre>
    StringToSign =
        Algorithm + \n +
        RequestDateTime + \n +
        CredentialScope + \n +
        HashedCanonicalRequest
    </pre>
    */
    var string_to_sign = function (algorithm, canonical_request, dt_str, scope) {
        return [algorithm, dt_str, scope, hash(canonical_request)].join('\n');
    };
    /**
    * @private
    * Create signing key
    * Refer to
    * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}
    *
    <pre>
    kSecret = your secret access key
    kDate = HMAC("AWS4" + kSecret, Date)
    kRegion = HMAC(kDate, Region)
    kService = HMAC(kRegion, Service)
    kSigning = HMAC(kService, "aws4_request")
    </pre>
    */
    var get_signing_key = function (secret_key, d_str, service_info) {
        logger$n.debug(service_info);
        var k = 'AWS4' + secret_key, k_date = encrypt(k, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, 'aws4_request');
        return k_signing;
    };
    var get_signature = function (signing_key, str_to_sign) {
        return toHex(encrypt(signing_key, str_to_sign));
    };
    /**
     * @private
     * Create authorization header
     * Refer to
     * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}
     */
    var get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {
        return [
            algorithm + ' ' + 'Credential=' + access_key + '/' + scope,
            'SignedHeaders=' + signed_headers,
            'Signature=' + signature,
        ].join(', ');
    };
    var Signer = /** @class */ (function () {
        function Signer() {
        }
        /**
        * Sign a HTTP request, add 'Authorization' header to request param
        * @method sign
        * @memberof Signer
        * @static
        *
        * @param {object} request - HTTP request object
        <pre>
        request: {
            method: GET | POST | PUT ...
            url: ...,
            headers: {
                header1: ...
            },
            data: data
        }
        </pre>
        * @param {object} access_info - AWS access credential info
        <pre>
        access_info: {
            access_key: ...,
            secret_key: ...,
            session_token: ...
        }
        </pre>
        * @param {object} [service_info] - AWS service type and region, optional,
        *                                  if not provided then parse out from url
        <pre>
        service_info: {
            service: ...,
            region: ...
        }
        </pre>
        *
        * @returns {object} Signed HTTP request
        */
        Signer.sign = function (request, access_info, service_info) {
            if (service_info === void 0) { service_info = null; }
            request.headers = request.headers || {};
            // datetime string and date string
            var dt = DateUtils.getDateWithClockOffset(), dt_str = dt.toISOString().replace(/[:\-]|\.\d{3}/g, ''), d_str = dt_str.substr(0, 8);
            var url_info = url.parse(request.url);
            request.headers['host'] = url_info.host;
            request.headers['x-amz-date'] = dt_str;
            if (access_info.session_token) {
                request.headers['X-Amz-Security-Token'] = access_info.session_token;
            }
            // Task 1: Create a Canonical Request
            var request_str = canonical_request(request);
            logger$n.debug(request_str);
            // Task 2: Create a String to Sign
            var serviceInfo = service_info || parse_service_info(request), scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service), str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);
            // Task 3: Calculate the Signature
            var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo), signature = get_signature(signing_key, str_to_sign);
            // Task 4: Adding the Signing information to the Request
            var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);
            request.headers['Authorization'] = authorization_header;
            return request;
        };
        Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {
            var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;
            var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';
            var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;
            var now = DateUtils.getDateWithClockOffset()
                .toISOString()
                .replace(/[:\-]|\.\d{3}/g, '');
            var today = now.substr(0, 8);
            // Intentionally discarding search
            var _a = url.parse(urlToSign, true, true); _a.search; var parsedUrl = __rest$5(_a, ["search"]);
            var host = parsedUrl.host;
            var signedHeaders = { host: host };
            var _b = serviceInfo || parse_service_info({ url: url.format(parsedUrl) }), region = _b.region, service = _b.service;
            var credentialScope = credential_scope(today, region, service);
            // IoT service does not allow the session token in the canonical request
            // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html
            var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;
            var queryParams = __assign$h(__assign$h(__assign$h({ 'X-Amz-Algorithm': DEFAULT_ALGORITHM, 'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'), 'X-Amz-Date': now.substr(0, 16) }, (sessionTokenRequired
                ? { 'X-Amz-Security-Token': "" + accessInfo.session_token }
                : {})), (expiration ? { 'X-Amz-Expires': "" + expiration } : {})), { 'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',') });
            var canonicalRequest = canonical_request({
                method: method,
                url: url.format(__assign$h(__assign$h({}, parsedUrl), { query: __assign$h(__assign$h({}, parsedUrl.query), queryParams) })),
                headers: signedHeaders,
                data: body,
            });
            var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);
            var signing_key = get_signing_key(accessInfo.secret_key, today, {
                region: region,
                service: service,
            });
            var signature = get_signature(signing_key, stringToSign);
            var additionalQueryParams = __assign$h({ 'X-Amz-Signature': signature }, (accessInfo.session_token && {
                'X-Amz-Security-Token': accessInfo.session_token,
            }));
            var result = url.format({
                protocol: parsedUrl.protocol,
                slashes: true,
                hostname: parsedUrl.hostname,
                port: parsedUrl.port,
                pathname: parsedUrl.pathname,
                query: __assign$h(__assign$h(__assign$h({}, parsedUrl.query), queryParams), additionalQueryParams),
            });
            return result;
        };
        return Signer;
    }());

    var logger$m = new ConsoleLogger('Parser');
    var parseMobileHubConfig = function (config) {
        var amplifyConfig = {};
        // Analytics
        if (config['aws_mobile_analytics_app_id']) {
            var Analytics = {
                AWSPinpoint: {
                    appId: config['aws_mobile_analytics_app_id'],
                    region: config['aws_mobile_analytics_app_region'],
                },
            };
            amplifyConfig.Analytics = Analytics;
        }
        // Auth
        if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {
            amplifyConfig.Auth = {
                userPoolId: config['aws_user_pools_id'],
                userPoolWebClientId: config['aws_user_pools_web_client_id'],
                region: config['aws_cognito_region'],
                identityPoolId: config['aws_cognito_identity_pool_id'],
                identityPoolRegion: config['aws_cognito_region'],
                mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',
            };
        }
        // Storage
        var storageConfig;
        if (config['aws_user_files_s3_bucket']) {
            storageConfig = {
                AWSS3: {
                    bucket: config['aws_user_files_s3_bucket'],
                    region: config['aws_user_files_s3_bucket_region'],
                    dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'],
                },
            };
        }
        else {
            storageConfig = config ? config.Storage || config : {};
        }
        amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
        amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
        amplifyConfig.Storage = Object.assign({}, storageConfig);
        logger$m.debug('parse config', config, 'to amplifyconfig', amplifyConfig);
        return amplifyConfig;
    };
    /**
     * @deprecated use per-function export
     */
    var Parser$1 = /** @class */ (function () {
        function Parser() {
        }
        Parser.parseMobilehubConfig = parseMobileHubConfig;
        return Parser;
    }());

    var __awaiter$h = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$h = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var logger$l = new ConsoleLogger('CognitoCredentials');
    var waitForInit$1 = new Promise(function (res, rej) {
        if (!browserOrNode().isBrowser) {
            logger$l.debug('not in the browser, directly resolved');
            return res();
        }
        var ga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;
        if (ga) {
            logger$l.debug('google api already loaded');
            return res();
        }
        else {
            setTimeout(function () {
                return res();
            }, 2000);
        }
    });
    var GoogleOAuth$1 = /** @class */ (function () {
        function GoogleOAuth() {
            this.initialized = false;
            this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
            this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
        }
        GoogleOAuth.prototype.refreshGoogleToken = function () {
            return __awaiter$h(this, void 0, void 0, function () {
                return __generator$h(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.initialized) return [3 /*break*/, 2];
                            logger$l.debug('need to wait for the Google SDK loaded');
                            return [4 /*yield*/, waitForInit$1];
                        case 1:
                            _a.sent();
                            this.initialized = true;
                            logger$l.debug('finish waiting');
                            _a.label = 2;
                        case 2: return [2 /*return*/, this._refreshGoogleTokenImpl()];
                    }
                });
            });
        };
        GoogleOAuth.prototype._refreshGoogleTokenImpl = function () {
            var ga = null;
            if (browserOrNode().isBrowser)
                ga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;
            if (!ga) {
                logger$l.debug('no gapi auth2 available');
                return Promise.reject('no gapi auth2 available');
            }
            return new Promise(function (res, rej) {
                ga.getAuthInstance()
                    .then(function (googleAuth) {
                    if (!googleAuth) {
                        logger$l.debug('google Auth undefined');
                        rej(new NonRetryableError('google Auth undefined'));
                    }
                    var googleUser = googleAuth.currentUser.get();
                    // refresh the token
                    if (googleUser.isSignedIn()) {
                        logger$l.debug('refreshing the google access token');
                        googleUser
                            .reloadAuthResponse()
                            .then(function (authResponse) {
                            var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
                            res({ token: id_token, expires_at: expires_at });
                        })
                            .catch(function (err) {
                            if (err && err.error === 'network_error') {
                                // Not using NonRetryableError so handler will be retried
                                rej('Network error reloading google auth response');
                            }
                            else {
                                rej(new NonRetryableError('Failed to reload google auth response'));
                            }
                        });
                    }
                    else {
                        rej(new NonRetryableError('User is not signed in with Google'));
                    }
                })
                    .catch(function (err) {
                    logger$l.debug('Failed to refresh google token', err);
                    rej(new NonRetryableError('Failed to refresh google token'));
                });
            });
        };
        return GoogleOAuth;
    }());

    var __awaiter$g = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$g = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var logger$k = new ConsoleLogger('CognitoCredentials');
    var waitForInit = new Promise(function (res, rej) {
        if (!browserOrNode().isBrowser) {
            logger$k.debug('not in the browser, directly resolved');
            return res();
        }
        var fb = window['FB'];
        if (fb) {
            logger$k.debug('FB SDK already loaded');
            return res();
        }
        else {
            setTimeout(function () {
                return res();
            }, 2000);
        }
    });
    var FacebookOAuth$1 = /** @class */ (function () {
        function FacebookOAuth() {
            this.initialized = false;
            this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
            this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
        }
        FacebookOAuth.prototype.refreshFacebookToken = function () {
            return __awaiter$g(this, void 0, void 0, function () {
                return __generator$g(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.initialized) return [3 /*break*/, 2];
                            logger$k.debug('need to wait for the Facebook SDK loaded');
                            return [4 /*yield*/, waitForInit];
                        case 1:
                            _a.sent();
                            this.initialized = true;
                            logger$k.debug('finish waiting');
                            _a.label = 2;
                        case 2: return [2 /*return*/, this._refreshFacebookTokenImpl()];
                    }
                });
            });
        };
        FacebookOAuth.prototype._refreshFacebookTokenImpl = function () {
            var fb = null;
            if (browserOrNode().isBrowser)
                fb = window['FB'];
            if (!fb) {
                var errorMessage = 'no fb sdk available';
                logger$k.debug(errorMessage);
                return Promise.reject(new NonRetryableError(errorMessage));
            }
            return new Promise(function (res, rej) {
                fb.getLoginStatus(function (fbResponse) {
                    if (!fbResponse || !fbResponse.authResponse) {
                        var errorMessage = 'no response from facebook when refreshing the jwt token';
                        logger$k.debug(errorMessage);
                        // There is no definitive indication for a network error in
                        // fbResponse, so we are treating it as an invalid token.
                        rej(new NonRetryableError(errorMessage));
                    }
                    else {
                        var response = fbResponse.authResponse;
                        var accessToken = response.accessToken, expiresIn = response.expiresIn;
                        var date = new Date();
                        var expires_at = expiresIn * 1000 + date.getTime();
                        if (!accessToken) {
                            var errorMessage = 'the jwtToken is undefined';
                            logger$k.debug(errorMessage);
                            rej(new NonRetryableError(errorMessage));
                        }
                        res({
                            token: accessToken,
                            expires_at: expires_at,
                        });
                    }
                }, { scope: 'public_profile,email' });
            });
        };
        return FacebookOAuth;
    }());

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var GoogleOAuth = new GoogleOAuth$1();
    var FacebookOAuth = new FacebookOAuth$1();

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var dataMemory$1 = {};
    /** @class */
    var MemoryStorage$1 = /** @class */ (function () {
        function MemoryStorage() {
        }
        /**
         * This is used to set a specific item in storage
         * @param {string} key - the key for the item
         * @param {object} value - the value
         * @returns {string} value that was set
         */
        MemoryStorage.setItem = function (key, value) {
            dataMemory$1[key] = value;
            return dataMemory$1[key];
        };
        /**
         * This is used to get a specific key from storage
         * @param {string} key - the key for the item
         * This is used to clear the storage
         * @returns {string} the data item
         */
        MemoryStorage.getItem = function (key) {
            return Object.prototype.hasOwnProperty.call(dataMemory$1, key)
                ? dataMemory$1[key]
                : undefined;
        };
        /**
         * This is used to remove an item from storage
         * @param {string} key - the key being set
         * @returns {string} value - value that was deleted
         */
        MemoryStorage.removeItem = function (key) {
            return delete dataMemory$1[key];
        };
        /**
         * This is used to clear the storage
         * @returns {string} nothing
         */
        MemoryStorage.clear = function () {
            dataMemory$1 = {};
            return dataMemory$1;
        };
        return MemoryStorage;
    }());
    var StorageHelper$1 = /** @class */ (function () {
        /**
         * This is used to get a storage object
         * @returns {object} the storage
         */
        function StorageHelper() {
            try {
                this.storageWindow = window.localStorage;
                this.storageWindow.setItem('aws.amplify.test-ls', 1);
                this.storageWindow.removeItem('aws.amplify.test-ls');
            }
            catch (exception) {
                this.storageWindow = MemoryStorage$1;
            }
        }
        /**
         * This is used to return the storage
         * @returns {object} the storage
         */
        StorageHelper.prototype.getStorage = function () {
            return this.storageWindow;
        };
        return StorageHelper;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$6(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$g = function() {
        __assign$g = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$g.apply(this, arguments);
    };

    function __awaiter$f(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$f(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read$6(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    var name$1 = "@aws-sdk/client-cognito-identity";
    var description$1 = "AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native";
    var version$1 = "3.6.1";
    var scripts$1 = {
    	clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    	"build-documentation": "yarn remove-documentation && typedoc ./",
    	prepublishOnly: "yarn build",
    	pretest: "yarn build:cjs",
    	"remove-definitions": "rimraf ./types",
    	"remove-dist": "rimraf ./dist",
    	"remove-documentation": "rimraf ./docs",
    	"test:unit": "mocha **/cjs/**/*.spec.js",
    	"test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
    	test: "yarn test:unit",
    	"build:cjs": "tsc -p tsconfig.json",
    	"build:es": "tsc -p tsconfig.es.json",
    	build: "yarn build:cjs && yarn build:es",
    	postbuild: "downlevel-dts types types/ts3.4"
    };
    var main$1 = "./dist/cjs/index.js";
    var types$1 = "./types/index.d.ts";
    var module$1 = "./dist/es/index.js";
    var browser$1 = {
    	"./runtimeConfig": "./runtimeConfig.browser"
    };
    var sideEffects$1 = false;
    var dependencies$1 = {
    	"@aws-crypto/sha256-browser": "^1.0.0",
    	"@aws-crypto/sha256-js": "^1.0.0",
    	"@aws-sdk/config-resolver": "3.6.1",
    	"@aws-sdk/credential-provider-node": "3.6.1",
    	"@aws-sdk/fetch-http-handler": "3.6.1",
    	"@aws-sdk/hash-node": "3.6.1",
    	"@aws-sdk/invalid-dependency": "3.6.1",
    	"@aws-sdk/middleware-content-length": "3.6.1",
    	"@aws-sdk/middleware-host-header": "3.6.1",
    	"@aws-sdk/middleware-logger": "3.6.1",
    	"@aws-sdk/middleware-retry": "3.6.1",
    	"@aws-sdk/middleware-serde": "3.6.1",
    	"@aws-sdk/middleware-signing": "3.6.1",
    	"@aws-sdk/middleware-stack": "3.6.1",
    	"@aws-sdk/middleware-user-agent": "3.6.1",
    	"@aws-sdk/node-config-provider": "3.6.1",
    	"@aws-sdk/node-http-handler": "3.6.1",
    	"@aws-sdk/protocol-http": "3.6.1",
    	"@aws-sdk/smithy-client": "3.6.1",
    	"@aws-sdk/types": "3.6.1",
    	"@aws-sdk/url-parser": "3.6.1",
    	"@aws-sdk/url-parser-native": "3.6.1",
    	"@aws-sdk/util-base64-browser": "3.6.1",
    	"@aws-sdk/util-base64-node": "3.6.1",
    	"@aws-sdk/util-body-length-browser": "3.6.1",
    	"@aws-sdk/util-body-length-node": "3.6.1",
    	"@aws-sdk/util-user-agent-browser": "3.6.1",
    	"@aws-sdk/util-user-agent-node": "3.6.1",
    	"@aws-sdk/util-utf8-browser": "3.6.1",
    	"@aws-sdk/util-utf8-node": "3.6.1",
    	tslib: "^2.0.0"
    };
    var devDependencies$1 = {
    	"@aws-sdk/client-documentation-generator": "3.6.1",
    	"@aws-sdk/client-iam": "3.6.1",
    	"@types/chai": "^4.2.11",
    	"@types/mocha": "^8.0.4",
    	"@types/node": "^12.7.5",
    	"downlevel-dts": "0.7.0",
    	jest: "^26.1.0",
    	rimraf: "^3.0.0",
    	typedoc: "^0.19.2",
    	typescript: "~4.1.2"
    };
    var engines$1 = {
    	node: ">=10.0.0"
    };
    var typesVersions$1 = {
    	"<4.0": {
    		"types/*": [
    			"types/ts3.4/*"
    		]
    	}
    };
    var author$1 = {
    	name: "AWS SDK for JavaScript Team",
    	url: "https://aws.amazon.com/javascript/"
    };
    var license$1 = "Apache-2.0";
    var homepage$1 = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity";
    var repository$1 = {
    	type: "git",
    	url: "https://github.com/aws/aws-sdk-js-v3.git",
    	directory: "clients/client-cognito-identity"
    };
    var packageInfo$1 = {
    	name: name$1,
    	description: description$1,
    	version: version$1,
    	scripts: scripts$1,
    	main: main$1,
    	types: types$1,
    	module: module$1,
    	browser: browser$1,
    	"react-native": {
    	"./runtimeConfig": "./runtimeConfig.native"
    },
    	sideEffects: sideEffects$1,
    	dependencies: dependencies$1,
    	devDependencies: devDependencies$1,
    	engines: engines$1,
    	typesVersions: typesVersions$1,
    	author: author$1,
    	license: license$1,
    	homepage: homepage$1,
    	repository: repository$1
    };

    var isEmptyData_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
        if (typeof data === "string") {
            return data.length === 0;
        }
        return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
    //# sourceMappingURL=isEmptyData.js.map
    });

    var constants$1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
        name: "HMAC",
        hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
        227,
        176,
        196,
        66,
        152,
        252,
        28,
        20,
        154,
        251,
        244,
        200,
        153,
        111,
        185,
        36,
        39,
        174,
        65,
        228,
        100,
        155,
        147,
        76,
        164,
        149,
        153,
        27,
        120,
        82,
        184,
        85
    ]);
    //# sourceMappingURL=constants.js.map
    });

    /**
     * Converts a JS string from its native UCS-2/UTF-16 representation into a
     * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.
     *
     * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google
     * Closure library, though updated to use typed arrays.
     */
    var fromUtf8$2 = function (input) {
        var bytes = [];
        for (var i = 0, len = input.length; i < len; i++) {
            var value = input.charCodeAt(i);
            if (value < 0x80) {
                bytes.push(value);
            }
            else if (value < 0x800) {
                bytes.push((value >> 6) | 192, (value & 63) | 128);
            }
            else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
                bytes.push((surrogatePair >> 18) | 240, ((surrogatePair >> 12) & 63) | 128, ((surrogatePair >> 6) & 63) | 128, (surrogatePair & 63) | 128);
            }
            else {
                bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);
            }
        }
        return Uint8Array.from(bytes);
    };
    /**
     * Converts a typed array of bytes containing UTF-8 data into a native JS
     * string.
     *
     * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the
     * Google Closure library, though updated to use typed arrays and to better
     * handle astral plane code points.
     */
    var toUtf8$2 = function (input) {
        var decoded = "";
        for (var i = 0, len = input.length; i < len; i++) {
            var byte = input[i];
            if (byte < 0x80) {
                decoded += String.fromCharCode(byte);
            }
            else if (192 <= byte && byte < 224) {
                var nextByte = input[++i];
                decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));
            }
            else if (240 <= byte && byte < 365) {
                var surrogatePair = [byte, input[++i], input[++i], input[++i]];
                var encoded = "%" + surrogatePair.map(function (byteValue) { return byteValue.toString(16); }).join("%");
                decoded += decodeURIComponent(encoded);
            }
            else {
                decoded += String.fromCharCode(((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63));
            }
        }
        return decoded;
    };

    function fromUtf8$1(input) {
        return new TextEncoder().encode(input);
    }
    function toUtf8$1(input) {
        return new TextDecoder("utf-8").decode(input);
    }

    var fromUtf8 = function (input) {
        return typeof TextEncoder === "function" ? fromUtf8$1(input) : fromUtf8$2(input);
    };
    var toUtf8 = function (input) {
        return typeof TextDecoder === "function" ? toUtf8$1(input) : toUtf8$2(input);
    };

    var es$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fromUtf8: fromUtf8,
        toUtf8: toUtf8
    });

    var fallbackWindow = {};
    /**
     * Locates the global scope for a browser or browser-like environment. If
     * neither `window` nor `self` is defined by the environment, the same object
     * will be returned on each invocation.
     */
    function locateWindow() {
        if (typeof window !== "undefined") {
            return window;
        }
        else if (typeof self !== "undefined") {
            return self;
        }
        return fallbackWindow;
    }

    var es = /*#__PURE__*/Object.freeze({
        __proto__: null,
        locateWindow: locateWindow
    });

    var util_utf8_browser_1 = /*@__PURE__*/getAugmentedNamespace(es$1);

    var util_locate_window_1 = /*@__PURE__*/getAugmentedNamespace(es);

    var ie11Sha256 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;




    var Sha256 = /** @class */ (function () {
        function Sha256(secret) {
            if (secret) {
                this.operation = getKeyPromise(secret).then(function (keyData) {
                    return util_locate_window_1.locateWindow().msCrypto.subtle.sign(constants$1.SHA_256_HMAC_ALGO, keyData);
                });
                this.operation.catch(function () { });
            }
            else {
                this.operation = Promise.resolve(util_locate_window_1.locateWindow().msCrypto.subtle.digest("SHA-256"));
            }
        }
        Sha256.prototype.update = function (toHash) {
            var _this = this;
            if (isEmptyData_1.isEmptyData(toHash)) {
                return;
            }
            this.operation = this.operation.then(function (operation) {
                operation.onerror = function () {
                    _this.operation = Promise.reject(new Error("Error encountered updating hash"));
                };
                operation.process(toArrayBufferView(toHash));
                return operation;
            });
            this.operation.catch(function () { });
        };
        Sha256.prototype.digest = function () {
            return this.operation.then(function (operation) {
                return new Promise(function (resolve, reject) {
                    operation.onerror = function () {
                        reject("Error encountered finalizing hash");
                    };
                    operation.oncomplete = function () {
                        if (operation.result) {
                            resolve(new Uint8Array(operation.result));
                        }
                        reject("Error encountered finalizing hash");
                    };
                    operation.finish();
                });
            });
        };
        return Sha256;
    }());
    exports.Sha256 = Sha256;
    function getKeyPromise(secret) {
        return new Promise(function (resolve, reject) {
            var keyOperation = util_locate_window_1.locateWindow().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants$1.SHA_256_HMAC_ALGO, false, ["sign"]);
            keyOperation.oncomplete = function () {
                if (keyOperation.result) {
                    resolve(keyOperation.result);
                }
                reject("ImportKey completed without importing key.");
            };
            keyOperation.onerror = function () {
                reject("ImportKey failed to import key.");
            };
        });
    }
    function toArrayBufferView(data) {
        if (typeof data === "string") {
            return util_utf8_browser_1.fromUtf8(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
        }
        return new Uint8Array(data);
    }
    //# sourceMappingURL=ie11Sha256.js.map
    });

    var webCryptoSha256 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;




    var Sha256 = /** @class */ (function () {
        function Sha256(secret) {
            this.toHash = new Uint8Array(0);
            if (secret !== void 0) {
                this.key = new Promise(function (resolve, reject) {
                    util_locate_window_1.locateWindow()
                        .crypto.subtle.importKey("raw", convertToBuffer(secret), constants$1.SHA_256_HMAC_ALGO, false, ["sign"])
                        .then(resolve, reject);
                });
                this.key.catch(function () { });
            }
        }
        Sha256.prototype.update = function (data) {
            if (isEmptyData_1.isEmptyData(data)) {
                return;
            }
            var update = convertToBuffer(data);
            var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
            typedArray.set(this.toHash, 0);
            typedArray.set(update, this.toHash.byteLength);
            this.toHash = typedArray;
        };
        Sha256.prototype.digest = function () {
            var _this = this;
            if (this.key) {
                return this.key.then(function (key) {
                    return util_locate_window_1.locateWindow()
                        .crypto.subtle.sign(constants$1.SHA_256_HMAC_ALGO, key, _this.toHash)
                        .then(function (data) { return new Uint8Array(data); });
                });
            }
            if (isEmptyData_1.isEmptyData(this.toHash)) {
                return Promise.resolve(constants$1.EMPTY_DATA_SHA_256);
            }
            return Promise.resolve()
                .then(function () {
                return util_locate_window_1.locateWindow().crypto.subtle.digest(constants$1.SHA_256_HASH, _this.toHash);
            })
                .then(function (data) { return Promise.resolve(new Uint8Array(data)); });
        };
        return Sha256;
    }());
    exports.Sha256 = Sha256;
    function convertToBuffer(data) {
        if (typeof data === "string") {
            return util_utf8_browser_1.fromUtf8(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
        }
        return new Uint8Array(data);
    }
    //# sourceMappingURL=webCryptoSha256.js.map
    });

    var constants = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    /**
     * @internal
     */
    exports.BLOCK_SIZE = 64;
    /**
     * @internal
     */
    exports.DIGEST_LENGTH = 32;
    /**
     * @internal
     */
    exports.KEY = new Uint32Array([
        0x428a2f98,
        0x71374491,
        0xb5c0fbcf,
        0xe9b5dba5,
        0x3956c25b,
        0x59f111f1,
        0x923f82a4,
        0xab1c5ed5,
        0xd807aa98,
        0x12835b01,
        0x243185be,
        0x550c7dc3,
        0x72be5d74,
        0x80deb1fe,
        0x9bdc06a7,
        0xc19bf174,
        0xe49b69c1,
        0xefbe4786,
        0x0fc19dc6,
        0x240ca1cc,
        0x2de92c6f,
        0x4a7484aa,
        0x5cb0a9dc,
        0x76f988da,
        0x983e5152,
        0xa831c66d,
        0xb00327c8,
        0xbf597fc7,
        0xc6e00bf3,
        0xd5a79147,
        0x06ca6351,
        0x14292967,
        0x27b70a85,
        0x2e1b2138,
        0x4d2c6dfc,
        0x53380d13,
        0x650a7354,
        0x766a0abb,
        0x81c2c92e,
        0x92722c85,
        0xa2bfe8a1,
        0xa81a664b,
        0xc24b8b70,
        0xc76c51a3,
        0xd192e819,
        0xd6990624,
        0xf40e3585,
        0x106aa070,
        0x19a4c116,
        0x1e376c08,
        0x2748774c,
        0x34b0bcb5,
        0x391c0cb3,
        0x4ed8aa4a,
        0x5b9cca4f,
        0x682e6ff3,
        0x748f82ee,
        0x78a5636f,
        0x84c87814,
        0x8cc70208,
        0x90befffa,
        0xa4506ceb,
        0xbef9a3f7,
        0xc67178f2
    ]);
    /**
     * @internal
     */
    exports.INIT = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    /**
     * @internal
     */
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
    //# sourceMappingURL=constants.js.map
    });

    var RawSha256_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;

    /**
     * @internal
     */
    var RawSha256 = /** @class */ (function () {
        function RawSha256() {
            this.state = Int32Array.from(constants.INIT);
            this.temp = new Int32Array(64);
            this.buffer = new Uint8Array(64);
            this.bufferLength = 0;
            this.bytesHashed = 0;
            /**
             * @internal
             */
            this.finished = false;
        }
        RawSha256.prototype.update = function (data) {
            if (this.finished) {
                throw new Error("Attempted to update an already finished hash.");
            }
            var position = 0;
            var byteLength = data.byteLength;
            this.bytesHashed += byteLength;
            if (this.bytesHashed * 8 > constants.MAX_HASHABLE_LENGTH) {
                throw new Error("Cannot hash more than 2^53 - 1 bits");
            }
            while (byteLength > 0) {
                this.buffer[this.bufferLength++] = data[position++];
                byteLength--;
                if (this.bufferLength === constants.BLOCK_SIZE) {
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
            }
        };
        RawSha256.prototype.digest = function () {
            if (!this.finished) {
                var bitsHashed = this.bytesHashed * 8;
                var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
                var undecoratedLength = this.bufferLength;
                bufferView.setUint8(this.bufferLength++, 0x80);
                // Ensure the final block has enough room for the hashed length
                if (undecoratedLength % constants.BLOCK_SIZE >= constants.BLOCK_SIZE - 8) {
                    for (var i = this.bufferLength; i < constants.BLOCK_SIZE; i++) {
                        bufferView.setUint8(i, 0);
                    }
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
                for (var i = this.bufferLength; i < constants.BLOCK_SIZE - 8; i++) {
                    bufferView.setUint8(i, 0);
                }
                bufferView.setUint32(constants.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
                bufferView.setUint32(constants.BLOCK_SIZE - 4, bitsHashed);
                this.hashBuffer();
                this.finished = true;
            }
            // The value in state is little-endian rather than big-endian, so flip
            // each word into a new Uint8Array
            var out = new Uint8Array(constants.DIGEST_LENGTH);
            for (var i = 0; i < 8; i++) {
                out[i * 4] = (this.state[i] >>> 24) & 0xff;
                out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
                out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
                out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
            }
            return out;
        };
        RawSha256.prototype.hashBuffer = function () {
            var _a = this, buffer = _a.buffer, state = _a.state;
            var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
            for (var i = 0; i < constants.BLOCK_SIZE; i++) {
                if (i < 16) {
                    this.temp[i] =
                        ((buffer[i * 4] & 0xff) << 24) |
                            ((buffer[i * 4 + 1] & 0xff) << 16) |
                            ((buffer[i * 4 + 2] & 0xff) << 8) |
                            (buffer[i * 4 + 3] & 0xff);
                }
                else {
                    var u = this.temp[i - 2];
                    var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);
                    u = this.temp[i - 15];
                    var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);
                    this.temp[i] =
                        ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);
                }
                var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^
                    ((state4 >>> 11) | (state4 << 21)) ^
                    ((state4 >>> 25) | (state4 << 7))) +
                    ((state4 & state5) ^ (~state4 & state6))) |
                    0) +
                    ((state7 + ((constants.KEY[i] + this.temp[i]) | 0)) | 0)) |
                    0;
                var t2 = ((((state0 >>> 2) | (state0 << 30)) ^
                    ((state0 >>> 13) | (state0 << 19)) ^
                    ((state0 >>> 22) | (state0 << 10))) +
                    ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |
                    0;
                state7 = state6;
                state6 = state5;
                state5 = state4;
                state4 = (state3 + t1) | 0;
                state3 = state2;
                state2 = state1;
                state1 = state0;
                state0 = (t1 + t2) | 0;
            }
            state[0] += state0;
            state[1] += state1;
            state[2] += state2;
            state[3] += state3;
            state[4] += state4;
            state[5] += state5;
            state[6] += state6;
            state[7] += state7;
        };
        return RawSha256;
    }());
    exports.RawSha256 = RawSha256;
    //# sourceMappingURL=RawSha256.js.map
    });

    var jsSha256 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;




    var Sha256 = /** @class */ (function () {
        function Sha256(secret) {
            this.hash = new RawSha256_1.RawSha256();
            if (secret) {
                this.outer = new RawSha256_1.RawSha256();
                var inner = bufferFromSecret(secret);
                var outer = new Uint8Array(constants.BLOCK_SIZE);
                outer.set(inner);
                for (var i = 0; i < constants.BLOCK_SIZE; i++) {
                    inner[i] ^= 0x36;
                    outer[i] ^= 0x5c;
                }
                this.hash.update(inner);
                this.outer.update(outer);
                // overwrite the copied key in memory
                for (var i = 0; i < inner.byteLength; i++) {
                    inner[i] = 0;
                }
            }
        }
        Sha256.prototype.update = function (toHash) {
            if (isEmptyData(toHash) || this.error) {
                return;
            }
            try {
                this.hash.update(convertToBuffer(toHash));
            }
            catch (e) {
                this.error = e;
            }
        };
        /* This synchronous method keeps compatibility
         * with the v2 aws-sdk.
         */
        Sha256.prototype.digestSync = function () {
            if (this.error) {
                throw this.error;
            }
            if (this.outer) {
                if (!this.outer.finished) {
                    this.outer.update(this.hash.digest());
                }
                return this.outer.digest();
            }
            return this.hash.digest();
        };
        /* The underlying digest method here is synchronous.
         * To keep the same interface with the other hash functions
         * the default is to expose this as an async method.
         * However, it can sometimes be useful to have a sync method.
         */
        Sha256.prototype.digest = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    return [2 /*return*/, this.digestSync()];
                });
            });
        };
        return Sha256;
    }());
    exports.Sha256 = Sha256;
    function bufferFromSecret(secret) {
        var input = convertToBuffer(secret);
        if (input.byteLength > constants.BLOCK_SIZE) {
            var bufferHash = new RawSha256_1.RawSha256();
            bufferHash.update(input);
            input = bufferHash.digest();
        }
        var buffer = new Uint8Array(constants.BLOCK_SIZE);
        buffer.set(input);
        return buffer;
    }
    function isEmptyData(data) {
        if (typeof data === "string") {
            return data.length === 0;
        }
        return data.byteLength === 0;
    }
    function convertToBuffer(data) {
        if (typeof data === "string") {
            return util_utf8_browser_1.fromUtf8(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
        }
        return new Uint8Array(data);
    }
    //# sourceMappingURL=jsSha256.js.map
    });

    var build$4 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1.__exportStar(jsSha256, exports);
    //# sourceMappingURL=index.js.map
    });

    var supportsWebCrypto_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;

    var subtleCryptoMethods = [
        "decrypt",
        "digest",
        "encrypt",
        "exportKey",
        "generateKey",
        "importKey",
        "sign",
        "verify"
    ];
    function supportsWebCrypto(window) {
        if (supportsSecureRandom(window) &&
            typeof window.crypto.subtle === "object") {
            var subtle = window.crypto.subtle;
            return supportsSubtleCrypto(subtle);
        }
        return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window) {
        if (typeof window === "object" && typeof window.crypto === "object") {
            var getRandomValues = window.crypto.getRandomValues;
            return typeof getRandomValues === "function";
        }
        return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
        return (subtle &&
            subtleCryptoMethods.every(function (methodName) { return typeof subtle[methodName] === "function"; }));
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var key, zeroByteAuthTag;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!supportsSubtleCrypto(subtle))
                            return [2 /*return*/, false];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
                    case 2:
                        key = _b.sent();
                        return [4 /*yield*/, subtle.encrypt({
                                name: "AES-GCM",
                                iv: new Uint8Array(Array(12)),
                                additionalData: new Uint8Array(Array(16)),
                                tagLength: 128
                            }, key, new Uint8Array(0))];
                    case 3:
                        zeroByteAuthTag = _b.sent();
                        return [2 /*return*/, zeroByteAuthTag.byteLength === 16];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, false];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydHNXZWJDcnlwdG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3VwcG9ydHNXZWJDcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQVVBLElBQU0sbUJBQW1CLEdBQThCO0lBQ3JELFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxhQUFhO0lBQ2IsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0NBQ1QsQ0FBQztBQUVGLFNBQWdCLGlCQUFpQixDQUFDLE1BQWM7SUFDOUMsSUFDRSxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7UUFDNUIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQ3hDO1FBQ1EsSUFBQSxNQUFNLEdBQUssTUFBTSxDQUFDLE1BQU0sT0FBbEIsQ0FBbUI7UUFFakMsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVhELDhDQVdDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBYztJQUNqRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzNELElBQUEsZUFBZSxHQUFLLE1BQU0sQ0FBQyxNQUFNLGdCQUFsQixDQUFtQjtRQUUxQyxPQUFPLE9BQU8sZUFBZSxLQUFLLFVBQVUsQ0FBQztLQUM5QztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVJELG9EQVFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBb0I7SUFDdkQsT0FBTyxDQUNMLE1BQU07UUFDTixtQkFBbUIsQ0FBQyxLQUFLLENBQ3ZCLFVBQUEsVUFBVSxJQUFJLE9BQUEsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssVUFBVSxFQUF4QyxDQUF3QyxDQUN2RCxDQUNGLENBQUM7QUFDSixDQUFDO0FBUEQsb0RBT0M7QUFFRCxTQUFzQixtQkFBbUIsQ0FBQyxNQUFvQjs7Ozs7O29CQUM1RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO3dCQUFFLHNCQUFPLEtBQUssRUFBQzs7OztvQkFFbEMscUJBQU0sTUFBTSxDQUFDLFdBQVcsQ0FDbEMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFDaEMsS0FBSyxFQUNMLENBQUMsU0FBUyxDQUFDLENBQ1osRUFBQTs7b0JBSkssR0FBRyxHQUFHLFNBSVg7b0JBQ3VCLHFCQUFNLE1BQU0sQ0FBQyxPQUFPLENBQzFDOzRCQUNFLElBQUksRUFBRSxTQUFTOzRCQUNmLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzdCLGNBQWMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3pDLFNBQVMsRUFBRSxHQUFHO3lCQUNmLEVBQ0QsR0FBRyxFQUNILElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUNsQixFQUFBOztvQkFUSyxlQUFlLEdBQUcsU0FTdkI7b0JBQ0Qsc0JBQU8sZUFBZSxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUM7OztvQkFFekMsc0JBQU8sS0FBSyxFQUFDOzs7OztDQUVoQjtBQXRCRCxrREFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFN1YnRsZUNyeXB0b01ldGhvZCA9XG4gIHwgXCJkZWNyeXB0XCJcbiAgfCBcImRpZ2VzdFwiXG4gIHwgXCJlbmNyeXB0XCJcbiAgfCBcImV4cG9ydEtleVwiXG4gIHwgXCJnZW5lcmF0ZUtleVwiXG4gIHwgXCJpbXBvcnRLZXlcIlxuICB8IFwic2lnblwiXG4gIHwgXCJ2ZXJpZnlcIjtcblxuY29uc3Qgc3VidGxlQ3J5cHRvTWV0aG9kczogQXJyYXk8U3VidGxlQ3J5cHRvTWV0aG9kPiA9IFtcbiAgXCJkZWNyeXB0XCIsXG4gIFwiZGlnZXN0XCIsXG4gIFwiZW5jcnlwdFwiLFxuICBcImV4cG9ydEtleVwiLFxuICBcImdlbmVyYXRlS2V5XCIsXG4gIFwiaW1wb3J0S2V5XCIsXG4gIFwic2lnblwiLFxuICBcInZlcmlmeVwiXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNXZWJDcnlwdG8od2luZG93OiBXaW5kb3cpOiBib29sZWFuIHtcbiAgaWYgKFxuICAgIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdykgJiZcbiAgICB0eXBlb2Ygd2luZG93LmNyeXB0by5zdWJ0bGUgPT09IFwib2JqZWN0XCJcbiAgKSB7XG4gICAgY29uc3QgeyBzdWJ0bGUgfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdzogV2luZG93KTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB3aW5kb3cuY3J5cHRvID09PSBcIm9iamVjdFwiKSB7XG4gICAgY29uc3QgeyBnZXRSYW5kb21WYWx1ZXMgfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gdHlwZW9mIGdldFJhbmRvbVZhbHVlcyA9PT0gXCJmdW5jdGlvblwiO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlOiBTdWJ0bGVDcnlwdG8pIHtcbiAgcmV0dXJuIChcbiAgICBzdWJ0bGUgJiZcbiAgICBzdWJ0bGVDcnlwdG9NZXRob2RzLmV2ZXJ5KFxuICAgICAgbWV0aG9kTmFtZSA9PiB0eXBlb2Ygc3VidGxlW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCJcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdXBwb3J0c1plcm9CeXRlR0NNKHN1YnRsZTogU3VidGxlQ3J5cHRvKSB7XG4gIGlmICghc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlKSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IHN1YnRsZS5nZW5lcmF0ZUtleShcbiAgICAgIHsgbmFtZTogXCJBRVMtR0NNXCIsIGxlbmd0aDogMTI4IH0sXG4gICAgICBmYWxzZSxcbiAgICAgIFtcImVuY3J5cHRcIl1cbiAgICApO1xuICAgIGNvbnN0IHplcm9CeXRlQXV0aFRhZyA9IGF3YWl0IHN1YnRsZS5lbmNyeXB0KFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkFFUy1HQ01cIixcbiAgICAgICAgaXY6IG5ldyBVaW50OEFycmF5KEFycmF5KDEyKSksXG4gICAgICAgIGFkZGl0aW9uYWxEYXRhOiBuZXcgVWludDhBcnJheShBcnJheSgxNikpLFxuICAgICAgICB0YWdMZW5ndGg6IDEyOFxuICAgICAgfSxcbiAgICAgIGtleSxcbiAgICAgIG5ldyBVaW50OEFycmF5KDApXG4gICAgKTtcbiAgICByZXR1cm4gemVyb0J5dGVBdXRoVGFnLmJ5dGVMZW5ndGggPT09IDE2O1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==
    });

    var build$3 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1.__exportStar(supportsWebCrypto_1, exports);
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3VwcG9ydHNXZWJDcnlwdG9cIjtcbiJdfQ==
    });

    Object.defineProperty(exports, "__esModule", { value: true });

    var CryptoOperation = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    Object.defineProperty(exports, "__esModule", { value: true });

    var Key = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    Object.defineProperty(exports, "__esModule", { value: true });

    var KeyOperation = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    Object.defineProperty(exports, "__esModule", { value: true });

    var MsSubtleCrypto = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    var MsWindow = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
        "decrypt",
        "digest",
        "encrypt",
        "exportKey",
        "generateKey",
        "importKey",
        "sign",
        "verify"
    ];
    function quacksLikeAnMsWindow(window) {
        return "MSInputMethodContext" in window && "msCrypto" in window;
    }
    /**
     * Determines if the provided window is (or is like) the window object one would
     * expect to encounter in Internet Explorer 11.
     */
    function isMsWindow(window) {
        if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
            var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
            return msSubtleCryptoMethods
                .map(function (methodName) { return subtle_1[methodName]; })
                .concat(getRandomValues)
                .every(function (method) { return typeof method === "function"; });
        }
        return false;
    }
    exports.isMsWindow = isMsWindow;
    //# sourceMappingURL=MsWindow.js.map
    });

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(CryptoOperation);

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(Key);

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(KeyOperation);

    var require$$3 = /*@__PURE__*/getAugmentedNamespace(MsSubtleCrypto);

    var build$2 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1.__exportStar(require$$0$1, exports);
    tslib_1.__exportStar(require$$1, exports);
    tslib_1.__exportStar(require$$2, exports);
    tslib_1.__exportStar(require$$3, exports);
    tslib_1.__exportStar(MsWindow, exports);
    //# sourceMappingURL=index.js.map
    });

    var crossPlatformSha256 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;






    var Sha256 = /** @class */ (function () {
        function Sha256(secret) {
            if (build$3.supportsWebCrypto(util_locate_window_1.locateWindow())) {
                this.hash = new webCryptoSha256.Sha256(secret);
            }
            else if (build$2.isMsWindow(util_locate_window_1.locateWindow())) {
                this.hash = new ie11Sha256.Sha256(secret);
            }
            else {
                this.hash = new build$4.Sha256(secret);
            }
        }
        Sha256.prototype.update = function (data, encoding) {
            this.hash.update(data, encoding);
        };
        Sha256.prototype.digest = function () {
            return this.hash.digest();
        };
        return Sha256;
    }());
    exports.Sha256 = Sha256;
    //# sourceMappingURL=crossPlatformSha256.js.map
    });

    var build$1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;

    tslib_1.__exportStar(crossPlatformSha256, exports);

    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function () { return ie11Sha256.Sha256; } });

    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function () { return webCryptoSha256.Sha256; } });
    //# sourceMappingURL=index.js.map
    });

    var HttpResponse = /** @class */ (function () {
        function HttpResponse(options) {
            this.statusCode = options.statusCode;
            this.headers = options.headers || {};
            this.body = options.body;
        }
        HttpResponse.isInstance = function (response) {
            //determine if response is a valid HttpResponse
            if (!response)
                return false;
            var resp = response;
            return typeof resp.statusCode === "number" && typeof resp.headers === "object";
        };
        return HttpResponse;
    }());

    var HttpRequest = /** @class */ (function () {
        function HttpRequest(options) {
            this.method = options.method || "GET";
            this.hostname = options.hostname || "localhost";
            this.port = options.port;
            this.query = options.query || {};
            this.headers = options.headers || {};
            this.body = options.body;
            this.protocol = options.protocol
                ? options.protocol.substr(-1) !== ":"
                    ? options.protocol + ":"
                    : options.protocol
                : "https:";
            this.path = options.path ? (options.path.charAt(0) !== "/" ? "/" + options.path : options.path) : "/";
        }
        HttpRequest.isInstance = function (request) {
            //determine if request is a valid httpRequest
            if (!request)
                return false;
            var req = request;
            return ("method" in req &&
                "protocol" in req &&
                "hostname" in req &&
                "path" in req &&
                typeof req["query"] === "object" &&
                typeof req["headers"] === "object");
        };
        HttpRequest.prototype.clone = function () {
            var cloned = new HttpRequest(__assign$i(__assign$i({}, this), { headers: __assign$i({}, this.headers) }));
            if (cloned.query)
                cloned.query = cloneQuery$1(cloned.query);
            return cloned;
        };
        return HttpRequest;
    }());
    function cloneQuery$1(query) {
        return Object.keys(query).reduce(function (carry, paramName) {
            var _a;
            var param = query[paramName];
            return __assign$i(__assign$i({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread$2(param) : param, _a));
        }, {});
    }

    var escapeUri = function (uri) {
        // AWS percent-encodes some extra non-standard characters in a URI
        return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    };
    var hexEncode = function (c) { return "%" + c.charCodeAt(0).toString(16).toUpperCase(); };

    function buildQueryString(query) {
        var e_1, _a;
        var parts = [];
        try {
            for (var _b = __values$1(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                var value = query[key];
                key = escapeUri(key);
                if (Array.isArray(value)) {
                    for (var i = 0, iLen = value.length; i < iLen; i++) {
                        parts.push(key + "=" + escapeUri(value[i]));
                    }
                }
                else {
                    var qsEntry = key;
                    if (value || typeof value === "string") {
                        qsEntry += "=" + escapeUri(value);
                    }
                    parts.push(qsEntry);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return parts.join("&");
    }

    function requestTimeout$1(timeoutInMs) {
        if (timeoutInMs === void 0) { timeoutInMs = 0; }
        return new Promise(function (resolve, reject) {
            if (timeoutInMs) {
                setTimeout(function () {
                    var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
                    timeoutError.name = "TimeoutError";
                    reject(timeoutError);
                }, timeoutInMs);
            }
        });
    }

    var FetchHttpHandler = /** @class */ (function () {
        function FetchHttpHandler(_a) {
            var _b = _a === void 0 ? {} : _a, requestTimeout = _b.requestTimeout;
            this.requestTimeout = requestTimeout;
        }
        FetchHttpHandler.prototype.destroy = function () {
            // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.
        };
        FetchHttpHandler.prototype.handle = function (request, _a) {
            var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
            var requestTimeoutInMs = this.requestTimeout;
            // if the request was already aborted, prevent doing extra work
            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
                var abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                return Promise.reject(abortError);
            }
            var path = request.path;
            if (request.query) {
                var queryString = buildQueryString(request.query);
                if (queryString) {
                    path += "?" + queryString;
                }
            }
            var port = request.port, method = request.method;
            var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
            // Request constructor doesn't allow GET/HEAD request with body
            // ref: https://github.com/whatwg/fetch/issues/551
            var body = method === "GET" || method === "HEAD" ? undefined : request.body;
            var requestOptions = {
                body: body,
                headers: new Headers(request.headers),
                method: method,
            };
            // some browsers support abort signal
            if (typeof AbortController !== "undefined") {
                requestOptions["signal"] = abortSignal;
            }
            var fetchRequest = new Request(url, requestOptions);
            var raceOfPromises = [
                fetch(fetchRequest).then(function (response) {
                    var e_1, _a;
                    var fetchHeaders = response.headers;
                    var transformedHeaders = {};
                    try {
                        for (var _b = __values$1(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var pair = _c.value;
                            transformedHeaders[pair[0]] = pair[1];
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    var hasReadableStream = response.body !== undefined;
                    // Return the response with buffered body
                    if (!hasReadableStream) {
                        return response.blob().then(function (body) { return ({
                            response: new HttpResponse({
                                headers: transformedHeaders,
                                statusCode: response.status,
                                body: body,
                            }),
                        }); });
                    }
                    // Return the response with streaming body
                    return {
                        response: new HttpResponse({
                            headers: transformedHeaders,
                            statusCode: response.status,
                            body: response.body,
                        }),
                    };
                }),
                requestTimeout$1(requestTimeoutInMs),
            ];
            if (abortSignal) {
                raceOfPromises.push(new Promise(function (resolve, reject) {
                    abortSignal.onabort = function () {
                        var abortError = new Error("Request aborted");
                        abortError.name = "AbortError";
                        reject(abortError);
                    };
                }));
            }
            return Promise.race(raceOfPromises);
        };
        return FetchHttpHandler;
    }());

    var alphabetByEncoding = {};
    var alphabetByValue = new Array(64);
    for (var i$2 = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i$2 + start <= limit; i$2++) {
        var char$1 = String.fromCharCode(i$2 + start);
        alphabetByEncoding[char$1] = i$2;
        alphabetByValue[i$2] = char$1;
    }
    for (var i$2 = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i$2 + start <= limit; i$2++) {
        var char$1 = String.fromCharCode(i$2 + start);
        var index = i$2 + 26;
        alphabetByEncoding[char$1] = index;
        alphabetByValue[index] = char$1;
    }
    for (var i$2 = 0; i$2 < 10; i$2++) {
        alphabetByEncoding[i$2.toString(10)] = i$2 + 52;
        var char$1 = i$2.toString(10);
        var index = i$2 + 52;
        alphabetByEncoding[char$1] = index;
        alphabetByValue[index] = char$1;
    }
    alphabetByEncoding["+"] = 62;
    alphabetByValue[62] = "+";
    alphabetByEncoding["/"] = 63;
    alphabetByValue[63] = "/";
    var bitsPerLetter = 6;
    var bitsPerByte = 8;
    var maxLetterValue = 63;
    /**
     * Converts a base-64 encoded string to a Uint8Array of bytes.
     *
     * @param input The base-64 encoded string
     *
     * @see https://tools.ietf.org/html/rfc4648#section-4
     */
    function fromBase64(input) {
        var totalByteLength = (input.length / 4) * 3;
        if (input.substr(-2) === "==") {
            totalByteLength -= 2;
        }
        else if (input.substr(-1) === "=") {
            totalByteLength--;
        }
        var out = new ArrayBuffer(totalByteLength);
        var dataView = new DataView(out);
        for (var i = 0; i < input.length; i += 4) {
            var bits = 0;
            var bitLength = 0;
            for (var j = i, limit = i + 3; j <= limit; j++) {
                if (input[j] !== "=") {
                    bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);
                    bitLength += bitsPerLetter;
                }
                else {
                    bits >>= bitsPerLetter;
                }
            }
            var chunkOffset = (i / 4) * 3;
            bits >>= bitLength % bitsPerByte;
            var byteLength = Math.floor(bitLength / bitsPerByte);
            for (var k = 0; k < byteLength; k++) {
                var offset = (byteLength - k - 1) * bitsPerByte;
                dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);
            }
        }
        return new Uint8Array(out);
    }
    /**
     * Converts a Uint8Array of binary data to a base-64 encoded string.
     *
     * @param input The binary data to encode
     *
     * @see https://tools.ietf.org/html/rfc4648#section-4
     */
    function toBase64(input) {
        var str = "";
        for (var i = 0; i < input.length; i += 3) {
            var bits = 0;
            var bitLength = 0;
            for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
                bits |= input[j] << ((limit - j - 1) * bitsPerByte);
                bitLength += bitsPerByte;
            }
            var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
            bits <<= bitClusterCount * bitsPerLetter - bitLength;
            for (var k = 1; k <= bitClusterCount; k++) {
                var offset = (bitClusterCount - k) * bitsPerLetter;
                str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];
            }
            str += "==".slice(0, 4 - bitClusterCount);
        }
        return str;
    }

    //reference: https://snack.expo.io/r1JCSWRGU
    var streamCollector = function (stream) {
        if (typeof Blob === "function" && stream instanceof Blob) {
            return collectBlob(stream);
        }
        return collectStream(stream);
    };
    function collectBlob(blob) {
        return __awaiter$j(this, void 0, void 0, function () {
            var base64, arrayBuffer;
            return __generator$j(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, readToBase64(blob)];
                    case 1:
                        base64 = _a.sent();
                        arrayBuffer = fromBase64(base64);
                        return [2 /*return*/, new Uint8Array(arrayBuffer)];
                }
            });
        });
    }
    function collectStream(stream) {
        return __awaiter$j(this, void 0, void 0, function () {
            var res, reader, isDone, _a, done, value, prior;
            return __generator$j(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        res = new Uint8Array(0);
                        reader = stream.getReader();
                        isDone = false;
                        _b.label = 1;
                    case 1:
                        if (!!isDone) return [3 /*break*/, 3];
                        return [4 /*yield*/, reader.read()];
                    case 2:
                        _a = _b.sent(), done = _a.done, value = _a.value;
                        if (value) {
                            prior = res;
                            res = new Uint8Array(prior.length + value.length);
                            res.set(prior);
                            res.set(value, prior.length);
                        }
                        isDone = done;
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, res];
                }
            });
        });
    }
    function readToBase64(blob) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            reader.onloadend = function () {
                var _a;
                // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
                // response from readAsDataURL is always prepended with "data:*/*;base64,"
                if (reader.readyState !== 2) {
                    return reject(new Error("Reader aborted too early"));
                }
                var result = ((_a = reader.result) !== null && _a !== void 0 ? _a : "");
                // Response can include only 'data:' for empty blob, return empty string in this case.
                // Otherwise, return the string after ','
                var commaIndex = result.indexOf(",");
                var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
                resolve(result.substring(dataOffset));
            };
            reader.onabort = function () { return reject(new Error("Read aborted")); };
            reader.onerror = function () { return reject(reader.error); };
            // reader.readAsArrayBuffer is not always available
            reader.readAsDataURL(blob);
        });
    }

    var invalidProvider = function (message) { return function () { return Promise.reject(message); }; };

    var retryMiddleware = function (options) { return function (next, context) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var _a;
        return __generator$j(this, function (_b) {
            if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode)
                context.userAgent = __spread$2((context.userAgent || []), [["cfg/retry-mode", options.retryStrategy.mode]]);
            return [2 /*return*/, options.retryStrategy.retry(next, args)];
        });
    }); }; }; };
    var retryMiddlewareOptions = {
        name: "retryMiddleware",
        tags: ["RETRY"],
        step: "finalizeRequest",
        priority: "high",
        override: true,
    };
    var getRetryPlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        },
    }); };

    /**
     * The base number of milliseconds to use in calculating a suitable cool-down
     * time when a retryable error is encountered.
     */
    var DEFAULT_RETRY_DELAY_BASE = 100;
    /**
     * The maximum amount of time (in milliseconds) that will be used as a delay
     * between retry attempts.
     */
    var MAXIMUM_RETRY_DELAY = 20 * 1000;
    /**
     * The retry delay base (in milliseconds) to use when a throttling error is
     * encountered.
     */
    var THROTTLING_RETRY_DELAY_BASE = 500;
    /**
     * Initial number of retry tokens in Retry Quota
     */
    var INITIAL_RETRY_TOKENS = 500;
    /**
     * The total amount of retry tokens to be decremented from retry token balance.
     */
    var RETRY_COST = 5;
    /**
     * The total amount of retry tokens to be decremented from retry token balance
     * when a throttling error is encountered.
     */
    var TIMEOUT_RETRY_COST = 10;
    /**
     * The total amount of retry token to be incremented from retry token balance
     * if an SDK operation invocation succeeds without requiring a retry request.
     */
    var NO_RETRY_INCREMENT = 1;
    /**
     * Header name for SDK invocation ID
     */
    var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    /**
     * Header name for request retry information.
     */
    var REQUEST_HEADER = "amz-sdk-request";

    /**
     * Errors encountered when the client clock and server clock cannot agree on the
     * current time.
     *
     * These errors are retryable, assuming the SDK has enabled clock skew
     * correction.
     */
    var CLOCK_SKEW_ERROR_CODES = [
        "AuthFailure",
        "InvalidSignatureException",
        "RequestExpired",
        "RequestInTheFuture",
        "RequestTimeTooSkewed",
        "SignatureDoesNotMatch",
    ];
    /**
     * Errors that indicate the SDK is being throttled.
     *
     * These errors are always retryable.
     */
    var THROTTLING_ERROR_CODES = [
        "BandwidthLimitExceeded",
        "EC2ThrottledException",
        "LimitExceededException",
        "PriorRequestNotComplete",
        "ProvisionedThroughputExceededException",
        "RequestLimitExceeded",
        "RequestThrottled",
        "RequestThrottledException",
        "SlowDown",
        "ThrottledException",
        "Throttling",
        "ThrottlingException",
        "TooManyRequestsException",
        "TransactionInProgressException",
    ];
    /**
     * Error codes that indicate transient issues
     */
    var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    /**
     * Error codes that indicate transient issues
     */
    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

    var isRetryableByTrait = function (error) { return error.$retryable !== undefined; };
    var isClockSkewError = function (error) { return CLOCK_SKEW_ERROR_CODES.includes(error.name); };
    var isThrottlingError = function (error) {
        var _a, _b;
        return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 ||
            THROTTLING_ERROR_CODES.includes(error.name) ||
            ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    var isTransientError = function (error) {
        var _a;
        return TRANSIENT_ERROR_CODES.includes(error.name) ||
            TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };

    var rngBrowser = createCommonjsModule(function (module) {
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection

    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }
    });

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i$1 = 0; i$1 < 256; ++i$1) {
      byteToHex[i$1] = (i$1 + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]]
      ]).join('');
    }

    var bytesToUuid_1 = bytesToUuid;

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    var _nodeId;
    var _clockseq;

    // Previous uuid creation time
    var _lastMSecs = 0;
    var _lastNSecs = 0;

    // See https://github.com/uuidjs/uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189
      if (node == null || clockseq == null) {
        var seedBytes = rngBrowser();
        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
          ];
        }
        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      }

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf ? buf : bytesToUuid_1(b);
    }

    var v1_1 = v1;

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rngBrowser)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid_1(rnds);
    }

    var v4_1 = v4;

    var uuid = v4_1;
    uuid.v1 = v1_1;
    uuid.v4 = v4_1;

    var uuid_1 = uuid;

    var getDefaultRetryQuota = function (initialRetryTokens) {
        var MAX_CAPACITY = initialRetryTokens;
        var availableCapacity = initialRetryTokens;
        var getCapacityAmount = function (error) { return (error.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST); };
        var hasRetryTokens = function (error) { return getCapacityAmount(error) <= availableCapacity; };
        var retrieveRetryTokens = function (error) {
            if (!hasRetryTokens(error)) {
                // retryStrategy should stop retrying, and return last error
                throw new Error("No retry token available");
            }
            var capacityAmount = getCapacityAmount(error);
            availableCapacity -= capacityAmount;
            return capacityAmount;
        };
        var releaseRetryTokens = function (capacityReleaseAmount) {
            availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;
            availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
        };
        return Object.freeze({
            hasRetryTokens: hasRetryTokens,
            retrieveRetryTokens: retrieveRetryTokens,
            releaseRetryTokens: releaseRetryTokens,
        });
    };

    /**
     * Calculate a capped, fully-jittered exponential backoff time.
     */
    var defaultDelayDecider = function (delayBase, attempts) {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
    };

    var defaultRetryDecider = function (error) {
        if (!error) {
            return false;
        }
        return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
    };

    /**
     * The default value for how many HTTP requests an SDK should make for a
     * single SDK operation invocation before giving up
     */
    var DEFAULT_MAX_ATTEMPTS = 3;
    /**
     * The default retry algorithm to use.
     */
    var DEFAULT_RETRY_MODE = "standard";
    var StandardRetryStrategy = /** @class */ (function () {
        function StandardRetryStrategy(maxAttemptsProvider, options) {
            var _a, _b, _c;
            this.maxAttemptsProvider = maxAttemptsProvider;
            this.mode = DEFAULT_RETRY_MODE;
            this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
            this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
            this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
        }
        StandardRetryStrategy.prototype.shouldRetry = function (error, attempts, maxAttempts) {
            return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
        };
        StandardRetryStrategy.prototype.getMaxAttempts = function () {
            return __awaiter$j(this, void 0, void 0, function () {
                var maxAttempts;
                return __generator$j(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.maxAttemptsProvider()];
                        case 1:
                            maxAttempts = _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a.sent();
                            maxAttempts = DEFAULT_MAX_ATTEMPTS;
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/, maxAttempts];
                    }
                });
            });
        };
        StandardRetryStrategy.prototype.retry = function (next, args) {
            return __awaiter$j(this, void 0, void 0, function () {
                var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
                return __generator$j(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            attempts = 0;
                            totalDelay = 0;
                            return [4 /*yield*/, this.getMaxAttempts()];
                        case 1:
                            maxAttempts = _a.sent();
                            request = args.request;
                            if (HttpRequest.isInstance(request)) {
                                request.headers[INVOCATION_ID_HEADER] = uuid_1.v4();
                            }
                            _loop_1 = function () {
                                var _a, response, output, err_1, delay_1;
                                return __generator$j(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 5]);
                                            if (HttpRequest.isInstance(request)) {
                                                request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                                            }
                                            return [4 /*yield*/, next(args)];
                                        case 1:
                                            _a = _b.sent(), response = _a.response, output = _a.output;
                                            this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                                            output.$metadata.attempts = attempts + 1;
                                            output.$metadata.totalRetryDelay = totalDelay;
                                            return [2 /*return*/, { value: { response: response, output: output } }];
                                        case 2:
                                            err_1 = _b.sent();
                                            attempts++;
                                            if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [3 /*break*/, 4];
                                            retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                                            delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                                            totalDelay += delay_1;
                                            return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, delay_1); })];
                                        case 3:
                                            _b.sent();
                                            return [2 /*return*/, "continue"];
                                        case 4:
                                            if (!err_1.$metadata) {
                                                err_1.$metadata = {};
                                            }
                                            err_1.$metadata.attempts = attempts;
                                            err_1.$metadata.totalRetryDelay = totalDelay;
                                            throw err_1;
                                        case 5: return [2 /*return*/];
                                    }
                                });
                            };
                            this_1 = this;
                            _a.label = 2;
                        case 2:
                            return [5 /*yield**/, _loop_1()];
                        case 3:
                            state_1 = _a.sent();
                            if (typeof state_1 === "object")
                                return [2 /*return*/, state_1.value];
                            return [3 /*break*/, 2];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return StandardRetryStrategy;
    }());

    var resolveRetryConfig = function (input) {
        var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
        return __assign$i(__assign$i({}, input), { maxAttempts: maxAttempts, retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts) });
    };
    var normalizeMaxAttempts = function (maxAttempts) {
        if (maxAttempts === void 0) { maxAttempts = DEFAULT_MAX_ATTEMPTS; }
        if (typeof maxAttempts === "number") {
            var promisified_1 = Promise.resolve(maxAttempts);
            return function () { return promisified_1; };
        }
        return maxAttempts;
    };

    function calculateBodyLength(body) {
        if (typeof body === "string") {
            var len = body.length;
            for (var i = len - 1; i >= 0; i--) {
                var code = body.charCodeAt(i);
                if (code > 0x7f && code <= 0x7ff)
                    len++;
                else if (code > 0x7ff && code <= 0xffff)
                    len += 2;
            }
            return len;
        }
        else if (typeof body.byteLength === "number") {
            // handles Uint8Array, ArrayBuffer, Buffer, and ArrayBufferView
            return body.byteLength;
        }
        else if (typeof body.size === "number") {
            // handles browser File object
            return body.size;
        }
    }

    var es5 = createCommonjsModule(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default;},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default;},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default;},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default;},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return "microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default;}})}));
    });

    var bowser = /*@__PURE__*/getDefaultExportFromCjs(es5);

    /**
     * Default provider to the user agent in browsers. It's a best effort to infer
     * the device information. It uses bowser library to detect the browser and virsion
     */
    var defaultUserAgent = function (_a) {
        var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
        return function () { return __awaiter$j(void 0, void 0, void 0, function () {
            var parsedUA, sections;
            var _a, _b, _c, _d, _e, _f, _g;
            return __generator$j(this, function (_h) {
                parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser.parse(window.navigator.userAgent) : undefined;
                sections = [
                    // sdk-metadata
                    ["aws-sdk-js", clientVersion],
                    // os-metadata
                    ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
                    // language-metadata
                    // ECMAScript edition doesn't matter in JS.
                    ["lang/js"],
                    // browser vendor and version.
                    ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")],
                ];
                if (serviceId) {
                    // api-metadata
                    // service Id may not appear in non-AWS clients
                    sections.push(["api/" + serviceId, clientVersion]);
                }
                return [2 /*return*/, sections];
            });
        }); };
    };

    // Partition default templates
    var AWS_TEMPLATE$1 = "cognito-identity.{region}.amazonaws.com";
    var AWS_CN_TEMPLATE$1 = "cognito-identity.{region}.amazonaws.com.cn";
    var AWS_ISO_TEMPLATE$1 = "cognito-identity.{region}.c2s.ic.gov";
    var AWS_ISO_B_TEMPLATE$1 = "cognito-identity.{region}.sc2s.sgov.gov";
    var AWS_US_GOV_TEMPLATE$1 = "cognito-identity.{region}.amazonaws.com";
    // Partition regions
    var AWS_REGIONS$1 = new Set([
        "af-south-1",
        "ap-east-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-south-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-north-1",
        "eu-south-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "me-south-1",
        "sa-east-1",
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
    ]);
    var AWS_CN_REGIONS$1 = new Set(["cn-north-1", "cn-northwest-1"]);
    var AWS_ISO_REGIONS$1 = new Set(["us-iso-east-1"]);
    var AWS_ISO_B_REGIONS$1 = new Set(["us-isob-east-1"]);
    var AWS_US_GOV_REGIONS$1 = new Set(["us-gov-east-1", "us-gov-west-1"]);
    var defaultRegionInfoProvider$1 = function (region, options) {
        var regionInfo = undefined;
        switch (region) {
            // First, try to match exact region names.
            case "ap-northeast-1":
                regionInfo = {
                    hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-northeast-2":
                regionInfo = {
                    hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-south-1":
                regionInfo = {
                    hostname: "cognito-identity.ap-south-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-southeast-1":
                regionInfo = {
                    hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-southeast-2":
                regionInfo = {
                    hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ca-central-1":
                regionInfo = {
                    hostname: "cognito-identity.ca-central-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "cn-north-1":
                regionInfo = {
                    hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
                    partition: "aws-cn",
                };
                break;
            case "eu-central-1":
                regionInfo = {
                    hostname: "cognito-identity.eu-central-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-north-1":
                regionInfo = {
                    hostname: "cognito-identity.eu-north-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-west-1":
                regionInfo = {
                    hostname: "cognito-identity.eu-west-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-west-2":
                regionInfo = {
                    hostname: "cognito-identity.eu-west-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-west-3":
                regionInfo = {
                    hostname: "cognito-identity.eu-west-3.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "fips-us-east-1":
                regionInfo = {
                    hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
                    partition: "aws",
                    signingRegion: "us-east-1",
                };
                break;
            case "fips-us-east-2":
                regionInfo = {
                    hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
                    partition: "aws",
                    signingRegion: "us-east-2",
                };
                break;
            case "fips-us-gov-west-1":
                regionInfo = {
                    hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
                    partition: "aws-us-gov",
                    signingRegion: "us-gov-west-1",
                };
                break;
            case "fips-us-west-2":
                regionInfo = {
                    hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
                    partition: "aws",
                    signingRegion: "us-west-2",
                };
                break;
            case "sa-east-1":
                regionInfo = {
                    hostname: "cognito-identity.sa-east-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-east-1":
                regionInfo = {
                    hostname: "cognito-identity.us-east-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-east-2":
                regionInfo = {
                    hostname: "cognito-identity.us-east-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-gov-west-1":
                regionInfo = {
                    hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
                    partition: "aws-us-gov",
                };
                break;
            case "us-west-1":
                regionInfo = {
                    hostname: "cognito-identity.us-west-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-west-2":
                regionInfo = {
                    hostname: "cognito-identity.us-west-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            // Next, try to match partition endpoints.
            default:
                if (AWS_REGIONS$1.has(region)) {
                    regionInfo = {
                        hostname: AWS_TEMPLATE$1.replace("{region}", region),
                        partition: "aws",
                    };
                }
                if (AWS_CN_REGIONS$1.has(region)) {
                    regionInfo = {
                        hostname: AWS_CN_TEMPLATE$1.replace("{region}", region),
                        partition: "aws-cn",
                    };
                }
                if (AWS_ISO_REGIONS$1.has(region)) {
                    regionInfo = {
                        hostname: AWS_ISO_TEMPLATE$1.replace("{region}", region),
                        partition: "aws-iso",
                    };
                }
                if (AWS_ISO_B_REGIONS$1.has(region)) {
                    regionInfo = {
                        hostname: AWS_ISO_B_TEMPLATE$1.replace("{region}", region),
                        partition: "aws-iso-b",
                    };
                }
                if (AWS_US_GOV_REGIONS$1.has(region)) {
                    regionInfo = {
                        hostname: AWS_US_GOV_TEMPLATE$1.replace("{region}", region),
                        partition: "aws-us-gov",
                    };
                }
                // Finally, assume it's an AWS partition endpoint.
                if (regionInfo === undefined) {
                    regionInfo = {
                        hostname: AWS_TEMPLATE$1.replace("{region}", region),
                        partition: "aws",
                    };
                }
        }
        return Promise.resolve(__assign$g({ signingService: "cognito-identity" }, regionInfo));
    };

    function parseQueryString(querystring) {
        var e_1, _a;
        var query = {};
        querystring = querystring.replace(/^\?/, "");
        if (querystring) {
            try {
                for (var _b = __values$1(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var pair = _c.value;
                    var _d = __read$9(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
                    key = decodeURIComponent(key);
                    if (value) {
                        value = decodeURIComponent(value);
                    }
                    if (!(key in query)) {
                        query[key] = value;
                    }
                    else if (Array.isArray(query[key])) {
                        query[key].push(value);
                    }
                    else {
                        query[key] = [query[key], value];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return query;
    }

    var parseUrl = function (url) {
        var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
        var query;
        if (search) {
            query = parseQueryString(search);
        }
        return {
            hostname: hostname,
            port: port ? parseInt(port) : undefined,
            protocol: protocol,
            path: pathname,
            query: query,
        };
    };

    /**
     * @internal
     */
    var ClientSharedValues$1 = {
        apiVersion: "2014-06-30",
        disableHostPrefix: false,
        logger: {},
        regionInfoProvider: defaultRegionInfoProvider$1,
        serviceId: "Cognito Identity",
        urlParser: parseUrl,
    };

    /**
     * @internal
     */
    var ClientDefaultValues$1 = __assign$g(__assign$g({}, ClientSharedValues$1), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function (_) { return function () { return Promise.reject(new Error("Credential is missing")); }; }, defaultUserAgentProvider: defaultUserAgent({
            serviceId: ClientSharedValues$1.serviceId,
            clientVersion: packageInfo$1.version,
        }), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: build$1.Sha256, streamCollector: streamCollector, utf8Decoder: fromUtf8, utf8Encoder: toUtf8 });

    var resolveEndpointsConfig = function (input) {
        var _a;
        return (__assign$i(__assign$i({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: input.endpoint ? normalizeEndpoint(input) : function () { return getEndPointFromRegion(input); }, isCustomEndpoint: input.endpoint ? true : false }));
    };
    var normalizeEndpoint = function (input) {
        var endpoint = input.endpoint, urlParser = input.urlParser;
        if (typeof endpoint === "string") {
            var promisified_1 = Promise.resolve(urlParser(endpoint));
            return function () { return promisified_1; };
        }
        else if (typeof endpoint === "object") {
            var promisified_2 = Promise.resolve(endpoint);
            return function () { return promisified_2; };
        }
        return endpoint;
    };
    var getEndPointFromRegion = function (input) { return __awaiter$j(void 0, void 0, void 0, function () {
        var _a, tls, region, dnsHostRegex, hostname;
        var _b;
        return __generator$j(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = input.tls, tls = _a === void 0 ? true : _a;
                    return [4 /*yield*/, input.region()];
                case 1:
                    region = _c.sent();
                    dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
                    if (!dnsHostRegex.test(region)) {
                        throw new Error("Invalid region in client config");
                    }
                    return [4 /*yield*/, input.regionInfoProvider(region)];
                case 2:
                    hostname = ((_b = (_c.sent())) !== null && _b !== void 0 ? _b : {}).hostname;
                    if (!hostname) {
                        throw new Error("Cannot resolve hostname from client config");
                    }
                    return [2 /*return*/, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
            }
        });
    }); };

    var resolveRegionConfig = function (input) {
        if (!input.region) {
            throw new Error("Region is missing");
        }
        return __assign$i(__assign$i({}, input), { region: normalizeRegion(input.region) });
    };
    var normalizeRegion = function (region) {
        if (typeof region === "string") {
            var promisified_1 = Promise.resolve(region);
            return function () { return promisified_1; };
        }
        return region;
    };

    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
        var _this = this;
        return function (next) { return function (args) { return __awaiter$j(_this, void 0, void 0, function () {
            var request, body, headers, length;
            var _a;
            return __generator$j(this, function (_b) {
                request = args.request;
                if (HttpRequest.isInstance(request)) {
                    body = request.body, headers = request.headers;
                    if (body &&
                        Object.keys(headers)
                            .map(function (str) { return str.toLowerCase(); })
                            .indexOf(CONTENT_LENGTH_HEADER) === -1) {
                        length = bodyLengthChecker(body);
                        if (length !== undefined) {
                            request.headers = __assign$i(__assign$i({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
                        }
                    }
                }
                return [2 /*return*/, next(__assign$i(__assign$i({}, args), { request: request }))];
            });
        }); }; };
    }
    var contentLengthMiddlewareOptions = {
        step: "build",
        tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
        name: "contentLengthMiddleware",
        override: true,
    };
    var getContentLengthPlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        },
    }); };

    function resolveHostHeaderConfig(input) {
        return input;
    }
    var hostHeaderMiddleware = function (options) { return function (next) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var request, _a, handlerProtocol;
        return __generator$j(this, function (_b) {
            if (!HttpRequest.isInstance(args.request))
                return [2 /*return*/, next(args)];
            request = args.request;
            _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
            //For H2 request, remove 'host' header and use ':authority' header instead
            //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS
            if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                delete request.headers["host"];
                request.headers[":authority"] = "";
                //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.
            }
            else if (!request.headers["host"]) {
                request.headers["host"] = request.hostname;
            }
            return [2 /*return*/, next(args)];
        });
    }); }; }; };
    var hostHeaderMiddlewareOptions = {
        name: "hostHeaderMiddleware",
        step: "build",
        priority: "low",
        tags: ["HOST"],
        override: true,
    };
    var getHostHeaderPlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        },
    }); };

    var loggerMiddleware = function () { return function (next, context) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator$j(this, function (_b) {
            switch (_b.label) {
                case 0:
                    clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
                    return [4 /*yield*/, next(args)];
                case 1:
                    response = _b.sent();
                    if (!logger) {
                        return [2 /*return*/, response];
                    }
                    if (typeof logger.info === "function") {
                        _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest$6(_a, ["$metadata"]);
                        logger.info({
                            clientName: clientName,
                            commandName: commandName,
                            input: inputFilterSensitiveLog(args.input),
                            output: outputFilterSensitiveLog(outputWithoutMetadata),
                            metadata: $metadata,
                        });
                    }
                    return [2 /*return*/, response];
            }
        });
    }); }; }; };
    var loggerMiddlewareOptions = {
        name: "loggerMiddleware",
        tags: ["LOGGER"],
        step: "initialize",
        override: true,
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var getLoggerPlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        },
    }); };

    var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    var AUTH_HEADER = "authorization";
    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    var DATE_HEADER = "date";
    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    var SHA256_HEADER$1 = "x-amz-content-sha256";
    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    var ALWAYS_UNSIGNABLE_HEADERS = {
        authorization: true,
        "cache-control": true,
        connection: true,
        expect: true,
        from: true,
        "keep-alive": true,
        "max-forwards": true,
        pragma: true,
        referer: true,
        te: true,
        trailer: true,
        "transfer-encoding": true,
        upgrade: true,
        "user-agent": true,
        "x-amzn-trace-id": true,
    };
    var PROXY_HEADER_PATTERN = /^proxy-/;
    var SEC_HEADER_PATTERN = /^sec-/;
    var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    var UNSIGNED_PAYLOAD$1 = "UNSIGNED-PAYLOAD";
    var MAX_CACHE_SIZE = 50;
    var KEY_TYPE_IDENTIFIER = "aws4_request";
    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

    var signingKeyCache = {};
    var cacheQueue = [];
    /**
     * Create a string describing the scope of credentials used to sign a request.
     *
     * @param shortDate The current calendar date in the form YYYYMMDD.
     * @param region    The AWS region in which the service resides.
     * @param service   The service to which the signed request is being sent.
     */
    function createScope(shortDate, region, service) {
        return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
    }
    /**
     * Derive a signing key from its composite parts
     *
     * @param sha256Constructor A constructor function that can instantiate SHA-256
     *                          hash objects.
     * @param credentials       The credentials with which the request will be
     *                          signed.
     * @param shortDate         The current calendar date in the form YYYYMMDD.
     * @param region            The AWS region in which the service resides.
     * @param service           The service to which the signed request is being
     *                          sent.
     */
    var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) { return __awaiter$j(void 0, void 0, void 0, function () {
        var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
        var e_1, _c;
        return __generator$j(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, hmac$1(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
                case 1:
                    credsHash = _d.sent();
                    cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
                    if (cacheKey in signingKeyCache) {
                        return [2 /*return*/, signingKeyCache[cacheKey]];
                    }
                    cacheQueue.push(cacheKey);
                    while (cacheQueue.length > MAX_CACHE_SIZE) {
                        delete signingKeyCache[cacheQueue.shift()];
                    }
                    key = "AWS4" + credentials.secretAccessKey;
                    _d.label = 2;
                case 2:
                    _d.trys.push([2, 7, 8, 9]);
                    _a = __values$1([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();
                    _d.label = 3;
                case 3:
                    if (!!_b.done) return [3 /*break*/, 6];
                    signable = _b.value;
                    return [4 /*yield*/, hmac$1(sha256Constructor, key, signable)];
                case 4:
                    key = _d.sent();
                    _d.label = 5;
                case 5:
                    _b = _a.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9: return [2 /*return*/, (signingKeyCache[cacheKey] = key)];
            }
        });
    }); };
    function hmac$1(ctor, secret, data) {
        var hash = new ctor(secret);
        hash.update(data);
        return hash.digest();
    }

    /**
     * @internal
     */
    function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
        var e_1, _b;
        var headers = _a.headers;
        var canonical = {};
        try {
            for (var _c = __values$1(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var headerName = _d.value;
                var canonicalHeaderName = headerName.toLowerCase();
                if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) ||
                    PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
                    SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
                    if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
                        continue;
                    }
                }
                canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return canonical;
    }

    /**
     * @internal
     */
    function getCanonicalQuery(_a) {
        var e_1, _b;
        var _c = _a.query, query = _c === void 0 ? {} : _c;
        var keys = [];
        var serialized = {};
        var _loop_1 = function (key) {
            if (key.toLowerCase() === SIGNATURE_HEADER) {
                return "continue";
            }
            keys.push(key);
            var value = query[key];
            if (typeof value === "string") {
                serialized[key] = escapeUri(key) + "=" + escapeUri(value);
            }
            else if (Array.isArray(value)) {
                serialized[key] = value
                    .slice(0)
                    .sort()
                    .reduce(function (encoded, value) { return encoded.concat([escapeUri(key) + "=" + escapeUri(value)]); }, [])
                    .join("&");
            }
        };
        try {
            for (var _d = __values$1(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var key = _e.value;
                _loop_1(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return keys
            .map(function (key) { return serialized[key]; })
            .filter(function (serialized) { return serialized; }) // omit any falsy values
            .join("&");
    }

    var isArrayBuffer$1 = function (arg) {
        return (typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer) ||
            Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    };

    /**
     * @internal
     */
    function getPayloadHash(_a, hashConstructor) {
        var headers = _a.headers, body = _a.body;
        return __awaiter$j(this, void 0, void 0, function () {
            var _b, _c, headerName, hashCtor, _d;
            var e_1, _e;
            return __generator$j(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        try {
                            for (_b = __values$1(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                headerName = _c.value;
                                if (headerName.toLowerCase() === SHA256_HEADER$1) {
                                    return [2 /*return*/, headers[headerName]];
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (!(body == undefined)) return [3 /*break*/, 1];
                        return [2 /*return*/, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
                    case 1:
                        if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer$1(body))) return [3 /*break*/, 3];
                        hashCtor = new hashConstructor();
                        hashCtor.update(body);
                        _d = toHex;
                        return [4 /*yield*/, hashCtor.digest()];
                    case 2: return [2 /*return*/, _d.apply(void 0, [_f.sent()])];
                    case 3: 
                    // As any defined body that is not a string or binary data is a stream, this
                    // body is unsignable. Attempt to send the request with an unsigned payload,
                    // which may or may not be accepted by the service.
                    return [2 /*return*/, UNSIGNED_PAYLOAD$1];
                }
            });
        });
    }

    function hasHeader(soughtHeader, headers) {
        var e_1, _a;
        soughtHeader = soughtHeader.toLowerCase();
        try {
            for (var _b = __values$1(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var headerName = _c.value;
                if (soughtHeader === headerName.toLowerCase()) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    }

    /**
     * @internal
     */
    function cloneRequest(_a) {
        var headers = _a.headers, query = _a.query, rest = __rest$6(_a, ["headers", "query"]);
        return __assign$i(__assign$i({}, rest), { headers: __assign$i({}, headers), query: query ? cloneQuery(query) : undefined });
    }
    function cloneQuery(query) {
        return Object.keys(query).reduce(function (carry, paramName) {
            var _a;
            var param = query[paramName];
            return __assign$i(__assign$i({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread$2(param) : param, _a));
        }, {});
    }

    /**
     * @internal
     */
    function moveHeadersToQuery(request, options) {
        var e_1, _a;
        var _b;
        if (options === void 0) { options = {}; }
        var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
        try {
            for (var _e = __values$1(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var name = _f.value;
                var lname = name.toLowerCase();
                if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
                    query[name] = headers[name];
                    delete headers[name];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return __assign$i(__assign$i({}, request), { headers: headers,
            query: query });
    }

    /**
     * @internal
     */
    function prepareRequest(request) {
        var e_1, _a;
        // Create a clone of the request object that does not clone the body
        request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
        try {
            for (var _b = __values$1(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var headerName = _c.value;
                if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
                    delete request.headers[headerName];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return request;
    }

    function iso8601(time) {
        return toDate(time)
            .toISOString()
            .replace(/\.\d{3}Z$/, "Z");
    }
    function toDate(time) {
        if (typeof time === "number") {
            return new Date(time * 1000);
        }
        if (typeof time === "string") {
            if (Number(time)) {
                return new Date(Number(time) * 1000);
            }
            return new Date(time);
        }
        return time;
    }

    var SignatureV4 = /** @class */ (function () {
        function SignatureV4(_a) {
            var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
            this.service = service;
            this.sha256 = sha256;
            this.uriEscapePath = uriEscapePath;
            // default to true if applyChecksum isn't set
            this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
            this.regionProvider = normalizeRegionProvider(region);
            this.credentialProvider = normalizeCredentialsProvider(credentials);
        }
        SignatureV4.prototype.presign = function (originalRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter$j(this, void 0, void 0, function () {
                var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
                return __generator$j(this, function (_l) {
                    switch (_l.label) {
                        case 0:
                            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
                            return [4 /*yield*/, this.credentialProvider()];
                        case 1:
                            credentials = _l.sent();
                            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 2];
                            _c = signingRegion;
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.regionProvider()];
                        case 3:
                            _c = (_l.sent());
                            _l.label = 4;
                        case 4:
                            region = _c;
                            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
                            if (expiresIn > MAX_PRESIGNED_TTL) {
                                return [2 /*return*/, Promise.reject("Signature version 4 presigned URLs" + " must have an expiration date less than one week in" + " the future")];
                            }
                            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                            request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders: unhoistableHeaders });
                            if (credentials.sessionToken) {
                                request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
                            }
                            request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
                            request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
                            request.query[AMZ_DATE_QUERY_PARAM] = longDate;
                            request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
                            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
                            request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
                            _e = request.query;
                            _f = SIGNATURE_QUERY_PARAM;
                            _g = this.getSignature;
                            _h = [longDate,
                                scope,
                                this.getSigningKey(credentials, region, shortDate, signingService)];
                            _j = this.createCanonicalRequest;
                            _k = [request, canonicalHeaders];
                            return [4 /*yield*/, getPayloadHash(originalRequest, this.sha256)];
                        case 5: return [4 /*yield*/, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
                        case 6:
                            _e[_f] = _l.sent();
                            return [2 /*return*/, request];
                    }
                });
            });
        };
        SignatureV4.prototype.sign = function (toSign, options) {
            return __awaiter$j(this, void 0, void 0, function () {
                return __generator$j(this, function (_a) {
                    if (typeof toSign === "string") {
                        return [2 /*return*/, this.signString(toSign, options)];
                    }
                    else if (toSign.headers && toSign.payload) {
                        return [2 /*return*/, this.signEvent(toSign, options)];
                    }
                    else {
                        return [2 /*return*/, this.signRequest(toSign, options)];
                    }
                });
            });
        };
        SignatureV4.prototype.signEvent = function (_a, _b) {
            var headers = _a.headers, payload = _a.payload;
            var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
            return __awaiter$j(this, void 0, void 0, function () {
                var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;
                return __generator$j(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 1];
                            _d = signingRegion;
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, this.regionProvider()];
                        case 2:
                            _d = (_g.sent());
                            _g.label = 3;
                        case 3:
                            region = _d;
                            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
                            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                            return [4 /*yield*/, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
                        case 4:
                            hashedPayload = _g.sent();
                            hash = new this.sha256();
                            hash.update(headers);
                            _f = toHex;
                            return [4 /*yield*/, hash.digest()];
                        case 5:
                            hashedHeaders = _f.apply(void 0, [_g.sent()]);
                            stringToSign = [
                                EVENT_ALGORITHM_IDENTIFIER,
                                longDate,
                                scope,
                                priorSignature,
                                hashedHeaders,
                                hashedPayload,
                            ].join("\n");
                            return [2 /*return*/, this.signString(stringToSign, { signingDate: signingDate, signingRegion: region, signingService: signingService })];
                    }
                });
            });
        };
        SignatureV4.prototype.signString = function (stringToSign, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
            return __awaiter$j(this, void 0, void 0, function () {
                var credentials, region, _d, shortDate, hash, _e, _f, _g;
                return __generator$j(this, function (_h) {
                    switch (_h.label) {
                        case 0: return [4 /*yield*/, this.credentialProvider()];
                        case 1:
                            credentials = _h.sent();
                            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 2];
                            _d = signingRegion;
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.regionProvider()];
                        case 3:
                            _d = (_h.sent());
                            _h.label = 4;
                        case 4:
                            region = _d;
                            shortDate = formatDate(signingDate).shortDate;
                            _f = (_e = this.sha256).bind;
                            return [4 /*yield*/, this.getSigningKey(credentials, region, shortDate, signingService)];
                        case 5:
                            hash = new (_f.apply(_e, [void 0, _h.sent()]))();
                            hash.update(stringToSign);
                            _g = toHex;
                            return [4 /*yield*/, hash.digest()];
                        case 6: return [2 /*return*/, _g.apply(void 0, [_h.sent()])];
                    }
                });
            });
        };
        SignatureV4.prototype.signRequest = function (requestToSign, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
            return __awaiter$j(this, void 0, void 0, function () {
                var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
                return __generator$j(this, function (_f) {
                    switch (_f.label) {
                        case 0: return [4 /*yield*/, this.credentialProvider()];
                        case 1:
                            credentials = _f.sent();
                            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 2];
                            _d = signingRegion;
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.regionProvider()];
                        case 3:
                            _d = (_f.sent());
                            _f.label = 4;
                        case 4:
                            region = _d;
                            request = prepareRequest(requestToSign);
                            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
                            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                            request.headers[AMZ_DATE_HEADER] = longDate;
                            if (credentials.sessionToken) {
                                request.headers[TOKEN_HEADER] = credentials.sessionToken;
                            }
                            return [4 /*yield*/, getPayloadHash(request, this.sha256)];
                        case 5:
                            payloadHash = _f.sent();
                            if (!hasHeader(SHA256_HEADER$1, request.headers) && this.applyChecksum) {
                                request.headers[SHA256_HEADER$1] = payloadHash;
                            }
                            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
                            return [4 /*yield*/, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
                        case 6:
                            signature = _f.sent();
                            request.headers[AUTH_HEADER] =
                                ALGORITHM_IDENTIFIER + " " +
                                    ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") +
                                    ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") +
                                    ("Signature=" + signature);
                            return [2 /*return*/, request];
                    }
                });
            });
        };
        SignatureV4.prototype.createCanonicalRequest = function (request, canonicalHeaders, payloadHash) {
            var sortedHeaders = Object.keys(canonicalHeaders).sort();
            return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function (name) { return name + ":" + canonicalHeaders[name]; }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
        };
        SignatureV4.prototype.createStringToSign = function (longDate, credentialScope, canonicalRequest) {
            return __awaiter$j(this, void 0, void 0, function () {
                var hash, hashedRequest;
                return __generator$j(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hash = new this.sha256();
                            hash.update(canonicalRequest);
                            return [4 /*yield*/, hash.digest()];
                        case 1:
                            hashedRequest = _a.sent();
                            return [2 /*return*/, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
                    }
                });
            });
        };
        SignatureV4.prototype.getCanonicalPath = function (_a) {
            var path = _a.path;
            if (this.uriEscapePath) {
                var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
                return "/" + doubleEncoded.replace(/%2F/g, "/");
            }
            return path;
        };
        SignatureV4.prototype.getSignature = function (longDate, credentialScope, keyPromise, canonicalRequest) {
            return __awaiter$j(this, void 0, void 0, function () {
                var stringToSign, hash, _a, _b, _c;
                return __generator$j(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
                        case 1:
                            stringToSign = _d.sent();
                            _b = (_a = this.sha256).bind;
                            return [4 /*yield*/, keyPromise];
                        case 2:
                            hash = new (_b.apply(_a, [void 0, _d.sent()]))();
                            hash.update(stringToSign);
                            _c = toHex;
                            return [4 /*yield*/, hash.digest()];
                        case 3: return [2 /*return*/, _c.apply(void 0, [_d.sent()])];
                    }
                });
            });
        };
        SignatureV4.prototype.getSigningKey = function (credentials, region, shortDate, service) {
            return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
        };
        return SignatureV4;
    }());
    var formatDate = function (now) {
        var longDate = iso8601(now).replace(/[\-:]/g, "");
        return {
            longDate: longDate,
            shortDate: longDate.substr(0, 8),
        };
    };
    var getCanonicalHeaderList = function (headers) { return Object.keys(headers).sort().join(";"); };
    var normalizeRegionProvider = function (region) {
        if (typeof region === "string") {
            var promisified_1 = Promise.resolve(region);
            return function () { return promisified_1; };
        }
        else {
            return region;
        }
    };
    var normalizeCredentialsProvider = function (credentials) {
        if (typeof credentials === "object") {
            var promisified_2 = Promise.resolve(credentials);
            return function () { return promisified_2; };
        }
        else {
            return credentials;
        }
    };

    function resolveAwsAuthConfig(input) {
        var _this = this;
        var credentials = input.credentials || input.credentialDefaultProvider(input);
        var normalizedCreds = normalizeProvider(credentials);
        var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
        var signer;
        if (input.signer) {
            //if signer is supplied by user, normalize it to a function returning a promise for signer.
            signer = normalizeProvider(input.signer);
        }
        else {
            //construct a provider inferring signing from region.
            signer = function () {
                return normalizeProvider(input.region)()
                    .then(function (region) { return __awaiter$j(_this, void 0, void 0, function () { return __generator$j(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, input.regionInfoProvider(region)];
                        case 1: return [2 /*return*/, [(_a.sent()) || {}, region]];
                    }
                }); }); })
                    .then(function (_a) {
                    var _b = __read$9(_a, 2), regionInfo = _b[0], region = _b[1];
                    var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
                    //update client's singing region and signing service config if they are resolved.
                    //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region
                    input.signingRegion = input.signingRegion || signingRegion || region;
                    //signing name resolving order:
                    //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id
                    input.signingName = input.signingName || signingService || input.serviceId;
                    return new SignatureV4({
                        credentials: normalizedCreds,
                        region: input.signingRegion,
                        service: input.signingName,
                        sha256: sha256,
                        uriEscapePath: signingEscapePath,
                    });
                });
            };
        }
        return __assign$i(__assign$i({}, input), { systemClockOffset: systemClockOffset,
            signingEscapePath: signingEscapePath, credentials: normalizedCreds, signer: signer });
    }
    function normalizeProvider(input) {
        if (typeof input === "object") {
            var promisified_1 = Promise.resolve(input);
            return function () { return promisified_1; };
        }
        return input;
    }

    var isClockSkewed = function (newServerTime, systemClockOffset) {
        return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;
    };
    var getSkewCorrectedDate = function (systemClockOffset) { return new Date(Date.now() + systemClockOffset); };
    function awsAuthMiddleware(options) {
        return function (next, context) {
            return function (args) {
                return __awaiter$j(this, void 0, void 0, function () {
                    var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
                    var _d;
                    return __generator$j(this, function (_e) {
                        switch (_e.label) {
                            case 0:
                                if (!HttpRequest.isInstance(args.request))
                                    return [2 /*return*/, next(args)];
                                if (!(typeof options.signer === "function")) return [3 /*break*/, 2];
                                return [4 /*yield*/, options.signer()];
                            case 1:
                                _a = _e.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                _a = options.signer;
                                _e.label = 3;
                            case 3:
                                signer = _a;
                                _b = next;
                                _c = [__assign$i({}, args)];
                                _d = {};
                                return [4 /*yield*/, signer.sign(args.request, {
                                        signingDate: new Date(Date.now() + options.systemClockOffset),
                                        signingRegion: context["signing_region"],
                                        signingService: context["signing_service"],
                                    })];
                            case 4: return [4 /*yield*/, _b.apply(void 0, [__assign$i.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];
                            case 5:
                                output = _e.sent();
                                headers = output.response.headers;
                                dateHeader = headers && (headers.date || headers.Date);
                                if (dateHeader) {
                                    serverTime = Date.parse(dateHeader);
                                    if (isClockSkewed(serverTime, options.systemClockOffset)) {
                                        options.systemClockOffset = serverTime - Date.now();
                                    }
                                }
                                return [2 /*return*/, output];
                        }
                    });
                });
            };
        };
    }
    var awsAuthMiddlewareOptions = {
        name: "awsAuthMiddleware",
        tags: ["SIGNATURE", "AWSAUTH"],
        relation: "after",
        toMiddleware: "retryMiddleware",
        override: true,
    };
    var getAwsAuthPlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
        },
    }); };

    function resolveUserAgentConfig(input) {
        return __assign$i(__assign$i({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
    }

    var USER_AGENT = "user-agent";
    var X_AMZ_USER_AGENT = "x-amz-user-agent";
    var SPACE = " ";
    var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

    /**
     * Build user agent header sections from:
     * 1. runtime-specific default user agent provider;
     * 2. custom user agent from `customUserAgent` client config;
     * 3. handler execution context set by internal SDK components;
     * The built user agent will be set to `x-amz-user-agent` header for ALL the
     * runtimes.
     * Please note that any override to the `user-agent` or `x-amz-user-agent` header
     * in the HTTP request is discouraged. Please use `customUserAgent` client
     * config or middleware setting the `userAgent` context to generate desired user
     * agent.
     */
    var userAgentMiddleware = function (options) { return function (next, context) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var request, headers, userAgent, defaultUserAgent, customUserAgent, normalUAValue;
        var _a, _b;
        return __generator$j(this, function (_c) {
            switch (_c.label) {
                case 0:
                    request = args.request;
                    if (!HttpRequest.isInstance(request))
                        return [2 /*return*/, next(args)];
                    headers = request.headers;
                    userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
                    return [4 /*yield*/, options.defaultUserAgentProvider()];
                case 1:
                    defaultUserAgent = (_c.sent()).map(escapeUserAgent);
                    customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
                    // Set value to AWS-specific user agent header
                    headers[X_AMZ_USER_AGENT] = __spread$2(defaultUserAgent, userAgent, customUserAgent).join(SPACE);
                    normalUAValue = __spread$2(defaultUserAgent.filter(function (section) { return section.startsWith("aws-sdk-"); }), customUserAgent).join(SPACE);
                    if (options.runtime !== "browser" && normalUAValue) {
                        headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + " " + normalUAValue : normalUAValue;
                    }
                    return [2 /*return*/, next(__assign$i(__assign$i({}, args), { request: request }))];
            }
        });
    }); }; }; };
    /**
     * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.
     * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.
     * @private
     */
    var escapeUserAgent = function (_a) {
        var _b = __read$9(_a, 2), name = _b[0], version = _b[1];
        var prefixSeparatorIndex = name.indexOf("/");
        var prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just ""
        var uaName = name.substring(prefixSeparatorIndex + 1);
        if (prefix === "api") {
            uaName = uaName.toLowerCase();
        }
        return [prefix, uaName, version]
            .filter(function (item) { return item && item.length > 0; })
            .map(function (item) { return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_"); })
            .join("/");
    };
    var getUserAgentMiddlewareOptions = {
        name: "getUserAgentMiddleware",
        step: "build",
        priority: "low",
        tags: ["SET_USER_AGENT", "USER_AGENT"],
        override: true,
    };
    var getUserAgentPlugin = function (config) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        },
    }); };

    var constructStack = function () {
        var absoluteEntries = [];
        var relativeEntries = [];
        var entriesNameSet = new Set();
        var sort = function (entries) {
            return entries.sort(function (a, b) {
                return stepWeights[b.step] - stepWeights[a.step] ||
                    priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
            });
        };
        var removeByName = function (toRemove) {
            var isRemoved = false;
            var filterCb = function (entry) {
                if (entry.name && entry.name === toRemove) {
                    isRemoved = true;
                    entriesNameSet.delete(toRemove);
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        };
        var removeByReference = function (toRemove) {
            var isRemoved = false;
            var filterCb = function (entry) {
                if (entry.middleware === toRemove) {
                    isRemoved = true;
                    if (entry.name)
                        entriesNameSet.delete(entry.name);
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        };
        var cloneTo = function (toStack) {
            absoluteEntries.forEach(function (entry) {
                //@ts-ignore
                toStack.add(entry.middleware, __assign$i({}, entry));
            });
            relativeEntries.forEach(function (entry) {
                //@ts-ignore
                toStack.addRelativeTo(entry.middleware, __assign$i({}, entry));
            });
            return toStack;
        };
        var expandRelativeMiddlewareList = function (from) {
            var expandedMiddlewareList = [];
            from.before.forEach(function (entry) {
                if (entry.before.length === 0 && entry.after.length === 0) {
                    expandedMiddlewareList.push(entry);
                }
                else {
                    expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread$2(expandRelativeMiddlewareList(entry)));
                }
            });
            expandedMiddlewareList.push(from);
            from.after.reverse().forEach(function (entry) {
                if (entry.before.length === 0 && entry.after.length === 0) {
                    expandedMiddlewareList.push(entry);
                }
                else {
                    expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread$2(expandRelativeMiddlewareList(entry)));
                }
            });
            return expandedMiddlewareList;
        };
        /**
         * Get a final list of middleware in the order of being executed in the resolved handler.
         */
        var getMiddlewareList = function () {
            var normalizedAbsoluteEntries = [];
            var normalizedRelativeEntries = [];
            var normalizedEntriesNameMap = {};
            absoluteEntries.forEach(function (entry) {
                var normalizedEntry = __assign$i(__assign$i({}, entry), { before: [], after: [] });
                if (normalizedEntry.name)
                    normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
                normalizedAbsoluteEntries.push(normalizedEntry);
            });
            relativeEntries.forEach(function (entry) {
                var normalizedEntry = __assign$i(__assign$i({}, entry), { before: [], after: [] });
                if (normalizedEntry.name)
                    normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
                normalizedRelativeEntries.push(normalizedEntry);
            });
            normalizedRelativeEntries.forEach(function (entry) {
                if (entry.toMiddleware) {
                    var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                    if (toMiddleware === undefined) {
                        throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
                    }
                    if (entry.relation === "after") {
                        toMiddleware.after.push(entry);
                    }
                    if (entry.relation === "before") {
                        toMiddleware.before.push(entry);
                    }
                }
            });
            var mainChain = sort(normalizedAbsoluteEntries)
                .map(expandRelativeMiddlewareList)
                .reduce(function (wholeList, expendedMiddlewareList) {
                // TODO: Replace it with Array.flat();
                wholeList.push.apply(wholeList, __spread$2(expendedMiddlewareList));
                return wholeList;
            }, []);
            return mainChain.map(function (entry) { return entry.middleware; });
        };
        var stack = {
            add: function (middleware, options) {
                if (options === void 0) { options = {}; }
                var name = options.name, override = options.override;
                var entry = __assign$i({ step: "initialize", priority: "normal", middleware: middleware }, options);
                if (name) {
                    if (entriesNameSet.has(name)) {
                        if (!override)
                            throw new Error("Duplicate middleware name '" + name + "'");
                        var toOverrideIndex = absoluteEntries.findIndex(function (entry) { return entry.name === name; });
                        var toOverride = absoluteEntries[toOverrideIndex];
                        if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                            throw new Error("\"" + name + "\" middleware with " + toOverride.priority + " priority in " + toOverride.step + " step cannot be " +
                                ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
                        }
                        absoluteEntries.splice(toOverrideIndex, 1);
                    }
                    entriesNameSet.add(name);
                }
                absoluteEntries.push(entry);
            },
            addRelativeTo: function (middleware, options) {
                var name = options.name, override = options.override;
                var entry = __assign$i({ middleware: middleware }, options);
                if (name) {
                    if (entriesNameSet.has(name)) {
                        if (!override)
                            throw new Error("Duplicate middleware name '" + name + "'");
                        var toOverrideIndex = relativeEntries.findIndex(function (entry) { return entry.name === name; });
                        var toOverride = relativeEntries[toOverrideIndex];
                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                            throw new Error("\"" + name + "\" middleware " + toOverride.relation + " \"" + toOverride.toMiddleware + "\" middleware cannot be overridden " +
                                ("by same-name middleware " + entry.relation + " \"" + entry.toMiddleware + "\" middleware."));
                        }
                        relativeEntries.splice(toOverrideIndex, 1);
                    }
                    entriesNameSet.add(name);
                }
                relativeEntries.push(entry);
            },
            clone: function () { return cloneTo(constructStack()); },
            use: function (plugin) {
                plugin.applyToStack(stack);
            },
            remove: function (toRemove) {
                if (typeof toRemove === "string")
                    return removeByName(toRemove);
                else
                    return removeByReference(toRemove);
            },
            removeByTag: function (toRemove) {
                var isRemoved = false;
                var filterCb = function (entry) {
                    var tags = entry.tags, name = entry.name;
                    if (tags && tags.includes(toRemove)) {
                        if (name)
                            entriesNameSet.delete(name);
                        isRemoved = true;
                        return false;
                    }
                    return true;
                };
                absoluteEntries = absoluteEntries.filter(filterCb);
                relativeEntries = relativeEntries.filter(filterCb);
                return isRemoved;
            },
            concat: function (from) {
                var cloned = cloneTo(constructStack());
                cloned.use(from);
                return cloned;
            },
            applyToStack: cloneTo,
            resolve: function (handler, context) {
                var e_1, _a;
                try {
                    for (var _b = __values$1(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var middleware = _c.value;
                        handler = middleware(handler, context);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return handler;
            },
        };
        return stack;
    };
    var stepWeights = {
        initialize: 5,
        serialize: 4,
        build: 3,
        finalizeRequest: 2,
        deserialize: 1,
    };
    var priorityWeights = {
        high: 3,
        normal: 2,
        low: 1,
    };

    var Client$1 = /** @class */ (function () {
        function Client(config) {
            this.middlewareStack = constructStack();
            this.config = config;
        }
        Client.prototype.send = function (command, optionsOrCb, cb) {
            var options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
            var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
            var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
            if (callback) {
                handler(command)
                    .then(function (result) { return callback(null, result.output); }, function (err) { return callback(err); })
                    .catch(
                // prevent any errors thrown in the callback from triggering an
                // unhandled promise rejection
                function () { });
            }
            else {
                return handler(command).then(function (result) { return result.output; });
            }
        };
        Client.prototype.destroy = function () {
            if (this.config.requestHandler.destroy)
                this.config.requestHandler.destroy();
        };
        return Client;
    }());

    var Command = /** @class */ (function () {
        function Command() {
            this.middlewareStack = constructStack();
        }
        return Command;
    }());

    /**
     * Function that wraps encodeURIComponent to encode additional characters
     * to fully adhere to RFC 3986.
     */
    function extendedEncodeURIComponent(str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
            return "%" + c.charCodeAt(0).toString(16);
        });
    }

    /**
     * The XML parser will set one K:V for a member that could
     * return multiple entries but only has one.
     */
    var getArrayIfSingleItem = function (mayBeArray) {
        return Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    };

    /**
     * Recursively parses object and populates value is node from
     * "#text" key if it's available
     */
    var getValueFromTextNode = function (obj) {
        var textNodeName = "#text";
        for (var key in obj) {
            if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
                obj[key] = obj[key][textNodeName];
            }
            else if (typeof obj[key] === "object" && obj[key] !== null) {
                obj[key] = getValueFromTextNode(obj[key]);
            }
        }
        return obj;
    };

    /**
     * Lazy String holder for JSON typed contents.
     */
    /**
     * Because of https://github.com/microsoft/tslib/issues/95,
     * TS 'extends' shim doesn't support extending native types like String.
     * So here we create StringWrapper that duplicate everything from String
     * class including its prototype chain. So we can extend from here.
     */
    // @ts-ignore StringWrapper implementation is not a simple constructor
    var StringWrapper = function () {
        //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any
        var Class = Object.getPrototypeOf(this).constructor;
        var Constructor = Function.bind.apply(String, __spread$2([null], arguments));
        //@ts-ignore Call wrapped String constructor directly, don't bother typing it.
        var instance = new Constructor();
        Object.setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    StringWrapper.prototype = Object.create(String.prototype, {
        constructor: {
            value: StringWrapper,
            enumerable: false,
            writable: true,
            configurable: true,
        },
    });
    Object.setPrototypeOf(StringWrapper, String);
    /** @class */ ((function (_super) {
        __extends$8(LazyJsonString, _super);
        function LazyJsonString() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LazyJsonString.prototype.deserializeJSON = function () {
            return JSON.parse(_super.prototype.toString.call(this));
        };
        LazyJsonString.prototype.toJSON = function () {
            return _super.prototype.toString.call(this);
        };
        LazyJsonString.fromObject = function (object) {
            if (object instanceof LazyJsonString) {
                return object;
            }
            else if (object instanceof String || typeof object === "string") {
                return new LazyJsonString(object);
            }
            return new LazyJsonString(JSON.stringify(object));
        };
        return LazyJsonString;
    })(StringWrapper));

    /**
     * Builds a proper UTC HttpDate timestamp from a Date object
     * since not all environments will have this as the expected
     * format.
     *
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString
     * > Prior to ECMAScript 2018, the format of the return value
     * > varied according to the platform. The most common return
     * > value was an RFC-1123 formatted date stamp, which is a
     * > slightly updated version of RFC-822 date stamps.
     */
    // Build indexes outside so we allocate them once.
    var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    // prettier-ignore
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
        var year = date.getUTCFullYear();
        var month = date.getUTCMonth();
        var dayOfWeek = date.getUTCDay();
        var dayOfMonthInt = date.getUTCDate();
        var hoursInt = date.getUTCHours();
        var minutesInt = date.getUTCMinutes();
        var secondsInt = date.getUTCSeconds();
        // Build 0 prefixed strings for contents that need to be
        // two digits and where we get an integer back.
        var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
        var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
        var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
        var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
        return days[dayOfWeek] + ", " + dayOfMonthString + " " + months[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
    }

    var SENSITIVE_STRING = "***SensitiveInformation***";

    /**
     * <fullname>Amazon Cognito Federated Identities</fullname>
     *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary
     *          credentials to mobile devices and other untrusted environments. It uniquely identifies a
     *          device and supplies the user with a consistent identity over the lifetime of an
     *          application.</p>
     *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or
     *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon
     *          Cognito user pool, and you can also choose to support unauthenticated access from your app.
     *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider
     *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS
     *          credentials.</p>
     *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide
     *          see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p>
     *          <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>
     */
    var CognitoIdentityClient = /** @class */ (function (_super) {
        __extends$6(CognitoIdentityClient, _super);
        function CognitoIdentityClient(configuration) {
            var _this = this;
            var _config_0 = __assign$g(__assign$g({}, ClientDefaultValues$1), configuration);
            var _config_1 = resolveRegionConfig(_config_0);
            var _config_2 = resolveEndpointsConfig(_config_1);
            var _config_3 = resolveAwsAuthConfig(_config_2);
            var _config_4 = resolveRetryConfig(_config_3);
            var _config_5 = resolveHostHeaderConfig(_config_4);
            var _config_6 = resolveUserAgentConfig(_config_5);
            _this = _super.call(this, _config_6) || this;
            _this.config = _config_6;
            _this.middlewareStack.use(getRetryPlugin(_this.config));
            _this.middlewareStack.use(getContentLengthPlugin(_this.config));
            _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
            _this.middlewareStack.use(getLoggerPlugin(_this.config));
            _this.middlewareStack.use(getUserAgentPlugin(_this.config));
            return _this;
        }
        CognitoIdentityClient.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        return CognitoIdentityClient;
    }(Client$1));

    var AmbiguousRoleResolutionType;
    (function (AmbiguousRoleResolutionType) {
        AmbiguousRoleResolutionType["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
        AmbiguousRoleResolutionType["DENY"] = "Deny";
    })(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
    var CognitoIdentityProvider;
    (function (CognitoIdentityProvider) {
        CognitoIdentityProvider.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
    var CreateIdentityPoolInput;
    (function (CreateIdentityPoolInput) {
        CreateIdentityPoolInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
    var IdentityPool;
    (function (IdentityPool) {
        IdentityPool.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(IdentityPool || (IdentityPool = {}));
    var InternalErrorException;
    (function (InternalErrorException) {
        InternalErrorException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(InternalErrorException || (InternalErrorException = {}));
    var InvalidParameterException;
    (function (InvalidParameterException) {
        InvalidParameterException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(InvalidParameterException || (InvalidParameterException = {}));
    var LimitExceededException;
    (function (LimitExceededException) {
        LimitExceededException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(LimitExceededException || (LimitExceededException = {}));
    var NotAuthorizedException;
    (function (NotAuthorizedException) {
        NotAuthorizedException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(NotAuthorizedException || (NotAuthorizedException = {}));
    var ResourceConflictException;
    (function (ResourceConflictException) {
        ResourceConflictException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ResourceConflictException || (ResourceConflictException = {}));
    var TooManyRequestsException;
    (function (TooManyRequestsException) {
        TooManyRequestsException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(TooManyRequestsException || (TooManyRequestsException = {}));
    var DeleteIdentitiesInput;
    (function (DeleteIdentitiesInput) {
        DeleteIdentitiesInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode["ACCESS_DENIED"] = "AccessDenied";
        ErrorCode["INTERNAL_SERVER_ERROR"] = "InternalServerError";
    })(ErrorCode || (ErrorCode = {}));
    var UnprocessedIdentityId;
    (function (UnprocessedIdentityId) {
        UnprocessedIdentityId.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
    var DeleteIdentitiesResponse;
    (function (DeleteIdentitiesResponse) {
        DeleteIdentitiesResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
    var DeleteIdentityPoolInput;
    (function (DeleteIdentityPoolInput) {
        DeleteIdentityPoolInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
    var ResourceNotFoundException;
    (function (ResourceNotFoundException) {
        ResourceNotFoundException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ResourceNotFoundException || (ResourceNotFoundException = {}));
    var DescribeIdentityInput;
    (function (DescribeIdentityInput) {
        DescribeIdentityInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(DescribeIdentityInput || (DescribeIdentityInput = {}));
    var IdentityDescription;
    (function (IdentityDescription) {
        IdentityDescription.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(IdentityDescription || (IdentityDescription = {}));
    var DescribeIdentityPoolInput;
    (function (DescribeIdentityPoolInput) {
        DescribeIdentityPoolInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
    var ExternalServiceException;
    (function (ExternalServiceException) {
        ExternalServiceException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ExternalServiceException || (ExternalServiceException = {}));
    var GetCredentialsForIdentityInput;
    (function (GetCredentialsForIdentityInput) {
        GetCredentialsForIdentityInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
    var Credentials$1;
    (function (Credentials) {
        Credentials.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(Credentials$1 || (Credentials$1 = {}));
    var GetCredentialsForIdentityResponse;
    (function (GetCredentialsForIdentityResponse) {
        GetCredentialsForIdentityResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
    var InvalidIdentityPoolConfigurationException;
    (function (InvalidIdentityPoolConfigurationException) {
        InvalidIdentityPoolConfigurationException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
    var GetIdInput;
    (function (GetIdInput) {
        GetIdInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetIdInput || (GetIdInput = {}));
    var GetIdResponse;
    (function (GetIdResponse) {
        GetIdResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetIdResponse || (GetIdResponse = {}));
    var GetIdentityPoolRolesInput;
    (function (GetIdentityPoolRolesInput) {
        GetIdentityPoolRolesInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
    var MappingRuleMatchType;
    (function (MappingRuleMatchType) {
        MappingRuleMatchType["CONTAINS"] = "Contains";
        MappingRuleMatchType["EQUALS"] = "Equals";
        MappingRuleMatchType["NOT_EQUAL"] = "NotEqual";
        MappingRuleMatchType["STARTS_WITH"] = "StartsWith";
    })(MappingRuleMatchType || (MappingRuleMatchType = {}));
    var MappingRule;
    (function (MappingRule) {
        MappingRule.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(MappingRule || (MappingRule = {}));
    var RulesConfigurationType;
    (function (RulesConfigurationType) {
        RulesConfigurationType.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(RulesConfigurationType || (RulesConfigurationType = {}));
    var RoleMappingType;
    (function (RoleMappingType) {
        RoleMappingType["RULES"] = "Rules";
        RoleMappingType["TOKEN"] = "Token";
    })(RoleMappingType || (RoleMappingType = {}));
    var RoleMapping;
    (function (RoleMapping) {
        RoleMapping.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(RoleMapping || (RoleMapping = {}));
    var GetIdentityPoolRolesResponse;
    (function (GetIdentityPoolRolesResponse) {
        GetIdentityPoolRolesResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
    var GetOpenIdTokenInput;
    (function (GetOpenIdTokenInput) {
        GetOpenIdTokenInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
    var GetOpenIdTokenResponse;
    (function (GetOpenIdTokenResponse) {
        GetOpenIdTokenResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
    var DeveloperUserAlreadyRegisteredException;
    (function (DeveloperUserAlreadyRegisteredException) {
        DeveloperUserAlreadyRegisteredException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
    var GetOpenIdTokenForDeveloperIdentityInput;
    (function (GetOpenIdTokenForDeveloperIdentityInput) {
        GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
    var GetOpenIdTokenForDeveloperIdentityResponse;
    (function (GetOpenIdTokenForDeveloperIdentityResponse) {
        GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {}));
    var ListIdentitiesInput;
    (function (ListIdentitiesInput) {
        ListIdentitiesInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ListIdentitiesInput || (ListIdentitiesInput = {}));
    var ListIdentitiesResponse;
    (function (ListIdentitiesResponse) {
        ListIdentitiesResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
    var ListIdentityPoolsInput;
    (function (ListIdentityPoolsInput) {
        ListIdentityPoolsInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
    var IdentityPoolShortDescription;
    (function (IdentityPoolShortDescription) {
        IdentityPoolShortDescription.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
    var ListIdentityPoolsResponse;
    (function (ListIdentityPoolsResponse) {
        ListIdentityPoolsResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
    var ListTagsForResourceInput;
    (function (ListTagsForResourceInput) {
        ListTagsForResourceInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
    var ListTagsForResourceResponse;
    (function (ListTagsForResourceResponse) {
        ListTagsForResourceResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
    var LookupDeveloperIdentityInput;
    (function (LookupDeveloperIdentityInput) {
        LookupDeveloperIdentityInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
    var LookupDeveloperIdentityResponse;
    (function (LookupDeveloperIdentityResponse) {
        LookupDeveloperIdentityResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
    var MergeDeveloperIdentitiesInput;
    (function (MergeDeveloperIdentitiesInput) {
        MergeDeveloperIdentitiesInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
    var MergeDeveloperIdentitiesResponse;
    (function (MergeDeveloperIdentitiesResponse) {
        MergeDeveloperIdentitiesResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
    var ConcurrentModificationException;
    (function (ConcurrentModificationException) {
        ConcurrentModificationException.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(ConcurrentModificationException || (ConcurrentModificationException = {}));
    var SetIdentityPoolRolesInput;
    (function (SetIdentityPoolRolesInput) {
        SetIdentityPoolRolesInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
    var TagResourceInput;
    (function (TagResourceInput) {
        TagResourceInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(TagResourceInput || (TagResourceInput = {}));
    var TagResourceResponse;
    (function (TagResourceResponse) {
        TagResourceResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(TagResourceResponse || (TagResourceResponse = {}));
    var UnlinkDeveloperIdentityInput;
    (function (UnlinkDeveloperIdentityInput) {
        UnlinkDeveloperIdentityInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
    var UnlinkIdentityInput;
    (function (UnlinkIdentityInput) {
        UnlinkIdentityInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
    var UntagResourceInput;
    (function (UntagResourceInput) {
        UntagResourceInput.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(UntagResourceInput || (UntagResourceInput = {}));
    var UntagResourceResponse;
    (function (UntagResourceResponse) {
        UntagResourceResponse.filterSensitiveLog = function (obj) { return (__assign$g({}, obj)); };
    })(UntagResourceResponse || (UntagResourceResponse = {}));

    var serializeAws_json1_1GetCredentialsForIdentityCommand = function (input, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var headers, body;
        return __generator$f(this, function (_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity",
            };
            body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    }); };
    var serializeAws_json1_1GetIdCommand = function (input, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var headers, body;
        return __generator$f(this, function (_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetId",
            };
            body = JSON.stringify(serializeAws_json1_1GetIdInput(input));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    }); };
    var deserializeAws_json1_1GetCredentialsForIdentityCommand = function (output, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var data, contents, response;
        return __generator$f(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody$1(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data);
                    response = __assign$g({ $metadata: deserializeMetadata$1(output) }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    }); };
    var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function (output, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return __generator$f(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign$g({}, output)];
                    _l = {};
                    return [4 /*yield*/, parseBody$1(output.body, context)];
                case 1:
                    parsedOutput = __assign$g.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch (_b) {
                        case "ExternalServiceException": return [3 /*break*/, 2];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException": return [3 /*break*/, 2];
                        case "InternalErrorException": return [3 /*break*/, 4];
                        case "com.amazonaws.cognitoidentity#InternalErrorException": return [3 /*break*/, 4];
                        case "InvalidIdentityPoolConfigurationException": return [3 /*break*/, 6];
                        case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException": return [3 /*break*/, 6];
                        case "InvalidParameterException": return [3 /*break*/, 8];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException": return [3 /*break*/, 8];
                        case "NotAuthorizedException": return [3 /*break*/, 10];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException": return [3 /*break*/, 10];
                        case "ResourceConflictException": return [3 /*break*/, 12];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException": return [3 /*break*/, 12];
                        case "ResourceNotFoundException": return [3 /*break*/, 14];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException": return [3 /*break*/, 14];
                        case "TooManyRequestsException": return [3 /*break*/, 16];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _c = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput)];
                case 3:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput)];
                case 5:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput)];
                case 7:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput)];
                case 9:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput)];
                case 11:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput)];
                case 13:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput)];
                case 15:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput)];
                case 17:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign$g(__assign$g({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata$1(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_json1_1GetIdCommand = function (output, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var data, contents, response;
        return __generator$f(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_json1_1GetIdCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody$1(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetIdResponse(data);
                    response = __assign$g({ $metadata: deserializeMetadata$1(output) }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    }); };
    var deserializeAws_json1_1GetIdCommandError = function (output, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return __generator$f(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign$g({}, output)];
                    _l = {};
                    return [4 /*yield*/, parseBody$1(output.body, context)];
                case 1:
                    parsedOutput = __assign$g.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch (_b) {
                        case "ExternalServiceException": return [3 /*break*/, 2];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException": return [3 /*break*/, 2];
                        case "InternalErrorException": return [3 /*break*/, 4];
                        case "com.amazonaws.cognitoidentity#InternalErrorException": return [3 /*break*/, 4];
                        case "InvalidParameterException": return [3 /*break*/, 6];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException": return [3 /*break*/, 6];
                        case "LimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.cognitoidentity#LimitExceededException": return [3 /*break*/, 8];
                        case "NotAuthorizedException": return [3 /*break*/, 10];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException": return [3 /*break*/, 10];
                        case "ResourceConflictException": return [3 /*break*/, 12];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException": return [3 /*break*/, 12];
                        case "ResourceNotFoundException": return [3 /*break*/, 14];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException": return [3 /*break*/, 14];
                        case "TooManyRequestsException": return [3 /*break*/, 16];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _c = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput)];
                case 3:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput)];
                case 5:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput)];
                case 7:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput)];
                case 9:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput)];
                case 11:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput)];
                case 13:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput)];
                case 15:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput)];
                case 17:
                    response = __assign$g.apply(void 0, [__assign$g.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata$1(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign$g(__assign$g({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata$1(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_json1_1ExternalServiceExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ExternalServiceException(body);
            contents = __assign$g({ name: "ExternalServiceException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1InternalErrorExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InternalErrorException(body);
            contents = __assign$g({ name: "InternalErrorException", $fault: "server", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body);
            contents = __assign$g({ name: "InvalidIdentityPoolConfigurationException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1InvalidParameterExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidParameterException(body);
            contents = __assign$g({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1LimitExceededException(body);
            contents = __assign$g({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1NotAuthorizedExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1NotAuthorizedException(body);
            contents = __assign$g({ name: "NotAuthorizedException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1ResourceConflictExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceConflictException(body);
            contents = __assign$g({ name: "ResourceConflictException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceNotFoundException(body);
            contents = __assign$g({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_json1_1TooManyRequestsExceptionResponse = function (parsedOutput, context) { return __awaiter$f(void 0, void 0, void 0, function () {
        var body, deserialized, contents;
        return __generator$f(this, function (_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1TooManyRequestsException(body);
            contents = __assign$g({ name: "TooManyRequestsException", $fault: "client", $metadata: deserializeMetadata$1(parsedOutput) }, deserialized);
            return [2 /*return*/, contents];
        });
    }); };
    var serializeAws_json1_1GetCredentialsForIdentityInput = function (input, context) {
        return __assign$g(__assign$g(__assign$g({}, (input.CustomRoleArn !== undefined && input.CustomRoleArn !== null && { CustomRoleArn: input.CustomRoleArn })), (input.IdentityId !== undefined && input.IdentityId !== null && { IdentityId: input.IdentityId })), (input.Logins !== undefined &&
            input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins) }));
    };
    var serializeAws_json1_1GetIdInput = function (input, context) {
        return __assign$g(__assign$g(__assign$g({}, (input.AccountId !== undefined && input.AccountId !== null && { AccountId: input.AccountId })), (input.IdentityPoolId !== undefined &&
            input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId })), (input.Logins !== undefined &&
            input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins) }));
    };
    var serializeAws_json1_1LoginsMap = function (input, context) {
        return Object.entries(input).reduce(function (acc, _a) {
            var _b;
            var _c = __read$6(_a, 2), key = _c[0], value = _c[1];
            if (value === null) {
                return acc;
            }
            return __assign$g(__assign$g({}, acc), (_b = {}, _b[key] = value, _b));
        }, {});
    };
    var deserializeAws_json1_1Credentials = function (output, context) {
        return {
            AccessKeyId: output.AccessKeyId !== undefined && output.AccessKeyId !== null ? output.AccessKeyId : undefined,
            Expiration: output.Expiration !== undefined && output.Expiration !== null
                ? new Date(Math.round(output.Expiration * 1000))
                : undefined,
            SecretKey: output.SecretKey !== undefined && output.SecretKey !== null ? output.SecretKey : undefined,
            SessionToken: output.SessionToken !== undefined && output.SessionToken !== null ? output.SessionToken : undefined,
        };
    };
    var deserializeAws_json1_1ExternalServiceException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1GetCredentialsForIdentityResponse = function (output, context) {
        return {
            Credentials: output.Credentials !== undefined && output.Credentials !== null
                ? deserializeAws_json1_1Credentials(output.Credentials)
                : undefined,
            IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        };
    };
    var deserializeAws_json1_1GetIdResponse = function (output, context) {
        return {
            IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        };
    };
    var deserializeAws_json1_1InternalErrorException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1InvalidParameterException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1LimitExceededException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1NotAuthorizedException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1ResourceConflictException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeAws_json1_1TooManyRequestsException = function (output, context) {
        return {
            message: output.message !== undefined && output.message !== null ? output.message : undefined,
        };
    };
    var deserializeMetadata$1 = function (output) {
        var _a;
        return ({
            httpStatusCode: output.statusCode,
            requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
            extendedRequestId: output.headers["x-amz-id-2"],
            cfId: output.headers["x-amz-cf-id"],
        });
    };
    // Collect low-level response body stream to Uint8Array.
    var collectBody$2 = function (streamBody, context) {
        if (streamBody === void 0) { streamBody = new Uint8Array(); }
        if (streamBody instanceof Uint8Array) {
            return Promise.resolve(streamBody);
        }
        return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    // Encode Uint8Array data into string with utf-8.
    var collectBodyString$2 = function (streamBody, context) {
        return collectBody$2(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
    };
    var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter$f(void 0, void 0, void 0, function () {
        var _a, hostname, _b, protocol, port, contents;
        return __generator$f(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    contents = {
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        path: path,
                        headers: headers,
                    };
                    if (resolvedHostname !== undefined) {
                        contents.hostname = resolvedHostname;
                    }
                    if (body !== undefined) {
                        contents.body = body;
                    }
                    return [2 /*return*/, new HttpRequest(contents)];
            }
        });
    }); };
    var parseBody$1 = function (streamBody, context) {
        return collectBodyString$2(streamBody, context).then(function (encoded) {
            if (encoded.length) {
                return JSON.parse(encoded);
            }
            return {};
        });
    };
    /**
     * Load an error code for the aws.rest-json-1.1 protocol.
     */
    var loadRestJsonErrorCode = function (output, data) {
        var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
        var sanitizeErrorCode = function (rawValue) {
            var cleanValue = rawValue;
            if (cleanValue.indexOf(":") >= 0) {
                cleanValue = cleanValue.split(":")[0];
            }
            if (cleanValue.indexOf("#") >= 0) {
                cleanValue = cleanValue.split("#")[1];
            }
            return cleanValue;
        };
        var headerKey = findKey(output.headers, "x-amzn-errortype");
        if (headerKey !== undefined) {
            return sanitizeErrorCode(output.headers[headerKey]);
        }
        if (data.code !== undefined) {
            return sanitizeErrorCode(data.code);
        }
        if (data["__type"] !== undefined) {
            return sanitizeErrorCode(data["__type"]);
        }
        return "";
    };

    var deserializerMiddleware = function (options, deserializer) { return function (next, context) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var response, parsed;
        return __generator$j(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, next(args)];
                case 1:
                    response = (_a.sent()).response;
                    return [4 /*yield*/, deserializer(response, options)];
                case 2:
                    parsed = _a.sent();
                    return [2 /*return*/, {
                            response: response,
                            output: parsed,
                        }];
            }
        });
    }); }; }; };

    var serializerMiddleware = function (options, serializer) { return function (next, context) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var request;
        return __generator$j(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, serializer(args.input, options)];
                case 1:
                    request = _a.sent();
                    return [2 /*return*/, next(__assign$i(__assign$i({}, args), { request: request }))];
            }
        });
    }); }; }; };

    var deserializerMiddlewareOption = {
        name: "deserializerMiddleware",
        step: "deserialize",
        tags: ["DESERIALIZER"],
        override: true,
    };
    var serializerMiddlewareOption = {
        name: "serializerMiddleware",
        step: "serialize",
        tags: ["SERIALIZER"],
        override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
        return {
            applyToStack: function (commandStack) {
                commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
                commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
            },
        };
    }

    /**
     * <p>Returns credentials for the provided identity ID. Any provided logins will be
     *          validated against supported login providers. If the token is for
     *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
     *          with the appropriate role for the token.</p>
     *          <p>This is a public API. You do not need any credentials to call this API.</p>
     */
    var GetCredentialsForIdentityCommand = /** @class */ (function (_super) {
        __extends$6(GetCredentialsForIdentityCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function GetCredentialsForIdentityCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        GetCredentialsForIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "CognitoIdentityClient";
            var commandName = "GetCredentialsForIdentityCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,
                outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        GetCredentialsForIdentityCommand.prototype.serialize = function (input, context) {
            return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);
        };
        GetCredentialsForIdentityCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);
        };
        return GetCredentialsForIdentityCommand;
    }(Command));

    /**
     * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
     *          implicit linked account.</p>
     *          <p>This is a public API. You do not need any credentials to call this API.</p>
     */
    var GetIdCommand = /** @class */ (function (_super) {
        __extends$6(GetIdCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function GetIdCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        GetIdCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "CognitoIdentityClient";
            var commandName = "GetIdCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: GetIdInput.filterSensitiveLog,
                outputFilterSensitiveLog: GetIdResponse.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        GetIdCommand.prototype.serialize = function (input, context) {
            return serializeAws_json1_1GetIdCommand(input, context);
        };
        GetIdCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_json1_1GetIdCommand(output, context);
        };
        return GetIdCommand;
    }(Command));

    /**
     * An error representing a failure of an individual credential provider.
     *
     * This error class has special meaning to the {@link chain} method. If a
     * provider in the chain is rejected with an error, the chain will only proceed
     * to the next provider if the value of the `tryNextLink` property on the error
     * is truthy. This allows individual providers to halt the chain and also
     * ensures the chain will stop if an entirely unexpected error is encountered.
     */
    var ProviderError = /** @class */ (function (_super) {
        __extends$8(ProviderError, _super);
        function ProviderError(message, tryNextLink) {
            if (tryNextLink === void 0) { tryNextLink = true; }
            var _this = _super.call(this, message) || this;
            _this.tryNextLink = tryNextLink;
            return _this;
        }
        return ProviderError;
    }(Error));

    /**
     * @internal
     */
    function resolveLogins(logins) {
        return Promise.all(Object.keys(logins).reduce(function (arr, name) {
            var tokenOrProvider = logins[name];
            if (typeof tokenOrProvider === "string") {
                arr.push([name, tokenOrProvider]);
            }
            else {
                arr.push(tokenOrProvider().then(function (token) { return [name, token]; }));
            }
            return arr;
        }, [])).then(function (resolvedPairs) {
            return resolvedPairs.reduce(function (logins, _a) {
                var _b = __read$9(_a, 2), key = _b[0], value = _b[1];
                logins[key] = value;
                return logins;
            }, {});
        });
    }

    /**
     * Retrieves temporary AWS credentials using Amazon Cognito's
     * `GetCredentialsForIdentity` operation.
     *
     * Results from this function call are not cached internally.
     */
    function fromCognitoIdentity(parameters) {
        var _this = this;
        return function () { return __awaiter$j(_this, void 0, void 0, function () {
            var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
            var _j;
            return __generator$j(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _f = (_e = parameters.client).send;
                        _g = GetCredentialsForIdentityCommand.bind;
                        _j = {
                            CustomRoleArn: parameters.customRoleArn,
                            IdentityId: parameters.identityId
                        };
                        if (!parameters.logins) return [3 /*break*/, 2];
                        return [4 /*yield*/, resolveLogins(parameters.logins)];
                    case 1:
                        _h = _k.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _h = undefined;
                        _k.label = 3;
                    case 3: return [4 /*yield*/, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h,
                                    _j)]))()])];
                    case 4:
                        _a = (_k.sent()).Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
                        return [2 /*return*/, {
                                identityId: parameters.identityId,
                                accessKeyId: AccessKeyId,
                                secretAccessKey: SecretKey,
                                sessionToken: SessionToken,
                                expiration: Expiration,
                            }];
                }
            });
        }); };
    }
    function throwOnMissingAccessKeyId() {
        throw new ProviderError("Response from Amazon Cognito contained no access key ID");
    }
    function throwOnMissingCredentials() {
        throw new ProviderError("Response from Amazon Cognito contained no credentials");
    }
    function throwOnMissingSecretKey() {
        throw new ProviderError("Response from Amazon Cognito contained no secret key");
    }

    var STORE_NAME = "IdentityIds";
    var IndexedDbStorage = /** @class */ (function () {
        function IndexedDbStorage(dbName) {
            if (dbName === void 0) { dbName = "aws:cognito-identity-ids"; }
            this.dbName = dbName;
        }
        IndexedDbStorage.prototype.getItem = function (key) {
            return this.withObjectStore("readonly", function (store) {
                var req = store.get(key);
                return new Promise(function (resolve) {
                    req.onerror = function () { return resolve(null); };
                    req.onsuccess = function () { return resolve(req.result ? req.result.value : null); };
                });
            }).catch(function () { return null; });
        };
        IndexedDbStorage.prototype.removeItem = function (key) {
            return this.withObjectStore("readwrite", function (store) {
                var req = store.delete(key);
                return new Promise(function (resolve, reject) {
                    req.onerror = function () { return reject(req.error); };
                    req.onsuccess = function () { return resolve(); };
                });
            });
        };
        IndexedDbStorage.prototype.setItem = function (id, value) {
            return this.withObjectStore("readwrite", function (store) {
                var req = store.put({ id: id, value: value });
                return new Promise(function (resolve, reject) {
                    req.onerror = function () { return reject(req.error); };
                    req.onsuccess = function () { return resolve(); };
                });
            });
        };
        IndexedDbStorage.prototype.getDb = function () {
            var openDbRequest = self.indexedDB.open(this.dbName, 1);
            return new Promise(function (resolve, reject) {
                openDbRequest.onsuccess = function () {
                    resolve(openDbRequest.result);
                };
                openDbRequest.onerror = function () {
                    reject(openDbRequest.error);
                };
                openDbRequest.onblocked = function () {
                    reject(new Error("Unable to access DB"));
                };
                openDbRequest.onupgradeneeded = function () {
                    var db = openDbRequest.result;
                    db.onerror = function () {
                        reject(new Error("Failed to create object store"));
                    };
                    db.createObjectStore(STORE_NAME, { keyPath: "id" });
                };
            });
        };
        IndexedDbStorage.prototype.withObjectStore = function (mode, action) {
            return this.getDb().then(function (db) {
                var tx = db.transaction(STORE_NAME, mode);
                tx.oncomplete = function () { return db.close(); };
                return new Promise(function (resolve, reject) {
                    tx.onerror = function () { return reject(tx.error); };
                    resolve(action(tx.objectStore(STORE_NAME)));
                }).catch(function (err) {
                    db.close();
                    throw err;
                });
            });
        };
        return IndexedDbStorage;
    }());

    var InMemoryStorage = /** @class */ (function () {
        function InMemoryStorage(store) {
            if (store === void 0) { store = {}; }
            this.store = store;
        }
        InMemoryStorage.prototype.getItem = function (key) {
            if (key in this.store) {
                return this.store[key];
            }
            return null;
        };
        InMemoryStorage.prototype.removeItem = function (key) {
            delete this.store[key];
        };
        InMemoryStorage.prototype.setItem = function (key, value) {
            this.store[key] = value;
        };
        return InMemoryStorage;
    }());

    var inMemoryStorage = new InMemoryStorage();
    function localStorage$1() {
        if (typeof self === "object" && self.indexedDB) {
            return new IndexedDbStorage();
        }
        if (typeof window === "object" && window.localStorage) {
            return window.localStorage;
        }
        return inMemoryStorage;
    }

    /**
     * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`
     * operation, then generates temporary AWS credentials using Amazon Cognito's
     * `GetCredentialsForIdentity` operation.
     *
     * Results from `GetId` are cached internally, but results from
     * `GetCredentialsForIdentity` are not.
     */
    function fromCognitoIdentityPool(_a) {
        var _this = this;
        var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? localStorage$1() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined : _c;
        var cacheKey = userIdentifier ? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier : undefined;
        var provider = function () { return __awaiter$j(_this, void 0, void 0, function () {
            var identityId, _a, _b, IdentityId, _c, _d, _e, _f;
            var _g;
            return __generator$j(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _a = cacheKey;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, cache.getItem(cacheKey)];
                    case 1:
                        _a = (_h.sent());
                        _h.label = 2;
                    case 2:
                        identityId = _a;
                        if (!!identityId) return [3 /*break*/, 7];
                        _d = (_c = client).send;
                        _e = GetIdCommand.bind;
                        _g = {
                            AccountId: accountId,
                            IdentityPoolId: identityPoolId
                        };
                        if (!logins) return [3 /*break*/, 4];
                        return [4 /*yield*/, resolveLogins(logins)];
                    case 3:
                        _f = _h.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _f = undefined;
                        _h.label = 5;
                    case 5: return [4 /*yield*/, _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f,
                                    _g)]))()])];
                    case 6:
                        _b = (_h.sent()).IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;
                        identityId = IdentityId;
                        if (cacheKey) {
                            Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () { });
                        }
                        _h.label = 7;
                    case 7:
                        provider = fromCognitoIdentity({
                            client: client,
                            customRoleArn: customRoleArn,
                            logins: logins,
                            identityId: identityId,
                        });
                        return [2 /*return*/, provider()];
                }
            });
        }); };
        return function () {
            return provider().catch(function (err) { return __awaiter$j(_this, void 0, void 0, function () {
                return __generator$j(this, function (_a) {
                    if (cacheKey) {
                        Promise.resolve(cache.removeItem(cacheKey)).catch(function () { });
                    }
                    throw err;
                });
            }); });
        };
    }
    function throwOnMissingId() {
        throw new ProviderError("Response from Amazon Cognito contained no identity ID");
    }

    var __assign$f = (undefined && undefined.__assign) || function () {
        __assign$f = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$f.apply(this, arguments);
    };
    var __awaiter$e = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$e = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var logger$j = new ConsoleLogger('Credentials');
    var CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future
    var CredentialsClass = /** @class */ (function () {
        function CredentialsClass(config) {
            this._gettingCredPromise = null;
            this._refreshHandlers = {};
            // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials
            this.Auth = undefined;
            this.configure(config);
            this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;
            this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;
        }
        CredentialsClass.prototype.getModuleName = function () {
            return 'Credentials';
        };
        CredentialsClass.prototype.getCredSource = function () {
            return this._credentials_source;
        };
        CredentialsClass.prototype.configure = function (config) {
            if (!config)
                return this._config || {};
            this._config = Object.assign({}, this._config, config);
            var refreshHandlers = this._config.refreshHandlers;
            // If the developer has provided an object of refresh handlers,
            // then we can merge the provided handlers with the current handlers.
            if (refreshHandlers) {
                this._refreshHandlers = __assign$f(__assign$f({}, this._refreshHandlers), refreshHandlers);
            }
            this._storage = this._config.storage;
            if (!this._storage) {
                this._storage = new StorageHelper$1().getStorage();
            }
            this._storageSync = Promise.resolve();
            if (typeof this._storage['sync'] === 'function') {
                this._storageSync = this._storage['sync']();
            }
            return this._config;
        };
        CredentialsClass.prototype.get = function () {
            logger$j.debug('getting credentials');
            return this._pickupCredentials();
        };
        CredentialsClass.prototype._pickupCredentials = function () {
            logger$j.debug('picking up credentials');
            if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
                logger$j.debug('getting new cred promise');
                this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
            }
            else {
                logger$j.debug('getting old cred promise');
            }
            return this._gettingCredPromise;
        };
        CredentialsClass.prototype._keepAlive = function () {
            return __awaiter$e(this, void 0, void 0, function () {
                var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
                return __generator$e(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger$j.debug('checking if credentials exists and not expired');
                            cred = this._credentials;
                            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
                                logger$j.debug('credentials not changed and not expired, directly return');
                                return [2 /*return*/, Promise.resolve(cred)];
                            }
                            logger$j.debug('need to get a new credential or refresh the existing one');
                            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;
                            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {
                                return [2 /*return*/, Promise.reject('No Auth module registered in Amplify')];
                            }
                            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];
                            logger$j.debug('ttl has passed but token is not yet expired');
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, Auth.currentUserPoolUser()];
                        case 2:
                            user_1 = _b.sent();
                            return [4 /*yield*/, Auth.currentSession()];
                        case 3:
                            session = _b.sent();
                            refreshToken_1 = session.refreshToken;
                            refreshRequest = new Promise(function (res, rej) {
                                user_1.refreshSession(refreshToken_1, function (err, data) {
                                    return err ? rej(err) : res(data);
                                });
                            });
                            return [4 /*yield*/, refreshRequest];
                        case 4:
                            _b.sent(); // note that rejections will be caught and handled in the catch block.
                            return [3 /*break*/, 6];
                        case 5:
                            err_1 = _b.sent();
                            // should not throw because user might just be on guest access or is authenticated through federation
                            logger$j.debug('Error attempting to refreshing the session', err_1);
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/, Auth.currentUserCredentials()];
                    }
                });
            });
        };
        CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {
            logger$j.debug('Getting federated credentials');
            var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
            var expires_at = federatedInfo.expires_at;
            // Make sure expires_at is in millis
            expires_at =
                new Date(expires_at).getFullYear() === 1970
                    ? expires_at * 1000
                    : expires_at;
            var that = this;
            logger$j.debug('checking if federated jwt token expired');
            if (expires_at > new Date().getTime()) {
                // if not expired
                logger$j.debug('token not expired');
                return this._setCredentialsFromFederation({
                    provider: provider,
                    token: token,
                    user: user,
                    identity_id: identity_id,
                    expires_at: expires_at,
                });
            }
            else {
                // if refresh handler exists
                if (that._refreshHandlers[provider] &&
                    typeof that._refreshHandlers[provider] === 'function') {
                    logger$j.debug('getting refreshed jwt token from federation provider');
                    return this._providerRefreshWithRetry({
                        refreshHandler: that._refreshHandlers[provider],
                        provider: provider,
                        user: user,
                    });
                }
                else {
                    logger$j.debug('no refresh handler for provider:', provider);
                    this.clear();
                    return Promise.reject('no refresh handler for provider');
                }
            }
        };
        CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {
            var _this = this;
            var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
            var MAX_DELAY_MS = 10 * 1000;
            // refreshHandler will retry network errors, otherwise it will
            // return NonRetryableError to break out of jitteredExponentialRetry
            return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)
                .then(function (data) {
                logger$j.debug('refresh federated token sucessfully', data);
                return _this._setCredentialsFromFederation({
                    provider: provider,
                    token: data.token,
                    user: user,
                    identity_id: data.identity_id,
                    expires_at: data.expires_at,
                });
            })
                .catch(function (e) {
                var isNetworkError = typeof e === 'string' &&
                    e.toLowerCase().lastIndexOf('network error', e.length) === 0;
                if (!isNetworkError) {
                    _this.clear();
                }
                logger$j.debug('refresh federated token failed', e);
                return Promise.reject('refreshing federation token failed: ' + e);
            });
        };
        CredentialsClass.prototype._isExpired = function (credentials) {
            if (!credentials) {
                logger$j.debug('no credentials for expiration check');
                return true;
            }
            logger$j.debug('are these credentials expired?', credentials);
            var ts = Date.now();
            /* returns date object.
                https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26
            */
            var expiration = credentials.expiration;
            return expiration.getTime() <= ts;
        };
        CredentialsClass.prototype._isPastTTL = function () {
            return this._nextCredentialsRefresh <= Date.now();
        };
        CredentialsClass.prototype._setCredentialsForGuest = function () {
            return __awaiter$e(this, void 0, void 0, function () {
                var _a, identityPoolId, region, mandatorySignIn, identityId, e_1, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;
                var _this = this;
                return __generator$e(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger$j.debug('setting credentials for guest');
                            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;
                            if (mandatorySignIn) {
                                return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];
                            }
                            if (!identityPoolId) {
                                logger$j.debug('No Cognito Identity pool provided for unauthenticated access');
                                return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];
                            }
                            if (!region) {
                                logger$j.debug('region is not configured for getting the credentials');
                                return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];
                            }
                            identityId = undefined;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._storageSync];
                        case 2:
                            _b.sent();
                            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);
                            this._identityId = identityId;
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _b.sent();
                            logger$j.debug('Failed to get the cached identityId', e_1);
                            return [3 /*break*/, 4];
                        case 4:
                            cognitoClient = new CognitoIdentityClient({
                                region: region,
                                customUserAgent: getAmplifyUserAgent(),
                            });
                            credentials = undefined;
                            if (identityId) {
                                cognitoIdentityParams = {
                                    identityId: identityId,
                                    client: cognitoClient,
                                };
                                credentials = fromCognitoIdentity(cognitoIdentityParams)();
                            }
                            else {
                                credentialsProvider = function () { return __awaiter$e(_this, void 0, void 0, function () {
                                    var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                                    return __generator$e(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, cognitoClient.send(new GetIdCommand({
                                                    IdentityPoolId: identityPoolId,
                                                }))];
                                            case 1:
                                                IdentityId = (_a.sent()).IdentityId;
                                                this._identityId = IdentityId;
                                                cognitoIdentityParams = {
                                                    client: cognitoClient,
                                                    identityId: IdentityId,
                                                };
                                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);
                                                return [2 /*return*/, credentialsFromCognitoIdentity()];
                                        }
                                    });
                                }); };
                                credentials = credentialsProvider().catch(function (err) { return __awaiter$e(_this, void 0, void 0, function () {
                                    return __generator$e(this, function (_a) {
                                        throw err;
                                    });
                                }); });
                            }
                            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)
                                    .then(function (res) {
                                    return res;
                                })
                                    .catch(function (e) { return __awaiter$e(_this, void 0, void 0, function () {
                                    var credentialsProvider;
                                    var _this = this;
                                    return __generator$e(this, function (_a) {
                                        // If identity id is deleted in the console, we make one attempt to recreate it
                                        // and remove existing id from cache.
                                        if (e.name === 'ResourceNotFoundException' &&
                                            e.message === "Identity '" + identityId + "' not found.") {
                                            logger$j.debug('Failed to load guest credentials');
                                            this._storage.removeItem('CognitoIdentityId-' + identityPoolId);
                                            credentialsProvider = function () { return __awaiter$e(_this, void 0, void 0, function () {
                                                var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                                                return __generator$e(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, cognitoClient.send(new GetIdCommand({
                                                                IdentityPoolId: identityPoolId,
                                                            }))];
                                                        case 1:
                                                            IdentityId = (_a.sent()).IdentityId;
                                                            this._identityId = IdentityId;
                                                            cognitoIdentityParams = {
                                                                client: cognitoClient,
                                                                identityId: IdentityId,
                                                            };
                                                            credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);
                                                            return [2 /*return*/, credentialsFromCognitoIdentity()];
                                                    }
                                                });
                                            }); };
                                            credentials = credentialsProvider().catch(function (err) { return __awaiter$e(_this, void 0, void 0, function () {
                                                return __generator$e(this, function (_a) {
                                                    throw err;
                                                });
                                            }); });
                                            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];
                                        }
                                        else {
                                            return [2 /*return*/, e];
                                        }
                                    });
                                }); })];
                    }
                });
            });
        };
        CredentialsClass.prototype._setCredentialsFromFederation = function (params) {
            var provider = params.provider, token = params.token, identity_id = params.identity_id;
            var domains = {
                google: 'accounts.google.com',
                facebook: 'graph.facebook.com',
                amazon: 'www.amazon.com',
                developer: 'cognito-identity.amazonaws.com',
            };
            // Use custom provider url instead of the predefined ones
            var domain = domains[provider] || provider;
            if (!domain) {
                return Promise.reject('You must specify a federated provider');
            }
            var logins = {};
            logins[domain] = token;
            var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;
            if (!identityPoolId) {
                logger$j.debug('No Cognito Federated Identity pool provided');
                return Promise.reject('No Cognito Federated Identity pool provided');
            }
            if (!region) {
                logger$j.debug('region is not configured for getting the credentials');
                return Promise.reject('region is not configured for getting the credentials');
            }
            var cognitoClient = new CognitoIdentityClient({
                region: region,
                customUserAgent: getAmplifyUserAgent(),
            });
            var credentials = undefined;
            if (identity_id) {
                var cognitoIdentityParams = {
                    identityId: identity_id,
                    logins: logins,
                    client: cognitoClient,
                };
                credentials = fromCognitoIdentity(cognitoIdentityParams)();
            }
            else {
                var cognitoIdentityParams = {
                    logins: logins,
                    identityPoolId: identityPoolId,
                    client: cognitoClient,
                };
                credentials = fromCognitoIdentityPool(cognitoIdentityParams)();
            }
            return this._loadCredentials(credentials, 'federated', true, params);
        };
        CredentialsClass.prototype._setCredentialsFromSession = function (session) {
            var _this = this;
            logger$j.debug('set credentials from session');
            var idToken = session.getIdToken().getJwtToken();
            var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;
            if (!identityPoolId) {
                logger$j.debug('No Cognito Federated Identity pool provided');
                return Promise.reject('No Cognito Federated Identity pool provided');
            }
            if (!region) {
                logger$j.debug('region is not configured for getting the credentials');
                return Promise.reject('region is not configured for getting the credentials');
            }
            var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;
            var logins = {};
            logins[key] = idToken;
            var cognitoClient = new CognitoIdentityClient({
                region: region,
                customUserAgent: getAmplifyUserAgent(),
            });
            /*
                Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:
                https://git.io/JeDxU

                Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.
            */
            var credentialsProvider = function () { return __awaiter$e(_this, void 0, void 0, function () {
                var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                return __generator$e(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, cognitoClient.send(new GetIdCommand({
                                IdentityPoolId: identityPoolId,
                                Logins: logins,
                            }))];
                        case 1:
                            IdentityId = (_a.sent()).IdentityId;
                            this._identityId = IdentityId;
                            cognitoIdentityParams = {
                                client: cognitoClient,
                                logins: logins,
                                identityId: IdentityId,
                            };
                            credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);
                            return [2 /*return*/, credentialsFromCognitoIdentity()];
                    }
                });
            }); };
            var credentials = credentialsProvider().catch(function (err) { return __awaiter$e(_this, void 0, void 0, function () {
                return __generator$e(this, function (_a) {
                    throw err;
                });
            }); });
            return this._loadCredentials(credentials, 'userPool', true, null);
        };
        CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {
            var _this = this;
            var that = this;
            var identityPoolId = this._config.identityPoolId;
            return new Promise(function (res, rej) {
                credentials
                    .then(function (credentials) { return __awaiter$e(_this, void 0, void 0, function () {
                    var user, provider, token, expires_at, identity_id, e_2;
                    return __generator$e(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                logger$j.debug('Load credentials successfully', credentials);
                                if (this._identityId && !credentials.identityId) {
                                    credentials['identityId'] = this._identityId;
                                }
                                that._credentials = credentials;
                                that._credentials.authenticated = authenticated;
                                that._credentials_source = source;
                                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                                if (source === 'federated') {
                                    user = Object.assign({ id: this._credentials.identityId }, info.user);
                                    provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                                    try {
                                        this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({
                                            provider: provider,
                                            token: token,
                                            user: user,
                                            expires_at: expires_at,
                                            identity_id: identity_id,
                                        }));
                                    }
                                    catch (e) {
                                        logger$j.debug('Failed to put federated info into auth storage', e);
                                    }
                                }
                                if (!(source === 'guest')) return [3 /*break*/, 4];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this._storageSync];
                            case 2:
                                _a.sent();
                                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId // TODO: IdentityId is currently not returned by fromCognitoIdentityPool()
                                );
                                return [3 /*break*/, 4];
                            case 3:
                                e_2 = _a.sent();
                                logger$j.debug('Failed to cache identityId', e_2);
                                return [3 /*break*/, 4];
                            case 4:
                                res(that._credentials);
                                return [2 /*return*/];
                        }
                    });
                }); })
                    .catch(function (err) {
                    if (err) {
                        logger$j.debug('Failed to load credentials', credentials);
                        logger$j.debug('Error loading credentials', err);
                        rej(err);
                        return;
                    }
                });
            });
        };
        CredentialsClass.prototype.set = function (params, source) {
            if (source === 'session') {
                return this._setCredentialsFromSession(params);
            }
            else if (source === 'federation') {
                return this._setCredentialsFromFederation(params);
            }
            else if (source === 'guest') {
                return this._setCredentialsForGuest();
            }
            else {
                logger$j.debug('no source specified for setting credentials');
                return Promise.reject('invalid source');
            }
        };
        CredentialsClass.prototype.clear = function () {
            return __awaiter$e(this, void 0, void 0, function () {
                return __generator$e(this, function (_a) {
                    this._credentials = null;
                    this._credentials_source = null;
                    logger$j.debug('removing aws-amplify-federatedInfo from storage');
                    this._storage.removeItem('aws-amplify-federatedInfo');
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Compact version of credentials
         * @param {Object} credentials
         * @return {Object} - Credentials
         */
        CredentialsClass.prototype.shear = function (credentials) {
            return {
                accessKeyId: credentials.accessKeyId,
                sessionToken: credentials.sessionToken,
                secretAccessKey: credentials.secretAccessKey,
                identityId: credentials.identityId,
                authenticated: credentials.authenticated,
            };
        };
        return CredentialsClass;
    }());
    var Credentials = new CredentialsClass(null);
    Amplify.register(Credentials);

    /**
     * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    /**
     * Provides a means to registering a service worker in the browser
     * and communicating with it via postMessage events.
     * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/
     *
     * postMessage events are currently not supported in all browsers. See:
     * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
     *
     * At the minmum this class will register the service worker and listen
     * and attempt to dispatch messages on state change and record analytics
     * events based on the service worker lifecycle.
     */
    var ServiceWorkerClass = /** @class */ (function () {
        function ServiceWorkerClass() {
            // The AWS Amplify logger
            this._logger = new ConsoleLogger('ServiceWorker');
        }
        Object.defineProperty(ServiceWorkerClass.prototype, "serviceWorker", {
            /**
             * Get the currently active service worker
             */
            get: function () {
                return this._serviceWorker;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Register the service-worker.js file in the browser
         * Make sure the service-worker.js is part of the build
         * for example with Angular, modify the angular-cli.json file
         * and add to "assets" array "service-worker.js"
         * @param {string} - (optional) Service worker file. Defaults to "/service-worker.js"
         * @param {string} - (optional) The service worker scope. Defaults to "/"
         *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register
         * @returns {Promise}
         *	- resolve(ServiceWorkerRegistration)
         *	- reject(Error)
         **/
        ServiceWorkerClass.prototype.register = function (filePath, scope) {
            var _this = this;
            if (filePath === void 0) { filePath = '/service-worker.js'; }
            if (scope === void 0) { scope = '/'; }
            this._logger.debug("registering " + filePath);
            this._logger.debug("registering service worker with scope " + scope);
            return new Promise(function (resolve, reject) {
                if (navigator && 'serviceWorker' in navigator) {
                    navigator.serviceWorker
                        .register(filePath, {
                        scope: scope,
                    })
                        .then(function (registration) {
                        if (registration.installing) {
                            _this._serviceWorker = registration.installing;
                        }
                        else if (registration.waiting) {
                            _this._serviceWorker = registration.waiting;
                        }
                        else if (registration.active) {
                            _this._serviceWorker = registration.active;
                        }
                        _this._registration = registration;
                        _this._setupListeners();
                        _this._logger.debug("Service Worker Registration Success: " + registration);
                        return resolve(registration);
                    })
                        .catch(function (error) {
                        _this._logger.debug("Service Worker Registration Failed " + error);
                        return reject(error);
                    });
                }
                else {
                    return reject(new Error('Service Worker not available'));
                }
            });
        };
        /**
         * Enable web push notifications. If not subscribed, a new subscription will
         * be created and registered.
         * 	Test Push Server: https://web-push-codelab.glitch.me/
         * 	Push Server Libraries: https://github.com/web-push-libs/
         * 	API Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/
         * @param publicKey
         * @returns {Promise}
         * 	- resolve(PushSubscription)
         *  - reject(Error)
         */
        ServiceWorkerClass.prototype.enablePush = function (publicKey) {
            var _this = this;
            if (!this._registration)
                throw new Error('Service Worker not registered');
            this._publicKey = publicKey;
            return new Promise(function (resolve, reject) {
                if (browserOrNode().isBrowser) {
                    _this._registration.pushManager.getSubscription().then(function (subscription) {
                        if (subscription) {
                            _this._subscription = subscription;
                            _this._logger.debug("User is subscribed to push: " + JSON.stringify(subscription));
                            resolve(subscription);
                        }
                        else {
                            _this._logger.debug("User is NOT subscribed to push");
                            return _this._registration.pushManager
                                .subscribe({
                                userVisibleOnly: true,
                                applicationServerKey: _this._urlB64ToUint8Array(publicKey),
                            })
                                .then(function (subscription) {
                                _this._subscription = subscription;
                                _this._logger.debug("User subscribed: " + JSON.stringify(subscription));
                                resolve(subscription);
                            })
                                .catch(function (error) {
                                _this._logger.error(error);
                            });
                        }
                    });
                }
                else {
                    return reject(new Error('Service Worker not available'));
                }
            });
        };
        /**
         * Convert a base64 encoded string to a Uint8 array for the push server key
         * @param base64String
         */
        ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {
            var padding = '='.repeat((4 - (base64String.length % 4)) % 4);
            var base64 = (base64String + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/');
            var rawData = window.atob(base64);
            var outputArray = new Uint8Array(rawData.length);
            for (var i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        };
        /**
         * Send a message to the service worker. The service worker needs
         * to implement `self.addEventListener('message') to handle the
         * message. This ***currently*** does not work in Safari or IE.
         * @param {object | string} - An arbitrary JSON object or string message to send to the service worker
         *	- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable
         * @returns {Promise}
         **/
        ServiceWorkerClass.prototype.send = function (message) {
            if (this._serviceWorker) {
                this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);
            }
        };
        /**
         * Listen for service worker state change and message events
         * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state
         **/
        ServiceWorkerClass.prototype._setupListeners = function () {
            var _this = this;
            this._serviceWorker.addEventListener('statechange', function (event) {
                var currentState = _this._serviceWorker.state;
                _this._logger.debug("ServiceWorker statechange: " + currentState);
                if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {
                    Amplify.Analytics.record({
                        name: 'ServiceWorker',
                        attributes: {
                            state: currentState,
                        },
                    });
                }
            });
            this._serviceWorker.addEventListener('message', function (event) {
                _this._logger.debug("ServiceWorker message event: " + event);
            });
        };
        return ServiceWorkerClass;
    }());

    /*!
     * cookie
     * Copyright(c) 2012-2014 Roman Shtylman
     * Copyright(c) 2015 Douglas Christopher Wilson
     * MIT Licensed
     */

    /**
     * Module exports.
     * @public
     */

    var parse_1 = parse$2;
    var serialize_1 = serialize;

    /**
     * Module variables.
     * @private
     */

    var decode = decodeURIComponent;
    var encode$1 = encodeURIComponent;
    var pairSplitRegExp = /; */;

    /**
     * RegExp to match field-content in RFC 7230 sec 3.2
     *
     * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
     * field-vchar   = VCHAR / obs-text
     * obs-text      = %x80-FF
     */

    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

    /**
     * Parse a cookie header.
     *
     * Parse the given cookie header string into an object
     * The object has the various cookies as keys(names) => values
     *
     * @param {string} str
     * @param {object} [options]
     * @return {object}
     * @public
     */

    function parse$2(str, options) {
      if (typeof str !== 'string') {
        throw new TypeError('argument str must be a string');
      }

      var obj = {};
      var opt = options || {};
      var pairs = str.split(pairSplitRegExp);
      var dec = opt.decode || decode;

      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var eq_idx = pair.indexOf('=');

        // skip things that don't look like key=value
        if (eq_idx < 0) {
          continue;
        }

        var key = pair.substr(0, eq_idx).trim();
        var val = pair.substr(++eq_idx, pair.length).trim();

        // quoted values
        if ('"' == val[0]) {
          val = val.slice(1, -1);
        }

        // only assign once
        if (undefined == obj[key]) {
          obj[key] = tryDecode(val, dec);
        }
      }

      return obj;
    }

    /**
     * Serialize data into a cookie header.
     *
     * Serialize the a name value pair into a cookie string suitable for
     * http headers. An optional options object specified cookie parameters.
     *
     * serialize('foo', 'bar', { httpOnly: true })
     *   => "foo=bar; httpOnly"
     *
     * @param {string} name
     * @param {string} val
     * @param {object} [options]
     * @return {string}
     * @public
     */

    function serialize(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode$1;

      if (typeof enc !== 'function') {
        throw new TypeError('option encode is invalid');
      }

      if (!fieldContentRegExp.test(name)) {
        throw new TypeError('argument name is invalid');
      }

      var value = enc(val);

      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError('argument val is invalid');
      }

      var str = name + '=' + value;

      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;

        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError('option maxAge is invalid')
        }

        str += '; Max-Age=' + Math.floor(maxAge);
      }

      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError('option domain is invalid');
        }

        str += '; Domain=' + opt.domain;
      }

      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError('option path is invalid');
        }

        str += '; Path=' + opt.path;
      }

      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== 'function') {
          throw new TypeError('option expires is invalid');
        }

        str += '; Expires=' + opt.expires.toUTCString();
      }

      if (opt.httpOnly) {
        str += '; HttpOnly';
      }

      if (opt.secure) {
        str += '; Secure';
      }

      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === 'string'
          ? opt.sameSite.toLowerCase() : opt.sameSite;

        switch (sameSite) {
          case true:
            str += '; SameSite=Strict';
            break;
          case 'lax':
            str += '; SameSite=Lax';
            break;
          case 'strict':
            str += '; SameSite=Strict';
            break;
          case 'none':
            str += '; SameSite=None';
            break;
          default:
            throw new TypeError('option sameSite is invalid');
        }
      }

      return str;
    }

    /**
     * Try decoding a string using a decoding function.
     *
     * @param {string} str
     * @param {function} decode
     * @private
     */

    function tryDecode(str, decode) {
      try {
        return decode(str);
      } catch (e) {
        return str;
      }
    }

    function hasDocumentCookie() {
        // Can we get/set cookies on document.cookie?
        return typeof document === 'object' && typeof document.cookie === 'string';
    }
    function parseCookies(cookies, options) {
        if (typeof cookies === 'string') {
            return parse_1(cookies, options);
        }
        else if (typeof cookies === 'object' && cookies !== null) {
            return cookies;
        }
        else {
            return {};
        }
    }
    function isParsingCookie(value, doNotParse) {
        if (typeof doNotParse === 'undefined') {
            // We guess if the cookie start with { or [, it has been serialized
            doNotParse =
                !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '"');
        }
        return !doNotParse;
    }
    function readCookie(value, options) {
        if (options === void 0) { options = {}; }
        var cleanValue = cleanupCookieValue(value);
        if (isParsingCookie(cleanValue, options.doNotParse)) {
            try {
                return JSON.parse(cleanValue);
            }
            catch (e) {
                // At least we tried
            }
        }
        // Ignore clean value if we failed the deserialization
        // It is not relevant anymore to trim those values
        return value;
    }
    function cleanupCookieValue(value) {
        // express prepend j: before serializing a cookie
        if (value && value[0] === 'j' && value[1] === ':') {
            return value.substr(2);
        }
        return value;
    }

    var __assign$e = (undefined && undefined.__assign) || function () {
        __assign$e = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$e.apply(this, arguments);
    };
    var Cookies = /** @class */ (function () {
        function Cookies(cookies, options) {
            var _this = this;
            this.changeListeners = [];
            this.HAS_DOCUMENT_COOKIE = false;
            this.cookies = parseCookies(cookies, options);
            new Promise(function () {
                _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
            }).catch(function () { });
        }
        Cookies.prototype._updateBrowserValues = function (parseOptions) {
            if (!this.HAS_DOCUMENT_COOKIE) {
                return;
            }
            this.cookies = parse_1(document.cookie, parseOptions);
        };
        Cookies.prototype._emitChange = function (params) {
            for (var i = 0; i < this.changeListeners.length; ++i) {
                this.changeListeners[i](params);
            }
        };
        Cookies.prototype.get = function (name, options, parseOptions) {
            if (options === void 0) { options = {}; }
            this._updateBrowserValues(parseOptions);
            return readCookie(this.cookies[name], options);
        };
        Cookies.prototype.getAll = function (options, parseOptions) {
            if (options === void 0) { options = {}; }
            this._updateBrowserValues(parseOptions);
            var result = {};
            for (var name_1 in this.cookies) {
                result[name_1] = readCookie(this.cookies[name_1], options);
            }
            return result;
        };
        Cookies.prototype.set = function (name, value, options) {
            var _a;
            if (typeof value === 'object') {
                value = JSON.stringify(value);
            }
            this.cookies = __assign$e(__assign$e({}, this.cookies), (_a = {}, _a[name] = value, _a));
            if (this.HAS_DOCUMENT_COOKIE) {
                document.cookie = serialize_1(name, value, options);
            }
            this._emitChange({ name: name, value: value, options: options });
        };
        Cookies.prototype.remove = function (name, options) {
            var finalOptions = (options = __assign$e(__assign$e({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));
            this.cookies = __assign$e({}, this.cookies);
            delete this.cookies[name];
            if (this.HAS_DOCUMENT_COOKIE) {
                document.cookie = serialize_1(name, '', finalOptions);
            }
            this._emitChange({ name: name, value: undefined, options: options });
        };
        Cookies.prototype.addChangeListener = function (callback) {
            this.changeListeners.push(callback);
        };
        Cookies.prototype.removeChangeListener = function (callback) {
            var idx = this.changeListeners.indexOf(callback);
            if (idx >= 0) {
                this.changeListeners.splice(idx, 1);
            }
        };
        return Cookies;
    }());

    var isBrowser$1 = browserOrNode().isBrowser;
    var UniversalStorage = /** @class */ (function () {
        function UniversalStorage(context) {
            if (context === void 0) { context = {}; }
            this.cookies = new Cookies();
            this.store = isBrowser$1 ? window.localStorage : Object.create(null);
            this.cookies = context.req
                ? new Cookies(context.req.headers.cookie)
                : new Cookies();
            Object.assign(this.store, this.cookies.getAll());
        }
        Object.defineProperty(UniversalStorage.prototype, "length", {
            get: function () {
                return Object.entries(this.store).length;
            },
            enumerable: true,
            configurable: true
        });
        UniversalStorage.prototype.clear = function () {
            var _this = this;
            Array.from(new Array(this.length))
                .map(function (_, i) { return _this.key(i); })
                .forEach(function (key) { return _this.removeItem(key); });
        };
        UniversalStorage.prototype.getItem = function (key) {
            return this.getLocalItem(key);
        };
        UniversalStorage.prototype.getLocalItem = function (key) {
            return Object.prototype.hasOwnProperty.call(this.store, key)
                ? this.store[key]
                : null;
        };
        UniversalStorage.prototype.getUniversalItem = function (key) {
            return this.cookies.get(key);
        };
        UniversalStorage.prototype.key = function (index) {
            return Object.keys(this.store)[index];
        };
        UniversalStorage.prototype.removeItem = function (key) {
            this.removeLocalItem(key);
            this.removeUniversalItem(key);
        };
        UniversalStorage.prototype.removeLocalItem = function (key) {
            delete this.store[key];
        };
        UniversalStorage.prototype.removeUniversalItem = function (key) {
            this.cookies.remove(key, {
                path: '/',
            });
        };
        UniversalStorage.prototype.setItem = function (key, value) {
            this.setLocalItem(key, value);
            // keys take the shape:
            //  1. `${ProviderPrefix}.${userPoolClientId}.${username}.${tokenType}
            //  2. `${ProviderPrefix}.${userPoolClientId}.LastAuthUser
            var tokenType = key.split('.').pop();
            switch (tokenType) {
                // LastAuthUser is needed for computing other key names
                case 'LastAuthUser':
                // accessToken is required for CognitoUserSession
                case 'accessToken':
                // Required for CognitoUserSession
                case 'idToken':
                    this.setUniversalItem(key, value);
                // userData is used when `Auth.currentAuthenticatedUser({ bypassCache: false })`.
                // Can be persisted to speed up calls to `Auth.currentAuthenticatedUser()`
                // case 'userData':
                // refreshToken isn't shared with the server so that the client handles refreshing
                // case 'refreshToken':
                // Ignoring clockDrift on the server for now, but needs testing
                // case 'clockDrift':
            }
        };
        UniversalStorage.prototype.setLocalItem = function (key, value) {
            this.store[key] = value;
        };
        UniversalStorage.prototype.setUniversalItem = function (key, value) {
            this.cookies.set(key, value, {
                path: '/',
                // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie
                sameSite: true,
                // Allow unsecure requests to http://localhost:3000/ when in development.
                secure: window.location.hostname === 'localhost' ? false : true,
            });
        };
        return UniversalStorage;
    }());

    /*
     * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    /**
     * This Symbol is used to reference an internal-only PubSub provider that
     * is used for AppSync/GraphQL subscriptions in the API category.
     */
    var hasSymbol = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
    var INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER = hasSymbol
        ? Symbol.for('INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER')
        : '@@INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER';
    var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol
        ? Symbol.for('INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER')
        : '@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER';
    var USER_AGENT_HEADER$1 = 'x-amz-user-agent';

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var Constants = {
        userAgent: Platform.userAgent,
    };

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var CognitoHostedUIIdentityProvider;
    (function (CognitoHostedUIIdentityProvider) {
        CognitoHostedUIIdentityProvider["Cognito"] = "COGNITO";
        CognitoHostedUIIdentityProvider["Google"] = "Google";
        CognitoHostedUIIdentityProvider["Facebook"] = "Facebook";
        CognitoHostedUIIdentityProvider["Amazon"] = "LoginWithAmazon";
        CognitoHostedUIIdentityProvider["Apple"] = "SignInWithApple";
    })(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
    function isFederatedSignInOptions(obj) {
        var keys = ['provider'];
        return obj && !!keys.find(function (k) { return obj.hasOwnProperty(k); });
    }
    function isFederatedSignInOptionsCustom(obj) {
        var keys = ['customProvider'];
        return obj && !!keys.find(function (k) { return obj.hasOwnProperty(k); });
    }
    function hasCustomState(obj) {
        var keys = ['customState'];
        return obj && !!keys.find(function (k) { return obj.hasOwnProperty(k); });
    }
    function isCognitoHostedOpts(oauth) {
        return oauth.redirectSignIn !== undefined;
    }
    var AuthErrorTypes;
    (function (AuthErrorTypes) {
        AuthErrorTypes["NoConfig"] = "noConfig";
        AuthErrorTypes["MissingAuthConfig"] = "missingAuthConfig";
        AuthErrorTypes["EmptyUsername"] = "emptyUsername";
        AuthErrorTypes["InvalidUsername"] = "invalidUsername";
        AuthErrorTypes["EmptyPassword"] = "emptyPassword";
        AuthErrorTypes["EmptyCode"] = "emptyCode";
        AuthErrorTypes["SignUpError"] = "signUpError";
        AuthErrorTypes["NoMFA"] = "noMFA";
        AuthErrorTypes["InvalidMFA"] = "invalidMFA";
        AuthErrorTypes["EmptyChallengeResponse"] = "emptyChallengeResponse";
        AuthErrorTypes["NoUserSession"] = "noUserSession";
        AuthErrorTypes["Default"] = "default";
    })(AuthErrorTypes || (AuthErrorTypes = {}));
    function isUsernamePasswordOpts(obj) {
        return !!obj.username;
    }

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */

    /** @class */
    var AuthenticationDetails = /*#__PURE__*/function () {
      /**
       * Constructs a new AuthenticationDetails object
       * @param {object=} data Creation options.
       * @param {string} data.Username User being authenticated.
       * @param {string} data.Password Plain-text password to authenticate with.
       * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.
       * @param {(AttributeArg[])?} data.AuthParamaters Authentication paramaters for custom auth.
       */
      function AuthenticationDetails(data) {
        var _ref = data || {},
            ValidationData = _ref.ValidationData,
            Username = _ref.Username,
            Password = _ref.Password,
            AuthParameters = _ref.AuthParameters,
            ClientMetadata = _ref.ClientMetadata;

        this.validationData = ValidationData || {};
        this.authParameters = AuthParameters || {};
        this.clientMetadata = ClientMetadata || {};
        this.username = Username;
        this.password = Password;
      }
      /**
       * @returns {string} the record's username
       */


      var _proto = AuthenticationDetails.prototype;

      _proto.getUsername = function getUsername() {
        return this.username;
      }
      /**
       * @returns {string} the record's password
       */
      ;

      _proto.getPassword = function getPassword() {
        return this.password;
      }
      /**
       * @returns {Array} the record's validationData
       */
      ;

      _proto.getValidationData = function getValidationData() {
        return this.validationData;
      }
      /**
       * @returns {Array} the record's authParameters
       */
      ;

      _proto.getAuthParameters = function getAuthParameters() {
        return this.authParameters;
      }
      /**
       * @returns {ClientMetadata} the clientMetadata for a Lambda trigger
       */
      ;

      _proto.getClientMetadata = function getClientMetadata() {
        return this.clientMetadata;
      };

      return AuthenticationDetails;
    }();

    var core = createCommonjsModule(function (module, exports) {
    (function (root, factory) {
    	{
    		// CommonJS
    		module.exports = factory();
    	}
    }(commonjsGlobal, function () {

    	/**
    	 * CryptoJS core components.
    	 */
    	var CryptoJS = CryptoJS || (function (Math, undefined$1) {
    	    /*
    	     * Local polyfil of Object.create
    	     */
    	    var create = Object.create || (function () {
    	        function F() {}
    	        return function (obj) {
    	            var subtype;

    	            F.prototype = obj;

    	            subtype = new F();

    	            F.prototype = null;

    	            return subtype;
    	        };
    	    }());

    	    /**
    	     * CryptoJS namespace.
    	     */
    	    var C = {};

    	    /**
    	     * Library namespace.
    	     */
    	    var C_lib = C.lib = {};

    	    /**
    	     * Base object for prototypal inheritance.
    	     */
    	    var Base = C_lib.Base = (function () {


    	        return {
    	            /**
    	             * Creates a new object that inherits from this object.
    	             *
    	             * @param {Object} overrides Properties to copy into the new object.
    	             *
    	             * @return {Object} The new object.
    	             *
    	             * @static
    	             *
    	             * @example
    	             *
    	             *     var MyType = CryptoJS.lib.Base.extend({
    	             *         field: 'value',
    	             *
    	             *         method: function () {
    	             *         }
    	             *     });
    	             */
    	            extend: function (overrides) {
    	                // Spawn
    	                var subtype = create(this);

    	                // Augment
    	                if (overrides) {
    	                    subtype.mixIn(overrides);
    	                }

    	                // Create default initializer
    	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
    	                    subtype.init = function () {
    	                        subtype.$super.init.apply(this, arguments);
    	                    };
    	                }

    	                // Initializer's prototype is the subtype object
    	                subtype.init.prototype = subtype;

    	                // Reference supertype
    	                subtype.$super = this;

    	                return subtype;
    	            },

    	            /**
    	             * Extends this object and runs the init method.
    	             * Arguments to create() will be passed to init().
    	             *
    	             * @return {Object} The new object.
    	             *
    	             * @static
    	             *
    	             * @example
    	             *
    	             *     var instance = MyType.create();
    	             */
    	            create: function () {
    	                var instance = this.extend();
    	                instance.init.apply(instance, arguments);

    	                return instance;
    	            },

    	            /**
    	             * Initializes a newly created object.
    	             * Override this method to add some logic when your objects are created.
    	             *
    	             * @example
    	             *
    	             *     var MyType = CryptoJS.lib.Base.extend({
    	             *         init: function () {
    	             *             // ...
    	             *         }
    	             *     });
    	             */
    	            init: function () {
    	            },

    	            /**
    	             * Copies properties into this object.
    	             *
    	             * @param {Object} properties The properties to mix in.
    	             *
    	             * @example
    	             *
    	             *     MyType.mixIn({
    	             *         field: 'value'
    	             *     });
    	             */
    	            mixIn: function (properties) {
    	                for (var propertyName in properties) {
    	                    if (properties.hasOwnProperty(propertyName)) {
    	                        this[propertyName] = properties[propertyName];
    	                    }
    	                }

    	                // IE won't copy toString using the loop above
    	                if (properties.hasOwnProperty('toString')) {
    	                    this.toString = properties.toString;
    	                }
    	            },

    	            /**
    	             * Creates a copy of this object.
    	             *
    	             * @return {Object} The clone.
    	             *
    	             * @example
    	             *
    	             *     var clone = instance.clone();
    	             */
    	            clone: function () {
    	                return this.init.prototype.extend(this);
    	            }
    	        };
    	    }());

    	    /**
    	     * An array of 32-bit words.
    	     *
    	     * @property {Array} words The array of 32-bit words.
    	     * @property {number} sigBytes The number of significant bytes in this word array.
    	     */
    	    var WordArray = C_lib.WordArray = Base.extend({
    	        /**
    	         * Initializes a newly created word array.
    	         *
    	         * @param {Array} words (Optional) An array of 32-bit words.
    	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    	         *
    	         * @example
    	         *
    	         *     var wordArray = CryptoJS.lib.WordArray.create();
    	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
    	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
    	         */
    	        init: function (words, sigBytes) {
    	            words = this.words = words || [];

    	            if (sigBytes != undefined$1) {
    	                this.sigBytes = sigBytes;
    	            } else {
    	                this.sigBytes = words.length * 4;
    	            }
    	        },

    	        /**
    	         * Converts this word array to a string.
    	         *
    	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
    	         *
    	         * @return {string} The stringified word array.
    	         *
    	         * @example
    	         *
    	         *     var string = wordArray + '';
    	         *     var string = wordArray.toString();
    	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
    	         */
    	        toString: function (encoder) {
    	            return (encoder || Hex).stringify(this);
    	        },

    	        /**
    	         * Concatenates a word array to this word array.
    	         *
    	         * @param {WordArray} wordArray The word array to append.
    	         *
    	         * @return {WordArray} This word array.
    	         *
    	         * @example
    	         *
    	         *     wordArray1.concat(wordArray2);
    	         */
    	        concat: function (wordArray) {
    	            // Shortcuts
    	            var thisWords = this.words;
    	            var thatWords = wordArray.words;
    	            var thisSigBytes = this.sigBytes;
    	            var thatSigBytes = wordArray.sigBytes;

    	            // Clamp excess bits
    	            this.clamp();

    	            // Concat
    	            if (thisSigBytes % 4) {
    	                // Copy one byte at a time
    	                for (var i = 0; i < thatSigBytes; i++) {
    	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
    	                }
    	            } else {
    	                // Copy one word at a time
    	                for (var i = 0; i < thatSigBytes; i += 4) {
    	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
    	                }
    	            }
    	            this.sigBytes += thatSigBytes;

    	            // Chainable
    	            return this;
    	        },

    	        /**
    	         * Removes insignificant bits.
    	         *
    	         * @example
    	         *
    	         *     wordArray.clamp();
    	         */
    	        clamp: function () {
    	            // Shortcuts
    	            var words = this.words;
    	            var sigBytes = this.sigBytes;

    	            // Clamp
    	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
    	            words.length = Math.ceil(sigBytes / 4);
    	        },

    	        /**
    	         * Creates a copy of this word array.
    	         *
    	         * @return {WordArray} The clone.
    	         *
    	         * @example
    	         *
    	         *     var clone = wordArray.clone();
    	         */
    	        clone: function () {
    	            var clone = Base.clone.call(this);
    	            clone.words = this.words.slice(0);

    	            return clone;
    	        },

    	        /**
    	         * Creates a word array filled with random bytes.
    	         *
    	         * @param {number} nBytes The number of random bytes to generate.
    	         *
    	         * @return {WordArray} The random word array.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
    	         */
    	        random: function (nBytes) {
    	            var words = [];

    	            var r = (function (m_w) {
    	                var m_w = m_w;
    	                var m_z = 0x3ade68b1;
    	                var mask = 0xffffffff;

    	                return function () {
    	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
    	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
    	                    var result = ((m_z << 0x10) + m_w) & mask;
    	                    result /= 0x100000000;
    	                    result += 0.5;
    	                    return result * (Math.random() > .5 ? 1 : -1);
    	                }
    	            });

    	            for (var i = 0, rcache; i < nBytes; i += 4) {
    	                var _r = r((rcache || Math.random()) * 0x100000000);

    	                rcache = _r() * 0x3ade67b7;
    	                words.push((_r() * 0x100000000) | 0);
    	            }

    	            return new WordArray.init(words, nBytes);
    	        }
    	    });

    	    /**
    	     * Encoder namespace.
    	     */
    	    var C_enc = C.enc = {};

    	    /**
    	     * Hex encoding strategy.
    	     */
    	    var Hex = C_enc.Hex = {
    	        /**
    	         * Converts a word array to a hex string.
    	         *
    	         * @param {WordArray} wordArray The word array.
    	         *
    	         * @return {string} The hex string.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
    	         */
    	        stringify: function (wordArray) {
    	            // Shortcuts
    	            var words = wordArray.words;
    	            var sigBytes = wordArray.sigBytes;

    	            // Convert
    	            var hexChars = [];
    	            for (var i = 0; i < sigBytes; i++) {
    	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    	                hexChars.push((bite >>> 4).toString(16));
    	                hexChars.push((bite & 0x0f).toString(16));
    	            }

    	            return hexChars.join('');
    	        },

    	        /**
    	         * Converts a hex string to a word array.
    	         *
    	         * @param {string} hexStr The hex string.
    	         *
    	         * @return {WordArray} The word array.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
    	         */
    	        parse: function (hexStr) {
    	            // Shortcut
    	            var hexStrLength = hexStr.length;

    	            // Convert
    	            var words = [];
    	            for (var i = 0; i < hexStrLength; i += 2) {
    	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
    	            }

    	            return new WordArray.init(words, hexStrLength / 2);
    	        }
    	    };

    	    /**
    	     * Latin1 encoding strategy.
    	     */
    	    var Latin1 = C_enc.Latin1 = {
    	        /**
    	         * Converts a word array to a Latin1 string.
    	         *
    	         * @param {WordArray} wordArray The word array.
    	         *
    	         * @return {string} The Latin1 string.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
    	         */
    	        stringify: function (wordArray) {
    	            // Shortcuts
    	            var words = wordArray.words;
    	            var sigBytes = wordArray.sigBytes;

    	            // Convert
    	            var latin1Chars = [];
    	            for (var i = 0; i < sigBytes; i++) {
    	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    	                latin1Chars.push(String.fromCharCode(bite));
    	            }

    	            return latin1Chars.join('');
    	        },

    	        /**
    	         * Converts a Latin1 string to a word array.
    	         *
    	         * @param {string} latin1Str The Latin1 string.
    	         *
    	         * @return {WordArray} The word array.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
    	         */
    	        parse: function (latin1Str) {
    	            // Shortcut
    	            var latin1StrLength = latin1Str.length;

    	            // Convert
    	            var words = [];
    	            for (var i = 0; i < latin1StrLength; i++) {
    	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
    	            }

    	            return new WordArray.init(words, latin1StrLength);
    	        }
    	    };

    	    /**
    	     * UTF-8 encoding strategy.
    	     */
    	    var Utf8 = C_enc.Utf8 = {
    	        /**
    	         * Converts a word array to a UTF-8 string.
    	         *
    	         * @param {WordArray} wordArray The word array.
    	         *
    	         * @return {string} The UTF-8 string.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
    	         */
    	        stringify: function (wordArray) {
    	            try {
    	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
    	            } catch (e) {
    	                throw new Error('Malformed UTF-8 data');
    	            }
    	        },

    	        /**
    	         * Converts a UTF-8 string to a word array.
    	         *
    	         * @param {string} utf8Str The UTF-8 string.
    	         *
    	         * @return {WordArray} The word array.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
    	         */
    	        parse: function (utf8Str) {
    	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
    	        }
    	    };

    	    /**
    	     * Abstract buffered block algorithm template.
    	     *
    	     * The property blockSize must be implemented in a concrete subtype.
    	     *
    	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
    	     */
    	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
    	        /**
    	         * Resets this block algorithm's data buffer to its initial state.
    	         *
    	         * @example
    	         *
    	         *     bufferedBlockAlgorithm.reset();
    	         */
    	        reset: function () {
    	            // Initial values
    	            this._data = new WordArray.init();
    	            this._nDataBytes = 0;
    	        },

    	        /**
    	         * Adds new data to this block algorithm's buffer.
    	         *
    	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
    	         *
    	         * @example
    	         *
    	         *     bufferedBlockAlgorithm._append('data');
    	         *     bufferedBlockAlgorithm._append(wordArray);
    	         */
    	        _append: function (data) {
    	            // Convert string to WordArray, else assume WordArray already
    	            if (typeof data == 'string') {
    	                data = Utf8.parse(data);
    	            }

    	            // Append
    	            this._data.concat(data);
    	            this._nDataBytes += data.sigBytes;
    	        },

    	        /**
    	         * Processes available data blocks.
    	         *
    	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
    	         *
    	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
    	         *
    	         * @return {WordArray} The processed data.
    	         *
    	         * @example
    	         *
    	         *     var processedData = bufferedBlockAlgorithm._process();
    	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
    	         */
    	        _process: function (doFlush) {
    	            // Shortcuts
    	            var data = this._data;
    	            var dataWords = data.words;
    	            var dataSigBytes = data.sigBytes;
    	            var blockSize = this.blockSize;
    	            var blockSizeBytes = blockSize * 4;

    	            // Count blocks ready
    	            var nBlocksReady = dataSigBytes / blockSizeBytes;
    	            if (doFlush) {
    	                // Round up to include partial blocks
    	                nBlocksReady = Math.ceil(nBlocksReady);
    	            } else {
    	                // Round down to include only full blocks,
    	                // less the number of blocks that must remain in the buffer
    	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
    	            }

    	            // Count words ready
    	            var nWordsReady = nBlocksReady * blockSize;

    	            // Count bytes ready
    	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

    	            // Process blocks
    	            if (nWordsReady) {
    	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
    	                    // Perform concrete-algorithm logic
    	                    this._doProcessBlock(dataWords, offset);
    	                }

    	                // Remove processed words
    	                var processedWords = dataWords.splice(0, nWordsReady);
    	                data.sigBytes -= nBytesReady;
    	            }

    	            // Return processed words
    	            return new WordArray.init(processedWords, nBytesReady);
    	        },

    	        /**
    	         * Creates a copy of this object.
    	         *
    	         * @return {Object} The clone.
    	         *
    	         * @example
    	         *
    	         *     var clone = bufferedBlockAlgorithm.clone();
    	         */
    	        clone: function () {
    	            var clone = Base.clone.call(this);
    	            clone._data = this._data.clone();

    	            return clone;
    	        },

    	        _minBufferSize: 0
    	    });

    	    /**
    	     * Abstract hasher template.
    	     *
    	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
    	     */
    	    C_lib.Hasher = BufferedBlockAlgorithm.extend({
    	        /**
    	         * Configuration options.
    	         */
    	        cfg: Base.extend(),

    	        /**
    	         * Initializes a newly created hasher.
    	         *
    	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
    	         *
    	         * @example
    	         *
    	         *     var hasher = CryptoJS.algo.SHA256.create();
    	         */
    	        init: function (cfg) {
    	            // Apply config defaults
    	            this.cfg = this.cfg.extend(cfg);

    	            // Set initial values
    	            this.reset();
    	        },

    	        /**
    	         * Resets this hasher to its initial state.
    	         *
    	         * @example
    	         *
    	         *     hasher.reset();
    	         */
    	        reset: function () {
    	            // Reset data buffer
    	            BufferedBlockAlgorithm.reset.call(this);

    	            // Perform concrete-hasher logic
    	            this._doReset();
    	        },

    	        /**
    	         * Updates this hasher with a message.
    	         *
    	         * @param {WordArray|string} messageUpdate The message to append.
    	         *
    	         * @return {Hasher} This hasher.
    	         *
    	         * @example
    	         *
    	         *     hasher.update('message');
    	         *     hasher.update(wordArray);
    	         */
    	        update: function (messageUpdate) {
    	            // Append
    	            this._append(messageUpdate);

    	            // Update the hash
    	            this._process();

    	            // Chainable
    	            return this;
    	        },

    	        /**
    	         * Finalizes the hash computation.
    	         * Note that the finalize operation is effectively a destructive, read-once operation.
    	         *
    	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
    	         *
    	         * @return {WordArray} The hash.
    	         *
    	         * @example
    	         *
    	         *     var hash = hasher.finalize();
    	         *     var hash = hasher.finalize('message');
    	         *     var hash = hasher.finalize(wordArray);
    	         */
    	        finalize: function (messageUpdate) {
    	            // Final message update
    	            if (messageUpdate) {
    	                this._append(messageUpdate);
    	            }

    	            // Perform concrete-hasher logic
    	            var hash = this._doFinalize();

    	            return hash;
    	        },

    	        blockSize: 512/32,

    	        /**
    	         * Creates a shortcut function to a hasher's object interface.
    	         *
    	         * @param {Hasher} hasher The hasher to create a helper for.
    	         *
    	         * @return {Function} The shortcut function.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
    	         */
    	        _createHelper: function (hasher) {
    	            return function (message, cfg) {
    	                return new hasher.init(cfg).finalize(message);
    	            };
    	        },

    	        /**
    	         * Creates a shortcut function to the HMAC's object interface.
    	         *
    	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
    	         *
    	         * @return {Function} The shortcut function.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
    	         */
    	        _createHmacHelper: function (hasher) {
    	            return function (message, key) {
    	                return new C_algo.HMAC.init(hasher, key).finalize(message);
    	            };
    	        }
    	    });

    	    /**
    	     * Algorithm namespace.
    	     */
    	    var C_algo = C.algo = {};

    	    return C;
    	}(Math));


    	return CryptoJS;

    }));
    });

    createCommonjsModule(function (module, exports) {
    (function (root, factory) {
    	{
    		// CommonJS
    		module.exports = factory(core);
    	}
    }(commonjsGlobal, function (CryptoJS) {

    	(function () {
    	    // Check if typed arrays are supported
    	    if (typeof ArrayBuffer != 'function') {
    	        return;
    	    }

    	    // Shortcuts
    	    var C = CryptoJS;
    	    var C_lib = C.lib;
    	    var WordArray = C_lib.WordArray;

    	    // Reference original init
    	    var superInit = WordArray.init;

    	    // Augment WordArray.init to handle typed arrays
    	    var subInit = WordArray.init = function (typedArray) {
    	        // Convert buffers to uint8
    	        if (typedArray instanceof ArrayBuffer) {
    	            typedArray = new Uint8Array(typedArray);
    	        }

    	        // Convert other array views to uint8
    	        if (
    	            typedArray instanceof Int8Array ||
    	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
    	            typedArray instanceof Int16Array ||
    	            typedArray instanceof Uint16Array ||
    	            typedArray instanceof Int32Array ||
    	            typedArray instanceof Uint32Array ||
    	            typedArray instanceof Float32Array ||
    	            typedArray instanceof Float64Array
    	        ) {
    	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
    	        }

    	        // Handle Uint8Array
    	        if (typedArray instanceof Uint8Array) {
    	            // Shortcut
    	            var typedArrayByteLength = typedArray.byteLength;

    	            // Extract bytes
    	            var words = [];
    	            for (var i = 0; i < typedArrayByteLength; i++) {
    	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
    	            }

    	            // Initialize this word array
    	            superInit.call(this, words, typedArrayByteLength);
    	        } else {
    	            // Else call normal init
    	            superInit.apply(this, arguments);
    	        }
    	    };

    	    subInit.prototype = WordArray;
    	}());


    	return CryptoJS.lib.WordArray;

    }));
    });

    var sha256 = createCommonjsModule(function (module, exports) {
    (function (root, factory) {
    	{
    		// CommonJS
    		module.exports = factory(core);
    	}
    }(commonjsGlobal, function (CryptoJS) {

    	(function (Math) {
    	    // Shortcuts
    	    var C = CryptoJS;
    	    var C_lib = C.lib;
    	    var WordArray = C_lib.WordArray;
    	    var Hasher = C_lib.Hasher;
    	    var C_algo = C.algo;

    	    // Initialization and round constants tables
    	    var H = [];
    	    var K = [];

    	    // Compute constants
    	    (function () {
    	        function isPrime(n) {
    	            var sqrtN = Math.sqrt(n);
    	            for (var factor = 2; factor <= sqrtN; factor++) {
    	                if (!(n % factor)) {
    	                    return false;
    	                }
    	            }

    	            return true;
    	        }

    	        function getFractionalBits(n) {
    	            return ((n - (n | 0)) * 0x100000000) | 0;
    	        }

    	        var n = 2;
    	        var nPrime = 0;
    	        while (nPrime < 64) {
    	            if (isPrime(n)) {
    	                if (nPrime < 8) {
    	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
    	                }
    	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

    	                nPrime++;
    	            }

    	            n++;
    	        }
    	    }());

    	    // Reusable object
    	    var W = [];

    	    /**
    	     * SHA-256 hash algorithm.
    	     */
    	    var SHA256 = C_algo.SHA256 = Hasher.extend({
    	        _doReset: function () {
    	            this._hash = new WordArray.init(H.slice(0));
    	        },

    	        _doProcessBlock: function (M, offset) {
    	            // Shortcut
    	            var H = this._hash.words;

    	            // Working variables
    	            var a = H[0];
    	            var b = H[1];
    	            var c = H[2];
    	            var d = H[3];
    	            var e = H[4];
    	            var f = H[5];
    	            var g = H[6];
    	            var h = H[7];

    	            // Computation
    	            for (var i = 0; i < 64; i++) {
    	                if (i < 16) {
    	                    W[i] = M[offset + i] | 0;
    	                } else {
    	                    var gamma0x = W[i - 15];
    	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
    	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
    	                                   (gamma0x >>> 3);

    	                    var gamma1x = W[i - 2];
    	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
    	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
    	                                   (gamma1x >>> 10);

    	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
    	                }

    	                var ch  = (e & f) ^ (~e & g);
    	                var maj = (a & b) ^ (a & c) ^ (b & c);

    	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
    	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

    	                var t1 = h + sigma1 + ch + K[i] + W[i];
    	                var t2 = sigma0 + maj;

    	                h = g;
    	                g = f;
    	                f = e;
    	                e = (d + t1) | 0;
    	                d = c;
    	                c = b;
    	                b = a;
    	                a = (t1 + t2) | 0;
    	            }

    	            // Intermediate hash value
    	            H[0] = (H[0] + a) | 0;
    	            H[1] = (H[1] + b) | 0;
    	            H[2] = (H[2] + c) | 0;
    	            H[3] = (H[3] + d) | 0;
    	            H[4] = (H[4] + e) | 0;
    	            H[5] = (H[5] + f) | 0;
    	            H[6] = (H[6] + g) | 0;
    	            H[7] = (H[7] + h) | 0;
    	        },

    	        _doFinalize: function () {
    	            // Shortcuts
    	            var data = this._data;
    	            var dataWords = data.words;

    	            var nBitsTotal = this._nDataBytes * 8;
    	            var nBitsLeft = data.sigBytes * 8;

    	            // Add padding
    	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
    	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
    	            data.sigBytes = dataWords.length * 4;

    	            // Hash final blocks
    	            this._process();

    	            // Return final computed hash
    	            return this._hash;
    	        },

    	        clone: function () {
    	            var clone = Hasher.clone.call(this);
    	            clone._hash = this._hash.clone();

    	            return clone;
    	        }
    	    });

    	    /**
    	     * Shortcut function to the hasher's object interface.
    	     *
    	     * @param {WordArray|string} message The message to hash.
    	     *
    	     * @return {WordArray} The hash.
    	     *
    	     * @static
    	     *
    	     * @example
    	     *
    	     *     var hash = CryptoJS.SHA256('message');
    	     *     var hash = CryptoJS.SHA256(wordArray);
    	     */
    	    C.SHA256 = Hasher._createHelper(SHA256);

    	    /**
    	     * Shortcut function to the HMAC's object interface.
    	     *
    	     * @param {WordArray|string} message The message to hash.
    	     * @param {WordArray|string} key The secret key.
    	     *
    	     * @return {WordArray} The HMAC.
    	     *
    	     * @static
    	     *
    	     * @example
    	     *
    	     *     var hmac = CryptoJS.HmacSHA256(message, key);
    	     */
    	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    	}(Math));


    	return CryptoJS.SHA256;

    }));
    });

    var hmac = createCommonjsModule(function (module, exports) {
    (function (root, factory) {
    	{
    		// CommonJS
    		module.exports = factory(core);
    	}
    }(commonjsGlobal, function (CryptoJS) {

    	(function () {
    	    // Shortcuts
    	    var C = CryptoJS;
    	    var C_lib = C.lib;
    	    var Base = C_lib.Base;
    	    var C_enc = C.enc;
    	    var Utf8 = C_enc.Utf8;
    	    var C_algo = C.algo;

    	    /**
    	     * HMAC algorithm.
    	     */
    	    C_algo.HMAC = Base.extend({
    	        /**
    	         * Initializes a newly created HMAC.
    	         *
    	         * @param {Hasher} hasher The hash algorithm to use.
    	         * @param {WordArray|string} key The secret key.
    	         *
    	         * @example
    	         *
    	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
    	         */
    	        init: function (hasher, key) {
    	            // Init hasher
    	            hasher = this._hasher = new hasher.init();

    	            // Convert string to WordArray, else assume WordArray already
    	            if (typeof key == 'string') {
    	                key = Utf8.parse(key);
    	            }

    	            // Shortcuts
    	            var hasherBlockSize = hasher.blockSize;
    	            var hasherBlockSizeBytes = hasherBlockSize * 4;

    	            // Allow arbitrary length keys
    	            if (key.sigBytes > hasherBlockSizeBytes) {
    	                key = hasher.finalize(key);
    	            }

    	            // Clamp excess bits
    	            key.clamp();

    	            // Clone key for inner and outer pads
    	            var oKey = this._oKey = key.clone();
    	            var iKey = this._iKey = key.clone();

    	            // Shortcuts
    	            var oKeyWords = oKey.words;
    	            var iKeyWords = iKey.words;

    	            // XOR keys with pad constants
    	            for (var i = 0; i < hasherBlockSize; i++) {
    	                oKeyWords[i] ^= 0x5c5c5c5c;
    	                iKeyWords[i] ^= 0x36363636;
    	            }
    	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

    	            // Set initial values
    	            this.reset();
    	        },

    	        /**
    	         * Resets this HMAC to its initial state.
    	         *
    	         * @example
    	         *
    	         *     hmacHasher.reset();
    	         */
    	        reset: function () {
    	            // Shortcut
    	            var hasher = this._hasher;

    	            // Reset
    	            hasher.reset();
    	            hasher.update(this._iKey);
    	        },

    	        /**
    	         * Updates this HMAC with a message.
    	         *
    	         * @param {WordArray|string} messageUpdate The message to append.
    	         *
    	         * @return {HMAC} This HMAC instance.
    	         *
    	         * @example
    	         *
    	         *     hmacHasher.update('message');
    	         *     hmacHasher.update(wordArray);
    	         */
    	        update: function (messageUpdate) {
    	            this._hasher.update(messageUpdate);

    	            // Chainable
    	            return this;
    	        },

    	        /**
    	         * Finalizes the HMAC computation.
    	         * Note that the finalize operation is effectively a destructive, read-once operation.
    	         *
    	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
    	         *
    	         * @return {WordArray} The HMAC.
    	         *
    	         * @example
    	         *
    	         *     var hmac = hmacHasher.finalize();
    	         *     var hmac = hmacHasher.finalize('message');
    	         *     var hmac = hmacHasher.finalize(wordArray);
    	         */
    	        finalize: function (messageUpdate) {
    	            // Shortcut
    	            var hasher = this._hasher;

    	            // Compute HMAC
    	            var innerHash = hasher.finalize(messageUpdate);
    	            hasher.reset();
    	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

    	            return hmac;
    	        }
    	    });
    	}());


    }));
    });

    var hmacSha256 = createCommonjsModule(function (module, exports) {
    (function (root, factory, undef) {
    	{
    		// CommonJS
    		module.exports = factory(core, sha256, hmac);
    	}
    }(commonjsGlobal, function (CryptoJS) {

    	return CryptoJS.HmacSHA256;

    }));
    });

    var crypto$1; // Native crypto from window (Browser)

    if (typeof window !== 'undefined' && window.crypto) {
      crypto$1 = window.crypto;
    } // Native (experimental IE 11) crypto from window (Browser)


    if (!crypto$1 && typeof window !== 'undefined' && window.msCrypto) {
      crypto$1 = window.msCrypto;
    } // Native crypto from global (NodeJS)


    if (!crypto$1 && typeof global !== 'undefined' && global.crypto) {
      crypto$1 = global.crypto;
    } // Native crypto import via require (NodeJS)


    if (!crypto$1 && typeof require === 'function') {
      try {
        crypto$1 = require('crypto');
      } catch (err) {}
    }
    /*
     * Cryptographically secure pseudorandom number generator
     * As Math.random() is cryptographically not safe to use
     */


    function cryptoSecureRandomInt() {
      if (crypto$1) {
        // Use getRandomValues method (Browser)
        if (typeof crypto$1.getRandomValues === 'function') {
          try {
            return crypto$1.getRandomValues(new Uint32Array(1))[0];
          } catch (err) {}
        } // Use randomBytes method (NodeJS)


        if (typeof crypto$1.randomBytes === 'function') {
          try {
            return crypto$1.randomBytes(4).readInt32LE();
          } catch (err) {}
        }
      }

      throw new Error('Native crypto module could not be used to get secure random number.');
    }

    /**
     * Hex encoding strategy.
     * Converts a word array to a hex string.
     * @param {WordArray} wordArray The word array.
     * @return {string} The hex string.
     * @static
     */

    function hexStringify(wordArray) {
      // Shortcuts
      var words = wordArray.words;
      var sigBytes = wordArray.sigBytes; // Convert

      var hexChars = [];

      for (var i = 0; i < sigBytes; i++) {
        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
      }

      return hexChars.join('');
    }

    var WordArray = /*#__PURE__*/function () {
      function WordArray(words, sigBytes) {
        words = this.words = words || [];

        if (sigBytes != undefined) {
          this.sigBytes = sigBytes;
        } else {
          this.sigBytes = words.length * 4;
        }
      }

      var _proto = WordArray.prototype;

      _proto.random = function random(nBytes) {
        var words = [];

        for (var i = 0; i < nBytes; i += 4) {
          words.push(cryptoSecureRandomInt());
        }

        return new WordArray(words, nBytes);
      };

      _proto.toString = function toString() {
        return hexStringify(this);
      };

      return WordArray;
    }();

    // A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/
    /*
     * Copyright (c) 2003-2005  Tom Wu
     * All Rights Reserved.
     *
     * Permission is hereby granted, free of charge, to any person obtaining
     * a copy of this software and associated documentation files (the
     * "Software"), to deal in the Software without restriction, including
     * without limitation the rights to use, copy, modify, merge, publish,
     * distribute, sublicense, and/or sell copies of the Software, and to
     * permit persons to whom the Software is furnished to do so, subject to
     * the following conditions:
     *
     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
     * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
     *
     * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
     * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
     * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
     * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
     * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     *
     * In addition, the following condition applies:
     *
     * All redistributions must retain an intact copy of this copyright notice
     * and disclaimer.
     */
    // (public) Constructor

    function BigInteger(a, b) {
      if (a != null) this.fromString(a, b);
    } // return new, unset BigInteger


    function nbi() {
      return new BigInteger(null);
    } // Bits per digit


    var dbits; // JavaScript engine analysis

    var canary = 0xdeadbeefcafe;
    var j_lm = (canary & 0xffffff) == 0xefcafe; // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.
    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)

    function am1(i, x, w, j, c, n) {
      while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
      }

      return c;
    } // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)


    function am2(i, x, w, j, c, n) {
      var xl = x & 0x7fff,
          xh = x >> 15;

      while (--n >= 0) {
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
      }

      return c;
    } // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.


    function am3(i, x, w, j, c, n) {
      var xl = x & 0x3fff,
          xh = x >> 14;

      while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
      }

      return c;
    }

    var inBrowser = typeof navigator !== 'undefined';

    if (inBrowser && j_lm && navigator.appName == 'Microsoft Internet Explorer') {
      BigInteger.prototype.am = am2;
      dbits = 30;
    } else if (inBrowser && j_lm && navigator.appName != 'Netscape') {
      BigInteger.prototype.am = am1;
      dbits = 26;
    } else {
      // Mozilla/Netscape seems to prefer am3
      BigInteger.prototype.am = am3;
      dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions

    var BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';
    var BI_RC = new Array();
    var rr$1, vv;
    rr$1 = '0'.charCodeAt(0);

    for (vv = 0; vv <= 9; ++vv) {
      BI_RC[rr$1++] = vv;
    }

    rr$1 = 'a'.charCodeAt(0);

    for (vv = 10; vv < 36; ++vv) {
      BI_RC[rr$1++] = vv;
    }

    rr$1 = 'A'.charCodeAt(0);

    for (vv = 10; vv < 36; ++vv) {
      BI_RC[rr$1++] = vv;
    }

    function int2char(n) {
      return BI_RM.charAt(n);
    }

    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return c == null ? -1 : c;
    } // (protected) copy this to r


    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i) {
        r[i] = this[i];
      }

      r.t = this.t;
      r.s = this.s;
    } // (protected) set from integer value x, -DV <= x < DV


    function bnpFromInt(x) {
      this.t = 1;
      this.s = x < 0 ? -1 : 0;
      if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;
    } // return bigint initialized to value


    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    } // (protected) set from string and radix


    function bnpFromString(s, b) {
      var k;
      if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
      this.t = 0;
      this.s = 0;
      var i = s.length,
          mi = false,
          sh = 0;

      while (--i >= 0) {
        var x = intAt(s, i);

        if (x < 0) {
          if (s.charAt(i) == '-') mi = true;
          continue;
        }

        mi = false;
        if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {
          this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
          this[this.t++] = x >> this.DB - sh;
        } else this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
      }

      this.clamp();
      if (mi) BigInteger.ZERO.subTo(this, this);
    } // (protected) clamp off excess high words


    function bnpClamp() {
      var c = this.s & this.DM;

      while (this.t > 0 && this[this.t - 1] == c) {
        --this.t;
      }
    } // (public) return string representation in given radix


    function bnToString(b) {
      if (this.s < 0) return '-' + this.negate().toString(b);
      var k;
      if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
      var km = (1 << k) - 1,
          d,
          m = false,
          r = '',
          i = this.t;
      var p = this.DB - i * this.DB % k;

      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }

        while (i >= 0) {
          if (p < k) {
            d = (this[i] & (1 << p) - 1) << k - p;
            d |= this[--i] >> (p += this.DB - k);
          } else {
            d = this[i] >> (p -= k) & km;

            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }

          if (d > 0) m = true;
          if (m) r += int2char(d);
        }
      }

      return m ? r : '0';
    } // (public) -this


    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    } // (public) |this|


    function bnAbs() {
      return this.s < 0 ? this.negate() : this;
    } // (public) return + if this > a, - if this < a, 0 if equal


    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0) return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0) return this.s < 0 ? -r : r;

      while (--i >= 0) {
        if ((r = this[i] - a[i]) != 0) return r;
      }

      return 0;
    } // returns bit length of the integer x


    function nbits(x) {
      var r = 1,
          t;

      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }

      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }

      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }

      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }

      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }

      return r;
    } // (public) return the number of bits in "this"


    function bnBitLength() {
      if (this.t <= 0) return 0;
      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
    } // (protected) r = this << n*DB


    function bnpDLShiftTo(n, r) {
      var i;

      for (i = this.t - 1; i >= 0; --i) {
        r[i + n] = this[i];
      }

      for (i = n - 1; i >= 0; --i) {
        r[i] = 0;
      }

      r.t = this.t + n;
      r.s = this.s;
    } // (protected) r = this >> n*DB


    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i) {
        r[i - n] = this[i];
      }

      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    } // (protected) r = this << n


    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB),
          c = this.s << bs & this.DM,
          i;

      for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = this[i] >> cbs | c;
        c = (this[i] & bm) << bs;
      }

      for (i = ds - 1; i >= 0; --i) {
        r[i] = 0;
      }

      r[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    } // (protected) r = this >> n


    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);

      if (ds >= this.t) {
        r.t = 0;
        return;
      }

      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r[0] = this[ds] >> bs;

      for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
      }

      if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    } // (protected) r = this - a


    function bnpSubTo(a, r) {
      var i = 0,
          c = 0,
          m = Math.min(a.t, this.t);

      while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }

      if (a.t < this.t) {
        c -= a.s;

        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }

        c += this.s;
      } else {
        c += this.s;

        while (i < a.t) {
          c -= a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }

        c -= a.s;
      }

      r.s = c < 0 ? -1 : 0;
      if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    } // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.


    function bnpMultiplyTo(a, r) {
      var x = this.abs(),
          y = a.abs();
      var i = x.t;
      r.t = i + y.t;

      while (--i >= 0) {
        r[i] = 0;
      }

      for (i = 0; i < y.t; ++i) {
        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
      }

      r.s = 0;
      r.clamp();
      if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
    } // (protected) r = this^2, r != this (HAC 14.16)


    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2 * x.t;

      while (--i >= 0) {
        r[i] = 0;
      }

      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);

        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r[i + x.t] -= x.DV;
          r[i + x.t + 1] = 1;
        }
      }

      if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    } // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.


    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0) return;
      var pt = this.abs();

      if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
      }

      if (r == null) r = nbi();
      var y = nbi(),
          ts = this.s,
          ms = m.s;
      var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus

      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }

      var ys = y.t;
      var y0 = y[ys - 1];
      if (y0 == 0) return;
      var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt,
          d2 = (1 << this.F1) / yt,
          e = 1 << this.F2;
      var i = r.t,
          j = i - ys,
          t = q == null ? nbi() : q;
      y.dlShiftTo(j, t);

      if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
      }

      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y); // "negative" y so we can replace sub with am later

      while (y.t < ys) {
        y[y.t++] = 0;
      }

      while (--j >= 0) {
        // Estimate quotient digit
        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);

        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          // Try it out
          y.dlShiftTo(j, t);
          r.subTo(t, r);

          while (r[i] < --qd) {
            r.subTo(t, r);
          }
        }
      }

      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
      }

      r.t = ys;
      r.clamp();
      if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder

      if (ts < 0) BigInteger.ZERO.subTo(r, r);
    } // (public) this mod a


    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
      return r;
    } // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.


    function bnpInvDigit() {
      if (this.t < 1) return 0;
      var x = this[0];
      if ((x & 1) == 0) return 0;
      var y = x & 3; // y == 1/x mod 2^2

      y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4

      y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8

      y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
      // last step - calculate inverse mod DV directly;
      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints

      y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
      // we really want the negative inverse, and -DV < y < DV

      return y > 0 ? this.DV - y : -y;
    }

    function bnEquals(a) {
      return this.compareTo(a) == 0;
    } // (protected) r = this + a


    function bnpAddTo(a, r) {
      var i = 0,
          c = 0,
          m = Math.min(a.t, this.t);

      while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }

      if (a.t < this.t) {
        c += a.s;

        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }

        c += this.s;
      } else {
        c += this.s;

        while (i < a.t) {
          c += a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }

        c += a.s;
      }

      r.s = c < 0 ? -1 : 0;
      if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    } // (public) this + a


    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    } // (public) this - a


    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    } // (public) this * a


    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    } // (public) this / a


    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    } // Montgomery reduction


    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 0x7fff;
      this.mph = this.mp >> 15;
      this.um = (1 << m.DB - 15) - 1;
      this.mt2 = 2 * m.t;
    } // xR mod m


    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
      return r;
    } // x/R mod m


    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    } // x = x/R mod m (HAC 14.32)


    function montReduce(x) {
      while (x.t <= this.mt2) {
        // pad x so am has enough room later
        x[x.t++] = 0;
      }

      for (var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call

        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry

        while (x[j] >= x.DV) {
          x[j] -= x.DV;
          x[++j]++;
        }
      }

      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    } // r = "x^2/R mod m"; x != r


    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    } // r = "xy/R mod m"; x,y != r


    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo; // (public) this^e % m (HAC 14.85)

    function bnModPow(e, m, callback) {
      var i = e.bitLength(),
          k,
          r = nbv(1),
          z = new Montgomery(m);
      if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6; // precomputation

      var g = new Array(),
          n = 3,
          k1 = k - 1,
          km = (1 << k) - 1;
      g[1] = z.convert(this);

      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);

        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }

      var j = e.t - 1,
          w,
          is1 = true,
          r2 = nbi(),
          t;
      i = nbits(e[j]) - 1;

      while (j >= 0) {
        if (i >= k1) w = e[j] >> i - k1 & km;else {
          w = (e[j] & (1 << i + 1) - 1) << k1 - i;
          if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
        }
        n = k;

        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }

        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }

        if (is1) {
          // ret == 1, don't bother squaring or multiplying it
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }

          if (n > 0) z.sqrTo(r, r2);else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }

        while (j >= 0 && (e[j] & 1 << i) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;

          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }

      var result = z.revert(r);
      callback(null, result);
      return result;
    } // protected


    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.addTo = bnpAddTo; // public

    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.modPow = bnModPow; // "constants"

    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a Buffer with a sequence of random nBytes
     *
     * @param {number} nBytes
     * @returns {Buffer} fixed-length sequence of random bytes
     */

    function randomBytes(nBytes) {
      return buffer.Buffer.from(new WordArray().random(nBytes).toString(), 'hex');
    }
    /**
     * Tests if a hex string has it most significant bit set (case-insensitive regex)
     */

    var HEX_MSB_REGEX = /^[89a-f]/i;
    var initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';
    var newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';
    /** @class */

    var AuthenticationHelper = /*#__PURE__*/function () {
      /**
       * Constructs a new AuthenticationHelper object
       * @param {string} PoolName Cognito user pool name.
       */
      function AuthenticationHelper(PoolName) {
        this.N = new BigInteger(initN, 16);
        this.g = new BigInteger('2', 16);
        this.k = new BigInteger(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
        this.smallAValue = this.generateRandomSmallA();
        this.getLargeAValue(function () {});
        this.infoBits = buffer.Buffer.from('Caldera Derived Key', 'utf8');
        this.poolName = PoolName;
      }
      /**
       * @returns {BigInteger} small A, a random number
       */


      var _proto = AuthenticationHelper.prototype;

      _proto.getSmallAValue = function getSmallAValue() {
        return this.smallAValue;
      }
      /**
       * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
       * @returns {void}
       */
      ;

      _proto.getLargeAValue = function getLargeAValue(callback) {
        var _this = this;

        if (this.largeAValue) {
          callback(null, this.largeAValue);
        } else {
          this.calculateA(this.smallAValue, function (err, largeAValue) {
            if (err) {
              callback(err, null);
            }

            _this.largeAValue = largeAValue;
            callback(null, _this.largeAValue);
          });
        }
      }
      /**
       * helper function to generate a random big integer
       * @returns {BigInteger} a random value.
       * @private
       */
      ;

      _proto.generateRandomSmallA = function generateRandomSmallA() {
        // This will be interpreted as a postive 128-bit integer
        var hexRandom = randomBytes(128).toString('hex');
        var randomBigInt = new BigInteger(hexRandom, 16); // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)

        return randomBigInt;
      }
      /**
       * helper function to generate a random string
       * @returns {string} a random value.
       * @private
       */
      ;

      _proto.generateRandomString = function generateRandomString() {
        return randomBytes(40).toString('base64');
      }
      /**
       * @returns {string} Generated random value included in password hash.
       */
      ;

      _proto.getRandomPassword = function getRandomPassword() {
        return this.randomPassword;
      }
      /**
       * @returns {string} Generated random value included in devices hash.
       */
      ;

      _proto.getSaltDevices = function getSaltDevices() {
        return this.SaltToHashDevices;
      }
      /**
       * @returns {string} Value used to verify devices.
       */
      ;

      _proto.getVerifierDevices = function getVerifierDevices() {
        return this.verifierDevices;
      }
      /**
       * Generate salts and compute verifier.
       * @param {string} deviceGroupKey Devices to generate verifier for.
       * @param {string} username User to generate verifier for.
       * @param {nodeCallback<null>} callback Called with (err, null)
       * @returns {void}
       */
      ;

      _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
        var _this2 = this;

        this.randomPassword = this.generateRandomString();
        var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
        var hashedString = this.hash(combinedString);
        var hexRandom = randomBytes(16).toString('hex'); // The random hex will be unambiguously represented as a postive integer

        this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));
        this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {
          if (err) {
            callback(err, null);
          }

          _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
          callback(null, null);
        });
      }
      /**
       * Calculate the client's public value A = g^a%N
       * with the generated random number a
       * @param {BigInteger} a Randomly generated small A.
       * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
       * @returns {void}
       * @private
       */
      ;

      _proto.calculateA = function calculateA(a, callback) {
        var _this3 = this;

        this.g.modPow(a, this.N, function (err, A) {
          if (err) {
            callback(err, null);
          }

          if (A.mod(_this3.N).equals(BigInteger.ZERO)) {
            callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);
          }

          callback(null, A);
        });
      }
      /**
       * Calculate the client's value U which is the hash of A and B
       * @param {BigInteger} A Large A value.
       * @param {BigInteger} B Server B value.
       * @returns {BigInteger} Computed U value.
       * @private
       */
      ;

      _proto.calculateU = function calculateU(A, B) {
        this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));
        var finalU = new BigInteger(this.UHexHash, 16);
        return finalU;
      }
      /**
       * Calculate a hash from a bitArray
       * @param {Buffer} buf Value to hash.
       * @returns {String} Hex-encoded hash.
       * @private
       */
      ;

      _proto.hash = function hash(buf) {
        var str = buf instanceof buffer.Buffer ? core.lib.WordArray.create(buf) : buf;
        var hashHex = sha256(str).toString();
        return new Array(64 - hashHex.length).join('0') + hashHex;
      }
      /**
       * Calculate a hash from a hex string
       * @param {String} hexStr Value to hash.
       * @returns {String} Hex-encoded hash.
       * @private
       */
      ;

      _proto.hexHash = function hexHash(hexStr) {
        return this.hash(buffer.Buffer.from(hexStr, 'hex'));
      }
      /**
       * Standard hkdf algorithm
       * @param {Buffer} ikm Input key material.
       * @param {Buffer} salt Salt value.
       * @returns {Buffer} Strong key material.
       * @private
       */
      ;

      _proto.computehkdf = function computehkdf(ikm, salt) {
        var infoBitsWordArray = core.lib.WordArray.create(buffer.Buffer.concat([this.infoBits, buffer.Buffer.from(String.fromCharCode(1), 'utf8')]));
        var ikmWordArray = ikm instanceof buffer.Buffer ? core.lib.WordArray.create(ikm) : ikm;
        var saltWordArray = salt instanceof buffer.Buffer ? core.lib.WordArray.create(salt) : salt;
        var prk = hmacSha256(ikmWordArray, saltWordArray);
        var hmac = hmacSha256(infoBitsWordArray, prk);
        return buffer.Buffer.from(hmac.toString(), 'hex').slice(0, 16);
      }
      /**
       * Calculates the final hkdf based on computed S value, and computed U value and the key
       * @param {String} username Username.
       * @param {String} password Password.
       * @param {BigInteger} serverBValue Server B value.
       * @param {BigInteger} salt Generated salt.
       * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)
       * @returns {void}
       */
      ;

      _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
        var _this4 = this;

        if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {
          throw new Error('B cannot be zero.');
        }

        this.UValue = this.calculateU(this.largeAValue, serverBValue);

        if (this.UValue.equals(BigInteger.ZERO)) {
          throw new Error('U cannot be zero.');
        }

        var usernamePassword = "" + this.poolName + username + ":" + password;
        var usernamePasswordHash = this.hash(usernamePassword);
        var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
        this.calculateS(xValue, serverBValue, function (err, sValue) {
          if (err) {
            callback(err, null);
          }

          var hkdf = _this4.computehkdf(buffer.Buffer.from(_this4.padHex(sValue), 'hex'), buffer.Buffer.from(_this4.padHex(_this4.UValue), 'hex'));

          callback(null, hkdf);
        });
      }
      /**
       * Calculates the S value used in getPasswordAuthenticationKey
       * @param {BigInteger} xValue Salted password hash value.
       * @param {BigInteger} serverBValue Server B value.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
        var _this5 = this;

        this.g.modPow(xValue, this.N, function (err, gModPowXN) {
          if (err) {
            callback(err, null);
          }

          var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
          intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {
            if (err2) {
              callback(err2, null);
            }

            callback(null, result.mod(_this5.N));
          });
        });
      }
      /**
       * Return constant newPasswordRequiredChallengeUserAttributePrefix
       * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value
       */
      ;

      _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
        return newPasswordRequiredChallengeUserAttributePrefix;
      }
      /**
       * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.
       *
       * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a
       * byte array containing the two's-complement representation of a BigInteger. The array contains
       * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.
       *
       * Examples showing how ambiguity is avoided by left padding with:
       * 	"00" (for positive values where the most-significant-bit is set)
       *  "FF" (for negative values where the most-significant-bit is set)
       *
       * padHex(bigInteger.fromInt(-236))  === "FF14"
       * padHex(bigInteger.fromInt(20))    === "14"
       *
       * padHex(bigInteger.fromInt(-200))  === "FF38"
       * padHex(bigInteger.fromInt(56))    === "38"
       *
       * padHex(bigInteger.fromInt(-20))   === "EC"
       * padHex(bigInteger.fromInt(236))   === "00EC"
       *
       * padHex(bigInteger.fromInt(-56))   === "C8"
       * padHex(bigInteger.fromInt(200))   === "00C8"
       *
       * @param {BigInteger} bigInt Number to encode.
       * @returns {String} even-length hex string of the two's complement encoding.
       */
      ;

      _proto.padHex = function padHex(bigInt) {
        if (!(bigInt instanceof BigInteger)) {
          throw new Error('Not a BigInteger');
        }

        var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;
        /* Get a hex string for abs(bigInt) */

        var hexStr = bigInt.abs().toString(16);
        /* Pad hex to even length if needed */

        hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
        /* Prepend "00" if the most significant bit is set */

        hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;

        if (isNegative) {
          /* Flip the bits of the representation */
          var invertedNibbles = hexStr.split('').map(function (x) {
            var invertedNibble = ~parseInt(x, 16) & 0xf;
            return '0123456789ABCDEF'.charAt(invertedNibble);
          }).join('');
          /* After flipping the bits, add one to get the 2's complement representation */

          var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);
          hexStr = flippedBitsBI.toString(16);
          /*
          For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128
          		Any sequence of '1' bits on the left can always be substituted with a single '1' bit
          without changing the represented value.
          		This only happens in the case when the input is 80...00
          */

          if (hexStr.toUpperCase().startsWith('FF8')) {
            hexStr = hexStr.substring(2);
          }
        }

        return hexStr;
      };

      return AuthenticationHelper;
    }();

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */
    /** @class */

    var CognitoJwtToken = /*#__PURE__*/function () {
      /**
       * Constructs a new CognitoJwtToken object
       * @param {string=} token The JWT token.
       */
      function CognitoJwtToken(token) {
        // Assign object
        this.jwtToken = token || '';
        this.payload = this.decodePayload();
      }
      /**
       * @returns {string} the record's token.
       */


      var _proto = CognitoJwtToken.prototype;

      _proto.getJwtToken = function getJwtToken() {
        return this.jwtToken;
      }
      /**
       * @returns {int} the token's expiration (exp member).
       */
      ;

      _proto.getExpiration = function getExpiration() {
        return this.payload.exp;
      }
      /**
       * @returns {int} the token's "issued at" (iat member).
       */
      ;

      _proto.getIssuedAt = function getIssuedAt() {
        return this.payload.iat;
      }
      /**
       * @returns {object} the token's payload.
       */
      ;

      _proto.decodePayload = function decodePayload() {
        var payload = this.jwtToken.split('.')[1];

        try {
          return JSON.parse(buffer.Buffer.from(payload, 'base64').toString('utf8'));
        } catch (err) {
          return {};
        }
      };

      return CognitoJwtToken;
    }();

    function _inheritsLoose$2(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf$2(subClass, superClass); }

    function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }
    /** @class */

    var CognitoAccessToken = /*#__PURE__*/function (_CognitoJwtToken) {
      _inheritsLoose$2(CognitoAccessToken, _CognitoJwtToken);

      /**
       * Constructs a new CognitoAccessToken object
       * @param {string=} AccessToken The JWT access token.
       */
      function CognitoAccessToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            AccessToken = _ref.AccessToken;

        return _CognitoJwtToken.call(this, AccessToken || '') || this;
      }

      return CognitoAccessToken;
    }(CognitoJwtToken);

    function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf$1(subClass, superClass); }

    function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }
    /** @class */

    var CognitoIdToken = /*#__PURE__*/function (_CognitoJwtToken) {
      _inheritsLoose$1(CognitoIdToken, _CognitoJwtToken);

      /**
       * Constructs a new CognitoIdToken object
       * @param {string=} IdToken The JWT Id token
       */
      function CognitoIdToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            IdToken = _ref.IdToken;

        return _CognitoJwtToken.call(this, IdToken || '') || this;
      }

      return CognitoIdToken;
    }(CognitoJwtToken);

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */

    /** @class */
    var CognitoRefreshToken = /*#__PURE__*/function () {
      /**
       * Constructs a new CognitoRefreshToken object
       * @param {string=} RefreshToken The JWT refresh token.
       */
      function CognitoRefreshToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            RefreshToken = _ref.RefreshToken;

        // Assign object
        this.token = RefreshToken || '';
      }
      /**
       * @returns {string} the record's token.
       */


      var _proto = CognitoRefreshToken.prototype;

      _proto.getToken = function getToken() {
        return this.token;
      };

      return CognitoRefreshToken;
    }();

    var encBase64 = createCommonjsModule(function (module, exports) {
    (function (root, factory) {
    	{
    		// CommonJS
    		module.exports = factory(core);
    	}
    }(commonjsGlobal, function (CryptoJS) {

    	(function () {
    	    // Shortcuts
    	    var C = CryptoJS;
    	    var C_lib = C.lib;
    	    var WordArray = C_lib.WordArray;
    	    var C_enc = C.enc;

    	    /**
    	     * Base64 encoding strategy.
    	     */
    	    C_enc.Base64 = {
    	        /**
    	         * Converts a word array to a Base64 string.
    	         *
    	         * @param {WordArray} wordArray The word array.
    	         *
    	         * @return {string} The Base64 string.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
    	         */
    	        stringify: function (wordArray) {
    	            // Shortcuts
    	            var words = wordArray.words;
    	            var sigBytes = wordArray.sigBytes;
    	            var map = this._map;

    	            // Clamp excess bits
    	            wordArray.clamp();

    	            // Convert
    	            var base64Chars = [];
    	            for (var i = 0; i < sigBytes; i += 3) {
    	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
    	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
    	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

    	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

    	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
    	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
    	                }
    	            }

    	            // Add padding
    	            var paddingChar = map.charAt(64);
    	            if (paddingChar) {
    	                while (base64Chars.length % 4) {
    	                    base64Chars.push(paddingChar);
    	                }
    	            }

    	            return base64Chars.join('');
    	        },

    	        /**
    	         * Converts a Base64 string to a word array.
    	         *
    	         * @param {string} base64Str The Base64 string.
    	         *
    	         * @return {WordArray} The word array.
    	         *
    	         * @static
    	         *
    	         * @example
    	         *
    	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
    	         */
    	        parse: function (base64Str) {
    	            // Shortcuts
    	            var base64StrLength = base64Str.length;
    	            var map = this._map;
    	            var reverseMap = this._reverseMap;

    	            if (!reverseMap) {
    	                    reverseMap = this._reverseMap = [];
    	                    for (var j = 0; j < map.length; j++) {
    	                        reverseMap[map.charCodeAt(j)] = j;
    	                    }
    	            }

    	            // Ignore padding
    	            var paddingChar = map.charAt(64);
    	            if (paddingChar) {
    	                var paddingIndex = base64Str.indexOf(paddingChar);
    	                if (paddingIndex !== -1) {
    	                    base64StrLength = paddingIndex;
    	                }
    	            }

    	            // Convert
    	            return parseLoop(base64Str, base64StrLength, reverseMap);

    	        },

    	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    	    };

    	    function parseLoop(base64Str, base64StrLength, reverseMap) {
    	      var words = [];
    	      var nBytes = 0;
    	      for (var i = 0; i < base64StrLength; i++) {
    	          if (i % 4) {
    	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
    	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
    	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
    	              nBytes++;
    	          }
    	      }
    	      return WordArray.create(words, nBytes);
    	    }
    	}());


    	return CryptoJS.enc.Base64;

    }));
    });

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */

    /** @class */
    var CognitoUserSession = /*#__PURE__*/function () {
      /**
       * Constructs a new CognitoUserSession object
       * @param {CognitoIdToken} IdToken The session's Id token.
       * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.
       * @param {CognitoAccessToken} AccessToken The session's access token.
       * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.
       */
      function CognitoUserSession(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            IdToken = _ref.IdToken,
            RefreshToken = _ref.RefreshToken,
            AccessToken = _ref.AccessToken,
            ClockDrift = _ref.ClockDrift;

        if (AccessToken == null || IdToken == null) {
          throw new Error('Id token and Access Token must be present.');
        }

        this.idToken = IdToken;
        this.refreshToken = RefreshToken;
        this.accessToken = AccessToken;
        this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;
      }
      /**
       * @returns {CognitoIdToken} the session's Id token
       */


      var _proto = CognitoUserSession.prototype;

      _proto.getIdToken = function getIdToken() {
        return this.idToken;
      }
      /**
       * @returns {CognitoRefreshToken} the session's refresh token
       */
      ;

      _proto.getRefreshToken = function getRefreshToken() {
        return this.refreshToken;
      }
      /**
       * @returns {CognitoAccessToken} the session's access token
       */
      ;

      _proto.getAccessToken = function getAccessToken() {
        return this.accessToken;
      }
      /**
       * @returns {int} the session's clock drift
       */
      ;

      _proto.getClockDrift = function getClockDrift() {
        return this.clockDrift;
      }
      /**
       * @returns {int} the computer's clock drift
       */
      ;

      _proto.calculateClockDrift = function calculateClockDrift() {
        var now = Math.floor(new Date() / 1000);
        var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
        return now - iat;
      }
      /**
       * Checks to see if the session is still valid based on session expiry information found
       * in tokens and the current time (adjusted with clock drift)
       * @returns {boolean} if the session is still valid
       */
      ;

      _proto.isValid = function isValid() {
        var now = Math.floor(new Date() / 1000);
        var adjusted = now - this.clockDrift;
        return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
      };

      return CognitoUserSession;
    }();

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */
    var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    /** @class */

    var DateHelper = /*#__PURE__*/function () {
      function DateHelper() {}

      var _proto = DateHelper.prototype;

      /**
       * @returns {string} The current time in "ddd MMM D HH:mm:ss UTC YYYY" format.
       */
      _proto.getNowString = function getNowString() {
        var now = new Date();
        var weekDay = weekNames[now.getUTCDay()];
        var month = monthNames[now.getUTCMonth()];
        var day = now.getUTCDate();
        var hours = now.getUTCHours();

        if (hours < 10) {
          hours = "0" + hours;
        }

        var minutes = now.getUTCMinutes();

        if (minutes < 10) {
          minutes = "0" + minutes;
        }

        var seconds = now.getUTCSeconds();

        if (seconds < 10) {
          seconds = "0" + seconds;
        }

        var year = now.getUTCFullYear(); // ddd MMM D HH:mm:ss UTC YYYY

        var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
        return dateNow;
      };

      return DateHelper;
    }();

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */

    /** @class */
    var CognitoUserAttribute = /*#__PURE__*/function () {
      /**
       * Constructs a new CognitoUserAttribute object
       * @param {string=} Name The record's name
       * @param {string=} Value The record's value
       */
      function CognitoUserAttribute(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            Name = _ref.Name,
            Value = _ref.Value;

        this.Name = Name || '';
        this.Value = Value || '';
      }
      /**
       * @returns {string} the record's value.
       */


      var _proto = CognitoUserAttribute.prototype;

      _proto.getValue = function getValue() {
        return this.Value;
      }
      /**
       * Sets the record's value.
       * @param {string} value The new value.
       * @returns {CognitoUserAttribute} The record for method chaining.
       */
      ;

      _proto.setValue = function setValue(value) {
        this.Value = value;
        return this;
      }
      /**
       * @returns {string} the record's name.
       */
      ;

      _proto.getName = function getName() {
        return this.Name;
      }
      /**
       * Sets the record's name
       * @param {string} name The new name.
       * @returns {CognitoUserAttribute} The record for method chaining.
       */
      ;

      _proto.setName = function setName(name) {
        this.Name = name;
        return this;
      }
      /**
       * @returns {string} a string representation of the record.
       */
      ;

      _proto.toString = function toString() {
        return JSON.stringify(this);
      }
      /**
       * @returns {object} a flat object representing the record.
       */
      ;

      _proto.toJSON = function toJSON() {
        return {
          Name: this.Name,
          Value: this.Value
        };
      };

      return CognitoUserAttribute;
    }();

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */
    var dataMemory = {};
    /** @class */

    var MemoryStorage = /*#__PURE__*/function () {
      function MemoryStorage() {}

      /**
       * This is used to set a specific item in storage
       * @param {string} key - the key for the item
       * @param {object} value - the value
       * @returns {string} value that was set
       */
      MemoryStorage.setItem = function setItem(key, value) {
        dataMemory[key] = value;
        return dataMemory[key];
      }
      /**
       * This is used to get a specific key from storage
       * @param {string} key - the key for the item
       * This is used to clear the storage
       * @returns {string} the data item
       */
      ;

      MemoryStorage.getItem = function getItem(key) {
        return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;
      }
      /**
       * This is used to remove an item from storage
       * @param {string} key - the key being set
       * @returns {boolean} return true
       */
      ;

      MemoryStorage.removeItem = function removeItem(key) {
        return delete dataMemory[key];
      }
      /**
       * This is used to clear the storage
       * @returns {string} nothing
       */
      ;

      MemoryStorage.clear = function clear() {
        dataMemory = {};
        return dataMemory;
      };

      return MemoryStorage;
    }();
    /** @class */

    var StorageHelper = /*#__PURE__*/function () {
      /**
       * This is used to get a storage object
       * @returns {object} the storage
       */
      function StorageHelper() {
        try {
          this.storageWindow = window.localStorage;
          this.storageWindow.setItem('aws.cognito.test-ls', 1);
          this.storageWindow.removeItem('aws.cognito.test-ls');
        } catch (exception) {
          this.storageWindow = MemoryStorage;
        }
      }
      /**
       * This is used to return the storage
       * @returns {object} the storage
       */


      var _proto = StorageHelper.prototype;

      _proto.getStorage = function getStorage() {
        return this.storageWindow;
      };

      return StorageHelper;
    }();

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @callback nodeCallback
     * @template T result
     * @param {*} err The operation failure reason, or null.
     * @param {T} result The operation result.
     */

    /**
     * @callback onFailure
     * @param {*} err Failure reason.
     */

    /**
     * @callback onSuccess
     * @template T result
     * @param {T} result The operation result.
     */

    /**
     * @callback mfaRequired
     * @param {*} details MFA challenge details.
     */

    /**
     * @callback customChallenge
     * @param {*} details Custom challenge details.
     */

    /**
     * @callback inputVerificationCode
     * @param {*} data Server response.
     */

    /**
     * @callback authSuccess
     * @param {CognitoUserSession} session The new session.
     * @param {bool=} userConfirmationNecessary User must be confirmed.
     */

    var isBrowser = typeof navigator !== 'undefined';
    var userAgent = isBrowser ? navigator.userAgent : 'nodejs';
    /** @class */

    var CognitoUser = /*#__PURE__*/function () {
      /**
       * Constructs a new CognitoUser object
       * @param {object} data Creation options
       * @param {string} data.Username The user's username.
       * @param {CognitoUserPool} data.Pool Pool containing the user.
       * @param {object} data.Storage Optional storage object.
       */
      function CognitoUser(data) {
        if (data == null || data.Username == null || data.Pool == null) {
          throw new Error('Username and Pool information are required.');
        }

        this.username = data.Username || '';
        this.pool = data.Pool;
        this.Session = null;
        this.client = data.Pool.client;
        this.signInUserSession = null;
        this.authenticationFlowType = 'USER_SRP_AUTH';
        this.storage = data.Storage || new StorageHelper().getStorage();
        this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
      }
      /**
       * Sets the session for this user
       * @param {CognitoUserSession} signInUserSession the session
       * @returns {void}
       */


      var _proto = CognitoUser.prototype;

      _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
        this.clearCachedUserData();
        this.signInUserSession = signInUserSession;
        this.cacheTokens();
      }
      /**
       * @returns {CognitoUserSession} the current session for this user
       */
      ;

      _proto.getSignInUserSession = function getSignInUserSession() {
        return this.signInUserSession;
      }
      /**
       * @returns {string} the user's username
       */
      ;

      _proto.getUsername = function getUsername() {
        return this.username;
      }
      /**
       * @returns {String} the authentication flow type
       */
      ;

      _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
        return this.authenticationFlowType;
      }
      /**
       * sets authentication flow type
       * @param {string} authenticationFlowType New value.
       * @returns {void}
       */
      ;

      _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
        this.authenticationFlowType = authenticationFlowType;
      }
      /**
       * This is used for authenticating the user through the custom authentication flow.
       * @param {AuthenticationDetails} authDetails Contains the authentication data
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *        response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */
      ;

      _proto.initiateAuth = function initiateAuth(authDetails, callback) {
        var _this = this;

        var authParameters = authDetails.getAuthParameters();
        authParameters.USERNAME = this.username;
        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
        var jsonReq = {
          AuthFlow: 'CUSTOM_AUTH',
          ClientId: this.pool.getClientId(),
          AuthParameters: authParameters,
          ClientMetadata: clientMetaData
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('InitiateAuth', jsonReq, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          var challengeName = data.ChallengeName;
          var challengeParameters = data.ChallengeParameters;

          if (challengeName === 'CUSTOM_CHALLENGE') {
            _this.Session = data.Session;
            return callback.customChallenge(challengeParameters);
          }

          _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);

          _this.cacheTokens();

          return callback.onSuccess(_this.signInUserSession);
        });
      }
      /**
       * This is used for authenticating the user.
       * stuff
       * @param {AuthenticationDetails} authDetails Contains the authentication data
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {newPasswordRequired} callback.newPasswordRequired new
       *        password and any required attributes are required to continue
       * @param {mfaRequired} callback.mfaRequired MFA code
       *        required to continue.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *        response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */
      ;

      _proto.authenticateUser = function authenticateUser(authDetails, callback) {
        if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {
          return this.authenticateUserPlainUsernamePassword(authDetails, callback);
        } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {
          return this.authenticateUserDefaultAuth(authDetails, callback);
        }

        return callback.onFailure(new Error('Authentication flow type is invalid.'));
      }
      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       * It calls the AuthenticationHelper for SRP related
       * stuff
       * @param {AuthenticationDetails} authDetails Contains the authentication data
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {newPasswordRequired} callback.newPasswordRequired new
       *        password and any required attributes are required to continue
       * @param {mfaRequired} callback.mfaRequired MFA code
       *        required to continue.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *        response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */
      ;

      _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
        var _this2 = this;

        var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);
        var dateHelper = new DateHelper();
        var serverBValue;
        var salt;
        var authParameters = {};

        if (this.deviceKey != null) {
          authParameters.DEVICE_KEY = this.deviceKey;
        }

        authParameters.USERNAME = this.username;
        authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {
          // getLargeAValue callback start
          if (errOnAValue) {
            callback.onFailure(errOnAValue);
          }

          authParameters.SRP_A = aValue.toString(16);

          if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {
            authParameters.CHALLENGE_NAME = 'SRP_A';
          }

          var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
          var jsonReq = {
            AuthFlow: _this2.authenticationFlowType,
            ClientId: _this2.pool.getClientId(),
            AuthParameters: authParameters,
            ClientMetadata: clientMetaData
          };

          if (_this2.getUserContextData(_this2.username)) {
            jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
          }

          _this2.client.request('InitiateAuth', jsonReq, function (err, data) {
            if (err) {
              return callback.onFailure(err);
            }

            var challengeParameters = data.ChallengeParameters;
            _this2.username = challengeParameters.USER_ID_FOR_SRP;
            _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
            serverBValue = new BigInteger(challengeParameters.SRP_B, 16);
            salt = new BigInteger(challengeParameters.SALT, 16);

            _this2.getCachedDeviceKeyAndPassword();

            authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {
              // getPasswordAuthenticationKey callback start
              if (errOnHkdf) {
                callback.onFailure(errOnHkdf);
              }

              var dateNow = dateHelper.getNowString();
              var message = core.lib.WordArray.create(buffer.Buffer.concat([buffer.Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), buffer.Buffer.from(_this2.username, 'utf8'), buffer.Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), buffer.Buffer.from(dateNow, 'utf8')]));
              var key = core.lib.WordArray.create(hkdf);
              var signatureString = encBase64.stringify(hmacSha256(message, key));
              var challengeResponses = {};
              challengeResponses.USERNAME = _this2.username;
              challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
              challengeResponses.TIMESTAMP = dateNow;
              challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;

              if (_this2.deviceKey != null) {
                challengeResponses.DEVICE_KEY = _this2.deviceKey;
              }

              var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {
                return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {
                  if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {
                    challengeResponses.DEVICE_KEY = null;
                    _this2.deviceKey = null;
                    _this2.randomPassword = null;
                    _this2.deviceGroupKey = null;

                    _this2.clearCachedDeviceKeyAndPassword();

                    return respondToAuthChallenge(challenge, challengeCallback);
                  }

                  return challengeCallback(errChallenge, dataChallenge);
                });
              };

              var jsonReqResp = {
                ChallengeName: 'PASSWORD_VERIFIER',
                ClientId: _this2.pool.getClientId(),
                ChallengeResponses: challengeResponses,
                Session: data.Session,
                ClientMetadata: clientMetaData
              };

              if (_this2.getUserContextData()) {
                jsonReqResp.UserContextData = _this2.getUserContextData();
              }

              respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {
                if (errAuthenticate) {
                  return callback.onFailure(errAuthenticate);
                }

                return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
              });
              return undefined; // getPasswordAuthenticationKey callback end
            });
            return undefined;
          }); // getLargeAValue callback end

        });
      }
      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       * @param {AuthenticationDetails} authDetails Contains the authentication data.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {mfaRequired} callback.mfaRequired MFA code
       *        required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */
      ;

      _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
        var _this3 = this;

        var authParameters = {};
        authParameters.USERNAME = this.username;
        authParameters.PASSWORD = authDetails.getPassword();

        if (!authParameters.PASSWORD) {
          callback.onFailure(new Error('PASSWORD parameter is required'));
          return;
        }

        var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);
        this.getCachedDeviceKeyAndPassword();

        if (this.deviceKey != null) {
          authParameters.DEVICE_KEY = this.deviceKey;
        }

        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
        var jsonReq = {
          AuthFlow: 'USER_PASSWORD_AUTH',
          ClientId: this.pool.getClientId(),
          AuthParameters: authParameters,
          ClientMetadata: clientMetaData
        };

        if (this.getUserContextData(this.username)) {
          jsonReq.UserContextData = this.getUserContextData(this.username);
        } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,
        // Cognito UserPools verifies password and returns tokens.


        this.client.request('InitiateAuth', jsonReq, function (err, authResult) {
          if (err) {
            return callback.onFailure(err);
          }

          return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
        });
      }
      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       * @param {object} dataAuthenticate authentication data
       * @param {object} authenticationHelper helper created
       * @param {callback} callback passed on from caller
       * @returns {void}
       */
      ;

      _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
        var _this4 = this;

        var challengeName = dataAuthenticate.ChallengeName;
        var challengeParameters = dataAuthenticate.ChallengeParameters;

        if (challengeName === 'SMS_MFA') {
          this.Session = dataAuthenticate.Session;
          return callback.mfaRequired(challengeName, challengeParameters);
        }

        if (challengeName === 'SELECT_MFA_TYPE') {
          this.Session = dataAuthenticate.Session;
          return callback.selectMFAType(challengeName, challengeParameters);
        }

        if (challengeName === 'MFA_SETUP') {
          this.Session = dataAuthenticate.Session;
          return callback.mfaSetup(challengeName, challengeParameters);
        }

        if (challengeName === 'SOFTWARE_TOKEN_MFA') {
          this.Session = dataAuthenticate.Session;
          return callback.totpRequired(challengeName, challengeParameters);
        }

        if (challengeName === 'CUSTOM_CHALLENGE') {
          this.Session = dataAuthenticate.Session;
          return callback.customChallenge(challengeParameters);
        }

        if (challengeName === 'NEW_PASSWORD_REQUIRED') {
          this.Session = dataAuthenticate.Session;
          var userAttributes = null;
          var rawRequiredAttributes = null;
          var requiredAttributes = [];
          var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();

          if (challengeParameters) {
            userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
            rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
          }

          if (rawRequiredAttributes) {
            for (var i = 0; i < rawRequiredAttributes.length; i++) {
              requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
            }
          }

          return callback.newPasswordRequired(userAttributes, requiredAttributes);
        }

        if (challengeName === 'DEVICE_SRP_AUTH') {
          this.getDeviceResponse(callback);
          return undefined;
        }

        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
        this.challengeName = challengeName;
        this.cacheTokens();
        var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;

        if (newDeviceMetadata == null) {
          return callback.onSuccess(this.signInUserSession);
        }

        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {
          if (errGenHash) {
            return callback.onFailure(errGenHash);
          }

          var deviceSecretVerifierConfig = {
            Salt: buffer.Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),
            PasswordVerifier: buffer.Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')
          };
          _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
          _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
          _this4.randomPassword = authenticationHelper.getRandomPassword();

          _this4.client.request('ConfirmDevice', {
            DeviceKey: newDeviceMetadata.DeviceKey,
            AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
            DeviceName: userAgent
          }, function (errConfirm, dataConfirm) {
            if (errConfirm) {
              return callback.onFailure(errConfirm);
            }

            _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;

            _this4.cacheDeviceKeyAndPassword();

            if (dataConfirm.UserConfirmationNecessary === true) {
              return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
            }

            return callback.onSuccess(_this4.signInUserSession);
          });

          return undefined;
        });
        return undefined;
      }
      /**
       * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.
       * Pass the new password with any new user attributes to be updated.
       * User attribute keys must be of format userAttributes.<attribute_name>.
       * @param {string} newPassword new password for this user
       * @param {object} requiredAttributeData map with values for all required attributes
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {mfaRequired} callback.mfaRequired MFA code required to continue.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *         response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
        var _this5 = this;

        if (!newPassword) {
          return callback.onFailure(new Error('New password is required.'));
        }

        var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);
        var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
        var finalUserAttributes = {};

        if (requiredAttributeData) {
          Object.keys(requiredAttributeData).forEach(function (key) {
            finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
          });
        }

        finalUserAttributes.NEW_PASSWORD = newPassword;
        finalUserAttributes.USERNAME = this.username;
        var jsonReq = {
          ChallengeName: 'NEW_PASSWORD_REQUIRED',
          ClientId: this.pool.getClientId(),
          ChallengeResponses: finalUserAttributes,
          Session: this.Session,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {
          if (errAuthenticate) {
            return callback.onFailure(errAuthenticate);
          }

          return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
        });
        return undefined;
      }
      /**
       * This is used to get a session using device authentication. It is called at the end of user
       * authentication
       *
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       * @private
       */
      ;

      _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
        var _this6 = this;

        var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);
        var dateHelper = new DateHelper();
        var authParameters = {};
        authParameters.USERNAME = this.username;
        authParameters.DEVICE_KEY = this.deviceKey;
        authenticationHelper.getLargeAValue(function (errAValue, aValue) {
          // getLargeAValue callback start
          if (errAValue) {
            callback.onFailure(errAValue);
          }

          authParameters.SRP_A = aValue.toString(16);
          var jsonReq = {
            ChallengeName: 'DEVICE_SRP_AUTH',
            ClientId: _this6.pool.getClientId(),
            ChallengeResponses: authParameters,
            ClientMetadata: clientMetadata
          };

          if (_this6.getUserContextData()) {
            jsonReq.UserContextData = _this6.getUserContextData();
          }

          _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {
            if (err) {
              return callback.onFailure(err);
            }

            var challengeParameters = data.ChallengeParameters;
            var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);
            var salt = new BigInteger(challengeParameters.SALT, 16);
            authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {
              // getPasswordAuthenticationKey callback start
              if (errHkdf) {
                return callback.onFailure(errHkdf);
              }

              var dateNow = dateHelper.getNowString();
              var message = core.lib.WordArray.create(buffer.Buffer.concat([buffer.Buffer.from(_this6.deviceGroupKey, 'utf8'), buffer.Buffer.from(_this6.deviceKey, 'utf8'), buffer.Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), buffer.Buffer.from(dateNow, 'utf8')]));
              var key = core.lib.WordArray.create(hkdf);
              var signatureString = encBase64.stringify(hmacSha256(message, key));
              var challengeResponses = {};
              challengeResponses.USERNAME = _this6.username;
              challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
              challengeResponses.TIMESTAMP = dateNow;
              challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
              challengeResponses.DEVICE_KEY = _this6.deviceKey;
              var jsonReqResp = {
                ChallengeName: 'DEVICE_PASSWORD_VERIFIER',
                ClientId: _this6.pool.getClientId(),
                ChallengeResponses: challengeResponses,
                Session: data.Session
              };

              if (_this6.getUserContextData()) {
                jsonReqResp.UserContextData = _this6.getUserContextData();
              }

              _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {
                if (errAuthenticate) {
                  return callback.onFailure(errAuthenticate);
                }

                _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);

                _this6.cacheTokens();

                return callback.onSuccess(_this6.signInUserSession);
              });

              return undefined; // getPasswordAuthenticationKey callback end
            });
            return undefined;
          }); // getLargeAValue callback end

        });
      }
      /**
       * This is used for a certain user to confirm the registration by using a confirmation code
       * @param {string} confirmationCode Code entered by user.
       * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
        var jsonReq = {
          ClientId: this.pool.getClientId(),
          ConfirmationCode: confirmationCode,
          Username: this.username,
          ForceAliasCreation: forceAliasCreation,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('ConfirmSignUp', jsonReq, function (err) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, 'SUCCESS');
        });
      }
      /**
       * This is used by the user once he has the responses to a custom challenge
       * @param {string} answerChallenge The custom challenge answer.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {customChallenge} callback.customChallenge
       *    Custom challenge response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
        var _this7 = this;

        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.ANSWER = answerChallenge;
        var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);
        this.getCachedDeviceKeyAndPassword();

        if (this.deviceKey != null) {
          challengeResponses.DEVICE_KEY = this.deviceKey;
        }

        var jsonReq = {
          ChallengeName: 'CUSTOM_CHALLENGE',
          ChallengeResponses: challengeResponses,
          ClientId: this.pool.getClientId(),
          Session: this.Session,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          return _this7.authenticateUserInternal(data, authenticationHelper, callback);
        });
      }
      /**
       * This is used by the user once he has an MFA code
       * @param {string} confirmationCode The MFA code entered by the user.
       * @param {object} callback Result callback map.
       * @param {string} mfaType The mfa we are replying to.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
        var _this8 = this;

        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.SMS_MFA_CODE = confirmationCode;
        var mfaTypeSelection = mfaType || 'SMS_MFA';

        if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {
          challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
        }

        if (this.deviceKey != null) {
          challengeResponses.DEVICE_KEY = this.deviceKey;
        }

        var jsonReq = {
          ChallengeName: mfaTypeSelection,
          ChallengeResponses: challengeResponses,
          ClientId: this.pool.getClientId(),
          Session: this.Session,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {
          if (err) {
            return callback.onFailure(err);
          }

          var challengeName = dataAuthenticate.ChallengeName;

          if (challengeName === 'DEVICE_SRP_AUTH') {
            _this8.getDeviceResponse(callback);

            return undefined;
          }

          _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);

          _this8.cacheTokens();

          if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {
            return callback.onSuccess(_this8.signInUserSession);
          }

          var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);
          authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {
            if (errGenHash) {
              return callback.onFailure(errGenHash);
            }

            var deviceSecretVerifierConfig = {
              Salt: buffer.Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),
              PasswordVerifier: buffer.Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')
            };
            _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
            _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
            _this8.randomPassword = authenticationHelper.getRandomPassword();

            _this8.client.request('ConfirmDevice', {
              DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
              AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
              DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
              DeviceName: userAgent
            }, function (errConfirm, dataConfirm) {
              if (errConfirm) {
                return callback.onFailure(errConfirm);
              }

              _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;

              _this8.cacheDeviceKeyAndPassword();

              if (dataConfirm.UserConfirmationNecessary === true) {
                return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
              }

              return callback.onSuccess(_this8.signInUserSession);
            });

            return undefined;
          });
          return undefined;
        });
      }
      /**
       * This is used by an authenticated user to change the current password
       * @param {string} oldUserPassword The current password.
       * @param {string} newUserPassword The requested new password.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('ChangePassword', {
          PreviousPassword: oldUserPassword,
          ProposedPassword: newUserPassword,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          ClientMetadata: clientMetadata
        }, function (err) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, 'SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used by an authenticated user to enable MFA for itself
       * @deprecated
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.enableMFA = function enableMFA(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback(new Error('User is not authenticated'), null);
        }

        var mfaOptions = [];
        var mfaEnabled = {
          DeliveryMedium: 'SMS',
          AttributeName: 'phone_number'
        };
        mfaOptions.push(mfaEnabled);
        this.client.request('SetUserSettings', {
          MFAOptions: mfaOptions,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, 'SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used by an authenticated user to enable MFA for itself
       * @param {IMfaSettings} smsMfaSettings the sms mfa settings
       * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('SetUserMFAPreference', {
          SMSMfaSettings: smsMfaSettings,
          SoftwareTokenMfaSettings: softwareTokenMfaSettings,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, 'SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used by an authenticated user to disable MFA for itself
       * @deprecated
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.disableMFA = function disableMFA(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback(new Error('User is not authenticated'), null);
        }

        var mfaOptions = [];
        this.client.request('SetUserSettings', {
          MFAOptions: mfaOptions,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, 'SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used by an authenticated user to delete itself
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.deleteUser = function deleteUser(callback, clientMetadata) {
        var _this9 = this;

        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('DeleteUser', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          ClientMetadata: clientMetadata
        }, function (err) {
          if (err) {
            return callback(err, null);
          }

          _this9.clearCachedUser();

          return callback(null, 'SUCCESS');
        });
        return undefined;
      }
      /**
       * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg
       */

      /**
       * This is used by an authenticated user to change a list of attributes
       * @param {AttributeArg[]} attributes A list of the new user attributes.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
        var _this10 = this;

        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('UpdateUserAttributes', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          UserAttributes: attributes,
          ClientMetadata: clientMetadata
        }, function (err) {
          if (err) {
            return callback(err, null);
          } // update cached user


          return _this10.getUserData(function () {
            return callback(null, 'SUCCESS');
          }, {
            bypassCache: true
          });
        });
        return undefined;
      }
      /**
       * This is used by an authenticated user to get a list of attributes
       * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.getUserAttributes = function getUserAttributes(callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('GetUser', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err, userData) {
          if (err) {
            return callback(err, null);
          }

          var attributeList = [];

          for (var i = 0; i < userData.UserAttributes.length; i++) {
            var attribute = {
              Name: userData.UserAttributes[i].Name,
              Value: userData.UserAttributes[i].Value
            };
            var userAttribute = new CognitoUserAttribute(attribute);
            attributeList.push(userAttribute);
          }

          return callback(null, attributeList);
        });
        return undefined;
      }
      /**
       * This was previously used by an authenticated user to get MFAOptions,
       * but no longer returns a meaningful response. Refer to the documentation for
       * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
       * @deprecated
       * @param {nodeCallback<MFAOptions>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.getMFAOptions = function getMFAOptions(callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('GetUser', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err, userData) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, userData.MFAOptions);
        });
        return undefined;
      }
      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */
      ;

      _proto.createGetUserRequest = function createGetUserRequest() {
        return this.client.promisifyRequest('GetUser', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        });
      }
      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */
      ;

      _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
        var _this11 = this;

        if (options === void 0) {
          options = {};
        }

        // best effort, if not possible
        return new Promise(function (resolve) {
          var refresh = _this11.signInUserSession.getRefreshToken();

          if (refresh && refresh.getToken()) {
            _this11.refreshSession(refresh, resolve, options.clientMetadata);
          } else {
            resolve();
          }
        });
      }
      /**
       * @typedef {Object} GetUserDataOptions
       * @property {boolean} bypassCache - force getting data from Cognito service
       * @property {Record<string, string>} clientMetadata - clientMetadata for getSession
       */

      /**
       * This is used by an authenticated users to get the userData
       * @param {nodeCallback<UserData>} callback Called on success or error.
       * @param {GetUserDataOptions} params
       * @returns {void}
       */
      ;

      _proto.getUserData = function getUserData(callback, params) {
        var _this12 = this;

        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          this.clearCachedUserData();
          return callback(new Error('User is not authenticated'), null);
        }

        var userData = this.getUserDataFromCache();

        if (!userData) {
          this.fetchUserData().then(function (data) {
            callback(null, data);
          })["catch"](callback);
          return;
        }

        if (this.isFetchUserDataAndTokenRequired(params)) {
          this.fetchUserData().then(function (data) {
            return _this12.refreshSessionIfPossible(params).then(function () {
              return data;
            });
          }).then(function (data) {
            return callback(null, data);
          })["catch"](callback);
          return;
        }

        try {
          callback(null, JSON.parse(userData));
          return;
        } catch (err) {
          this.clearCachedUserData();
          callback(err, null);
          return;
        }
      }
      /**
       *
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */
      ;

      _proto.getUserDataFromCache = function getUserDataFromCache() {
        var userData = this.storage.getItem(this.userDataKey);
        return userData;
      }
      /**
       *
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */
      ;

      _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
        var _ref = params || {},
            _ref$bypassCache = _ref.bypassCache,
            bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;

        return bypassCache;
      }
      /**
       *
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */
      ;

      _proto.fetchUserData = function fetchUserData() {
        var _this13 = this;

        return this.createGetUserRequest().then(function (data) {
          _this13.cacheUserData(data);

          return data;
        });
      }
      /**
       * This is used by an authenticated user to delete a list of attributes
       * @param {string[]} attributeList Names of the attributes to delete.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          return callback(new Error('User is not authenticated'), null);
        }

        this.client.request('DeleteUserAttributes', {
          UserAttributeNames: attributeList,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, 'SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used by a user to resend a confirmation code
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
        var jsonReq = {
          ClientId: this.pool.getClientId(),
          Username: this.username,
          ClientMetadata: clientMetadata
        };
        this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {
          if (err) {
            return callback(err, null);
          }

          return callback(null, result);
        });
      }
      /**
       * @typedef {Object} GetSessionOptions
       * @property {Record<string, string>} clientMetadata - clientMetadata for getSession
       */

      /**
       * This is used to get a session, either from the session object
       * or from  the local storage, or by using a refresh token
       *
       * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
       * @param {GetSessionOptions} options
       * @returns {void}
       */
      ;

      _proto.getSession = function getSession(callback, options) {
        if (options === void 0) {
          options = {};
        }

        if (this.username == null) {
          return callback(new Error('Username is null. Cannot retrieve a new session'), null);
        }

        if (this.signInUserSession != null && this.signInUserSession.isValid()) {
          return callback(null, this.signInUserSession);
        }

        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var idTokenKey = keyPrefix + ".idToken";
        var accessTokenKey = keyPrefix + ".accessToken";
        var refreshTokenKey = keyPrefix + ".refreshToken";
        var clockDriftKey = keyPrefix + ".clockDrift";

        if (this.storage.getItem(idTokenKey)) {
          var idToken = new CognitoIdToken({
            IdToken: this.storage.getItem(idTokenKey)
          });
          var accessToken = new CognitoAccessToken({
            AccessToken: this.storage.getItem(accessTokenKey)
          });
          var refreshToken = new CognitoRefreshToken({
            RefreshToken: this.storage.getItem(refreshTokenKey)
          });
          var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
          var sessionData = {
            IdToken: idToken,
            AccessToken: accessToken,
            RefreshToken: refreshToken,
            ClockDrift: clockDrift
          };
          var cachedSession = new CognitoUserSession(sessionData);

          if (cachedSession.isValid()) {
            this.signInUserSession = cachedSession;
            return callback(null, this.signInUserSession);
          }

          if (!refreshToken.getToken()) {
            return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);
          }

          this.refreshSession(refreshToken, callback, options.clientMetadata);
        } else {
          callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);
        }

        return undefined;
      }
      /**
       * This uses the refreshToken to retrieve a new session
       * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.
       * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
        var _this14 = this;

        var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
        var authParameters = {};
        authParameters.REFRESH_TOKEN = refreshToken.getToken();
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var lastUserKey = keyPrefix + ".LastAuthUser";

        if (this.storage.getItem(lastUserKey)) {
          this.username = this.storage.getItem(lastUserKey);
          var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
          this.deviceKey = this.storage.getItem(deviceKeyKey);
          authParameters.DEVICE_KEY = this.deviceKey;
        }

        var jsonReq = {
          ClientId: this.pool.getClientId(),
          AuthFlow: 'REFRESH_TOKEN_AUTH',
          AuthParameters: authParameters,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('InitiateAuth', jsonReq, function (err, authResult) {
          if (err) {
            if (err.code === 'NotAuthorizedException') {
              _this14.clearCachedUser();
            }

            return wrappedCallback(err, null);
          }

          if (authResult) {
            var authenticationResult = authResult.AuthenticationResult;

            if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {
              authenticationResult.RefreshToken = refreshToken.getToken();
            }

            _this14.signInUserSession = _this14.getCognitoUserSession(authenticationResult);

            _this14.cacheTokens();

            return wrappedCallback(null, _this14.signInUserSession);
          }

          return undefined;
        });
      }
      /**
       * This is used to save the session tokens to local storage
       * @returns {void}
       */
      ;

      _proto.cacheTokens = function cacheTokens() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var idTokenKey = keyPrefix + "." + this.username + ".idToken";
        var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
        var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
        var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
        var lastUserKey = keyPrefix + ".LastAuthUser";
        this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
        this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
        this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
        this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
        this.storage.setItem(lastUserKey, this.username);
      }
      /**
       * This is to cache user data
       */
      ;

      _proto.cacheUserData = function cacheUserData(userData) {
        this.storage.setItem(this.userDataKey, JSON.stringify(userData));
      }
      /**
       * This is to remove cached user data
       */
      ;

      _proto.clearCachedUserData = function clearCachedUserData() {
        this.storage.removeItem(this.userDataKey);
      };

      _proto.clearCachedUser = function clearCachedUser() {
        this.clearCachedTokens();
        this.clearCachedUserData();
      }
      /**
       * This is used to cache the device key and device group and device password
       * @returns {void}
       */
      ;

      _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        this.storage.setItem(deviceKeyKey, this.deviceKey);
        this.storage.setItem(randomPasswordKey, this.randomPassword);
        this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
      }
      /**
       * This is used to get current device key and device group and device password
       * @returns {void}
       */
      ;

      _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";

        if (this.storage.getItem(deviceKeyKey)) {
          this.deviceKey = this.storage.getItem(deviceKeyKey);
          this.randomPassword = this.storage.getItem(randomPasswordKey);
          this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
        }
      }
      /**
       * This is used to clear the device key info from local storage
       * @returns {void}
       */
      ;

      _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        this.storage.removeItem(deviceKeyKey);
        this.storage.removeItem(randomPasswordKey);
        this.storage.removeItem(deviceGroupKeyKey);
      }
      /**
       * This is used to clear the session tokens from local storage
       * @returns {void}
       */
      ;

      _proto.clearCachedTokens = function clearCachedTokens() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var idTokenKey = keyPrefix + "." + this.username + ".idToken";
        var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
        var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
        var lastUserKey = keyPrefix + ".LastAuthUser";
        var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
        this.storage.removeItem(idTokenKey);
        this.storage.removeItem(accessTokenKey);
        this.storage.removeItem(refreshTokenKey);
        this.storage.removeItem(lastUserKey);
        this.storage.removeItem(clockDriftKey);
      }
      /**
       * This is used to build a user session from tokens retrieved in the authentication result
       * @param {object} authResult Successful auth response from server.
       * @returns {CognitoUserSession} The new user session.
       * @private
       */
      ;

      _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
        var idToken = new CognitoIdToken(authResult);
        var accessToken = new CognitoAccessToken(authResult);
        var refreshToken = new CognitoRefreshToken(authResult);
        var sessionData = {
          IdToken: idToken,
          AccessToken: accessToken,
          RefreshToken: refreshToken
        };
        return new CognitoUserSession(sessionData);
      }
      /**
       * This is used to initiate a forgot password request
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {inputVerificationCode?} callback.inputVerificationCode
       *    Optional callback raised instead of onSuccess with response data.
       * @param {onSuccess} callback.onSuccess Called on success.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
        var jsonReq = {
          ClientId: this.pool.getClientId(),
          Username: this.username,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('ForgotPassword', jsonReq, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          if (typeof callback.inputVerificationCode === 'function') {
            return callback.inputVerificationCode(data);
          }

          return callback.onSuccess(data);
        });
      }
      /**
       * This is used to confirm a new password using a confirmationCode
       * @param {string} confirmationCode Code entered by user.
       * @param {string} newPassword Confirm new password.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<void>} callback.onSuccess Called on success.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
        var jsonReq = {
          ClientId: this.pool.getClientId(),
          Username: this.username,
          ConfirmationCode: confirmationCode,
          Password: newPassword,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('ConfirmForgotPassword', jsonReq, function (err) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess();
        });
      }
      /**
       * This is used to initiate an attribute confirmation request
       * @param {string} attributeName User attribute that needs confirmation.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {inputVerificationCode} callback.inputVerificationCode Called on success.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('GetUserAttributeVerificationCode', {
          AttributeName: attributeName,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          ClientMetadata: clientMetadata
        }, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          if (typeof callback.inputVerificationCode === 'function') {
            return callback.inputVerificationCode(data);
          }

          return callback.onSuccess();
        });
        return undefined;
      }
      /**
       * This is used to confirm an attribute using a confirmation code
       * @param {string} attributeName Attribute being confirmed.
       * @param {string} confirmationCode Code entered by user.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */
      ;

      _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('VerifyUserAttribute', {
          AttributeName: attributeName,
          Code: confirmationCode,
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess('SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used to get the device information using the current device key
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<*>} callback.onSuccess Called on success with device data.
       * @returns {void}
       */
      ;

      _proto.getDevice = function getDevice(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('GetDevice', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          DeviceKey: this.deviceKey
        }, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess(data);
        });
        return undefined;
      }
      /**
       * This is used to forget a specific device
       * @param {string} deviceKey Device key.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */
      ;

      _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('ForgetDevice', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          DeviceKey: deviceKey
        }, function (err) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess('SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used to forget the current device
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */
      ;

      _proto.forgetDevice = function forgetDevice(callback) {
        var _this15 = this;

        this.forgetSpecificDevice(this.deviceKey, {
          onFailure: callback.onFailure,
          onSuccess: function onSuccess(result) {
            _this15.deviceKey = null;
            _this15.deviceGroupKey = null;
            _this15.randomPassword = null;

            _this15.clearCachedDeviceKeyAndPassword();

            return callback.onSuccess(result);
          }
        });
      }
      /**
       * This is used to set the device status as remembered
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */
      ;

      _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('UpdateDeviceStatus', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          DeviceKey: this.deviceKey,
          DeviceRememberedStatus: 'remembered'
        }, function (err) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess('SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used to set the device status as not remembered
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */
      ;

      _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('UpdateDeviceStatus', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          DeviceKey: this.deviceKey,
          DeviceRememberedStatus: 'not_remembered'
        }, function (err) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess('SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used to list all devices for a user
       *
       * @param {int} limit the number of devices returned in a call
       * @param {string | null} paginationToken the pagination token in case any was returned before
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<*>} callback.onSuccess Called on success with device list.
       * @returns {void}
       */
      ;

      _proto.listDevices = function listDevices(limit, paginationToken, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        var requestParams = {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
          Limit: limit
        };

        if (paginationToken) {
          requestParams.PaginationToken = paginationToken;
        }

        this.client.request('ListDevices', requestParams, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          return callback.onSuccess(data);
        });
        return undefined;
      }
      /**
       * This is used to globally revoke all tokens issued to a user
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */
      ;

      _proto.globalSignOut = function globalSignOut(callback) {
        var _this16 = this;

        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
          return callback.onFailure(new Error('User is not authenticated'));
        }

        this.client.request('GlobalSignOut', {
          AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function (err) {
          if (err) {
            return callback.onFailure(err);
          }

          _this16.clearCachedUser();

          return callback.onSuccess('SUCCESS');
        });
        return undefined;
      }
      /**
       * This is used for the user to signOut of the application and clear the cached tokens.
       * @returns {void}
       */
      ;

      _proto.signOut = function signOut() {
        this.signInUserSession = null;
        this.clearCachedUser();
      }
      /**
       * This is used by a user trying to select a given MFA
       * @param {string} answerChallenge the mfa the user wants
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
        var _this17 = this;

        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.ANSWER = answerChallenge;
        var jsonReq = {
          ChallengeName: 'SELECT_MFA_TYPE',
          ChallengeResponses: challengeResponses,
          ClientId: this.pool.getClientId(),
          Session: this.Session
        };

        if (this.getUserContextData()) {
          jsonReq.UserContextData = this.getUserContextData();
        }

        this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {
          if (err) {
            return callback.onFailure(err);
          }

          _this17.Session = data.Session;

          if (answerChallenge === 'SMS_MFA') {
            return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
          }

          if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {
            return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
          }

          return undefined;
        });
      }
      /**
       * This returns the user context data for advanced security feature.
       * @returns {string} the user context data from CognitoUserPool
       */
      ;

      _proto.getUserContextData = function getUserContextData() {
        var pool = this.pool;
        return pool.getUserContextData(this.username);
      }
      /**
       * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
        var _this18 = this;

        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          this.client.request('AssociateSoftwareToken', {
            Session: this.Session
          }, function (err, data) {
            if (err) {
              return callback.onFailure(err);
            }

            _this18.Session = data.Session;
            return callback.associateSecretCode(data.SecretCode);
          });
        } else {
          this.client.request('AssociateSoftwareToken', {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
          }, function (err, data) {
            if (err) {
              return callback.onFailure(err);
            }

            return callback.associateSecretCode(data.SecretCode);
          });
        }
      }
      /**
       * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA
       * @param {string} totpCode The MFA code entered by the user.
       * @param {string} friendlyDeviceName The device name we are assigning to the device.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */
      ;

      _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
        var _this19 = this;

        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
          this.client.request('VerifySoftwareToken', {
            Session: this.Session,
            UserCode: totpCode,
            FriendlyDeviceName: friendlyDeviceName
          }, function (err, data) {
            if (err) {
              return callback.onFailure(err);
            }

            _this19.Session = data.Session;
            var challengeResponses = {};
            challengeResponses.USERNAME = _this19.username;
            var jsonReq = {
              ChallengeName: 'MFA_SETUP',
              ClientId: _this19.pool.getClientId(),
              ChallengeResponses: challengeResponses,
              Session: _this19.Session
            };

            if (_this19.getUserContextData()) {
              jsonReq.UserContextData = _this19.getUserContextData();
            }

            _this19.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {
              if (errRespond) {
                return callback.onFailure(errRespond);
              }

              _this19.signInUserSession = _this19.getCognitoUserSession(dataRespond.AuthenticationResult);

              _this19.cacheTokens();

              return callback.onSuccess(_this19.signInUserSession);
            });

            return undefined;
          });
        } else {
          this.client.request('VerifySoftwareToken', {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            UserCode: totpCode,
            FriendlyDeviceName: friendlyDeviceName
          }, function (err, data) {
            if (err) {
              return callback.onFailure(err);
            }

            return callback.onSuccess(data);
          });
        }
      };

      return CognitoUser;
    }();

    function unfetch_module(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null);})}

    var unfetch_module$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': unfetch_module
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(unfetch_module$1);

    self.fetch || (self.fetch = require$$0.default || require$$0);

    // constructor
    function UserAgent() {} // public


    UserAgent.prototype.userAgent = 'aws-amplify/0.1.x js';

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    var CognitoError = /*#__PURE__*/function (_Error) {
      _inheritsLoose(CognitoError, _Error);

      function CognitoError(message, code, name, statusCode) {
        var _this;

        _this = _Error.call(this, message) || this;
        _this.code = code;
        _this.name = name;
        _this.statusCode = statusCode;
        return _this;
      }

      return CognitoError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /** @class */


    var Client = /*#__PURE__*/function () {
      /**
       * Constructs a new AWS Cognito Identity Provider client object
       * @param {string} region AWS region
       * @param {string} endpoint endpoint
       * @param {object} fetchOptions options for fetch API (only credentials is supported)
       */
      function Client(region, endpoint, fetchOptions) {
        this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";

        var _ref = fetchOptions || {},
            credentials = _ref.credentials;

        this.fetchOptions = credentials ? {
          credentials: credentials
        } : {};
      }
      /**
       * Makes an unauthenticated request on AWS Cognito Identity Provider API
       * using fetch
       * @param {string} operation API operation
       * @param {object} params Input parameters
       * @returns Promise<object>
       */


      var _proto = Client.prototype;

      _proto.promisifyRequest = function promisifyRequest(operation, params) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          _this2.request(operation, params, function (err, data) {
            if (err) {
              reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
            } else {
              resolve(data);
            }
          });
        });
      }
      /**
       * Makes an unauthenticated request on AWS Cognito Identity Provider API
       * using fetch
       * @param {string} operation API operation
       * @param {object} params Input parameters
       * @param {function} callback Callback called when a response is returned
       * @returns {void}
       */
      ;

      _proto.request = function request(operation, params, callback) {
        var headers = {
          'Content-Type': 'application/x-amz-json-1.1',
          'X-Amz-Target': "AWSCognitoIdentityProviderService." + operation,
          'X-Amz-User-Agent': UserAgent.prototype.userAgent
        };
        var options = Object.assign({}, this.fetchOptions, {
          headers: headers,
          method: 'POST',
          mode: 'cors',
          cache: 'no-cache',
          body: JSON.stringify(params)
        });
        var response;
        fetch(this.endpoint, options).then(function (resp) {
          response = resp;
          return resp;
        }, function (err) {
          // If error happens here, the request failed
          // if it is TypeError throw network error
          if (err instanceof TypeError) {
            throw new Error('Network error');
          }

          throw err;
        }).then(function (resp) {
          return resp.json()["catch"](function () {
            return {};
          });
        }).then(function (data) {
          // return parsed body stream
          if (response.ok) return callback(null, data);
          // eslint-disable-next-line no-underscore-dangle

          var code = (data.__type || data.code).split('#').pop();
          var error = {
            code: code,
            name: code,
            message: data.message || data.Message || null
          };
          return callback(error);
        })["catch"](function (err) {
          // first check if we have a service error
          if (response && response.headers && response.headers.get('x-amzn-errortype')) {
            try {
              var code = response.headers.get('x-amzn-errortype').split(':')[0];
              var error = {
                code: code,
                name: code,
                statusCode: response.status,
                message: response.status ? response.status.toString() : null
              };
              return callback(error);
            } catch (ex) {
              return callback(err);
            } // otherwise check if error is Network error

          } else if (err instanceof Error && err.message === 'Network error') {
            var _error = {
              code: 'NetworkError',
              name: err.name,
              message: err.message
            };
            return callback(_error);
          } else {
            return callback(err);
          }
        });
      };

      return Client;
    }();

    /*!
     * Copyright 2016 Amazon.com,
     * Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Amazon Software License (the "License").
     * You may not use this file except in compliance with the
     * License. A copy of the License is located at
     *
     *     http://aws.amazon.com/asl/
     *
     * or in the "license" file accompanying this file. This file is
     * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, express or implied. See the License
     * for the specific language governing permissions and
     * limitations under the License.
     */
    /** @class */

    var CognitoUserPool = /*#__PURE__*/function () {
      /**
       * Constructs a new CognitoUserPool object
       * @param {object} data Creation options.
       * @param {string} data.UserPoolId Cognito user pool id.
       * @param {string} data.ClientId User pool application client id.
       * @param {string} data.endpoint Optional custom service endpoint.
       * @param {object} data.fetchOptions Optional options for fetch API.
       *        (only credentials option is supported)
       * @param {object} data.Storage Optional storage object.
       * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:
       *        boolean flag indicating if the data collection is enabled
       *        to support cognito advanced security features. By default, this
       *        flag is set to true.
       */
      function CognitoUserPool(data, wrapRefreshSessionCallback) {
        var _ref = data || {},
            UserPoolId = _ref.UserPoolId,
            ClientId = _ref.ClientId,
            endpoint = _ref.endpoint,
            fetchOptions = _ref.fetchOptions,
            AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;

        if (!UserPoolId || !ClientId) {
          throw new Error('Both UserPoolId and ClientId are required.');
        }

        if (!/^[\w-]+_.+$/.test(UserPoolId)) {
          throw new Error('Invalid UserPoolId format.');
        }

        var region = UserPoolId.split('_')[0];
        this.userPoolId = UserPoolId;
        this.clientId = ClientId;
        this.client = new Client(region, endpoint, fetchOptions);
        /**
         * By default, AdvancedSecurityDataCollectionFlag is set to true,
         * if no input value is provided.
         */

        this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
        this.storage = data.Storage || new StorageHelper().getStorage();

        if (wrapRefreshSessionCallback) {
          this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
        }
      }
      /**
       * @returns {string} the user pool id
       */


      var _proto = CognitoUserPool.prototype;

      _proto.getUserPoolId = function getUserPoolId() {
        return this.userPoolId;
      }
      /**
       * @returns {string} the client id
       */
      ;

      _proto.getClientId = function getClientId() {
        return this.clientId;
      }
      /**
       * @typedef {object} SignUpResult
       * @property {CognitoUser} user New user.
       * @property {bool} userConfirmed If the user is already confirmed.
       */

      /**
       * method for signing up a user
       * @param {string} username User's username.
       * @param {string} password Plain-text initial password entered by user.
       * @param {(AttributeArg[])=} userAttributes New user attributes.
       * @param {(AttributeArg[])=} validationData Application metadata.
       * @param {(AttributeArg[])=} clientMetadata Client metadata.
       * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */
      ;

      _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {
        var _this = this;

        var jsonReq = {
          ClientId: this.clientId,
          Username: username,
          Password: password,
          UserAttributes: userAttributes,
          ValidationData: validationData,
          ClientMetadata: clientMetadata
        };

        if (this.getUserContextData(username)) {
          jsonReq.UserContextData = this.getUserContextData(username);
        }

        this.client.request('SignUp', jsonReq, function (err, data) {
          if (err) {
            return callback(err, null);
          }

          var cognitoUser = {
            Username: username,
            Pool: _this,
            Storage: _this.storage
          };
          var returnData = {
            user: new CognitoUser(cognitoUser),
            userConfirmed: data.UserConfirmed,
            userSub: data.UserSub,
            codeDeliveryDetails: data.CodeDeliveryDetails
          };
          return callback(null, returnData);
        });
      }
      /**
       * method for getting the current user of the application from the local storage
       *
       * @returns {CognitoUser} the user retrieved from storage
       */
      ;

      _proto.getCurrentUser = function getCurrentUser() {
        var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
        var lastAuthUser = this.storage.getItem(lastUserKey);

        if (lastAuthUser) {
          var cognitoUser = {
            Username: lastAuthUser,
            Pool: this,
            Storage: this.storage
          };
          return new CognitoUser(cognitoUser);
        }

        return null;
      }
      /**
       * This method returns the encoded data string used for cognito advanced security feature.
       * This would be generated only when developer has included the JS used for collecting the
       * data on their client. Please refer to documentation to know more about using AdvancedSecurity
       * features
       * @param {string} username the username for the context data
       * @returns {string} the user context data
       **/
      ;

      _proto.getUserContextData = function getUserContextData(username) {
        if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {
          return undefined;
        }
        /* eslint-disable */


        var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
        /* eslint-enable */

        if (this.advancedSecurityDataCollectionFlag) {
          var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);

          if (advancedSecurityData) {
            var userContextData = {
              EncodedData: advancedSecurityData
            };
            return userContextData;
          }
        }

        return {};
      };

      return CognitoUserPool;
    }();

    /*!
     * JavaScript Cookie v2.2.1
     * https://github.com/js-cookie/js-cookie
     *
     * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
     * Released under the MIT license
     */

    var js_cookie = createCommonjsModule(function (module, exports) {
    (function (factory) {
    	var registeredInModuleLoader;
    	{
    		module.exports = factory();
    		registeredInModuleLoader = true;
    	}
    	if (!registeredInModuleLoader) {
    		var OldCookies = window.Cookies;
    		var api = window.Cookies = factory();
    		api.noConflict = function () {
    			window.Cookies = OldCookies;
    			return api;
    		};
    	}
    }(function () {
    	function extend () {
    		var i = 0;
    		var result = {};
    		for (; i < arguments.length; i++) {
    			var attributes = arguments[ i ];
    			for (var key in attributes) {
    				result[key] = attributes[key];
    			}
    		}
    		return result;
    	}

    	function decode (s) {
    		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    	}

    	function init (converter) {
    		function api() {}

    		function set (key, value, attributes) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			attributes = extend({
    				path: '/'
    			}, api.defaults, attributes);

    			if (typeof attributes.expires === 'number') {
    				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
    			}

    			// We're using "expires" because "max-age" is not supported by IE
    			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

    			try {
    				var result = JSON.stringify(value);
    				if (/^[\{\[]/.test(result)) {
    					value = result;
    				}
    			} catch (e) {}

    			value = converter.write ?
    				converter.write(value, key) :
    				encodeURIComponent(String(value))
    					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

    			key = encodeURIComponent(String(key))
    				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
    				.replace(/[\(\)]/g, escape);

    			var stringifiedAttributes = '';
    			for (var attributeName in attributes) {
    				if (!attributes[attributeName]) {
    					continue;
    				}
    				stringifiedAttributes += '; ' + attributeName;
    				if (attributes[attributeName] === true) {
    					continue;
    				}

    				// Considers RFC 6265 section 5.2:
    				// ...
    				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
    				//     character:
    				// Consume the characters of the unparsed-attributes up to,
    				// not including, the first %x3B (";") character.
    				// ...
    				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    			}

    			return (document.cookie = key + '=' + value + stringifiedAttributes);
    		}

    		function get (key, json) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			var jar = {};
    			// To prevent the for loop in the first place assign an empty array
    			// in case there are no cookies at all.
    			var cookies = document.cookie ? document.cookie.split('; ') : [];
    			var i = 0;

    			for (; i < cookies.length; i++) {
    				var parts = cookies[i].split('=');
    				var cookie = parts.slice(1).join('=');

    				if (!json && cookie.charAt(0) === '"') {
    					cookie = cookie.slice(1, -1);
    				}

    				try {
    					var name = decode(parts[0]);
    					cookie = (converter.read || converter)(cookie, name) ||
    						decode(cookie);

    					if (json) {
    						try {
    							cookie = JSON.parse(cookie);
    						} catch (e) {}
    					}

    					jar[name] = cookie;

    					if (key === name) {
    						break;
    					}
    				} catch (e) {}
    			}

    			return key ? jar[key] : jar;
    		}

    		api.set = set;
    		api.get = function (key) {
    			return get(key, false /* read as raw */);
    		};
    		api.getJSON = function (key) {
    			return get(key, true /* read as json */);
    		};
    		api.remove = function (key, attributes) {
    			set(key, '', extend(attributes, {
    				expires: -1
    			}));
    		};

    		api.defaults = {};

    		api.withConverter = init;

    		return api;
    	}

    	return init(function () {});
    }));
    });

    /** @class */

    var CookieStorage = /*#__PURE__*/function () {
      /**
       * Constructs a new CookieStorage object
       * @param {object} data Creation options.
       * @param {string} data.domain Cookies domain (mandatory).
       * @param {string} data.path Cookies path (default: '/')
       * @param {integer} data.expires Cookie expiration (in days, default: 365)
       * @param {boolean} data.secure Cookie secure flag (default: true)
       * @param {string} data.sameSite Cookie request behaviour (default: null)
       */
      function CookieStorage(data) {
        if (data.domain) {
          this.domain = data.domain;
        } else {
          throw new Error('The domain of cookieStorage can not be undefined.');
        }

        if (data.path) {
          this.path = data.path;
        } else {
          this.path = '/';
        }

        if (Object.prototype.hasOwnProperty.call(data, 'expires')) {
          this.expires = data.expires;
        } else {
          this.expires = 365;
        }

        if (Object.prototype.hasOwnProperty.call(data, 'secure')) {
          this.secure = data.secure;
        } else {
          this.secure = true;
        }

        if (Object.prototype.hasOwnProperty.call(data, 'sameSite')) {
          if (!['strict', 'lax', 'none'].includes(data.sameSite)) {
            throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
          }

          if (data.sameSite === 'none' && !this.secure) {
            throw new Error('sameSite = None requires the Secure attribute in latest browser versions.');
          }

          this.sameSite = data.sameSite;
        } else {
          this.sameSite = null;
        }
      }
      /**
       * This is used to set a specific item in storage
       * @param {string} key - the key for the item
       * @param {object} value - the value
       * @returns {string} value that was set
       */


      var _proto = CookieStorage.prototype;

      _proto.setItem = function setItem(key, value) {
        var options = {
          path: this.path,
          expires: this.expires,
          domain: this.domain,
          secure: this.secure
        };

        if (this.sameSite) {
          options.sameSite = this.sameSite;
        }

        js_cookie.set(key, value, options);
        return js_cookie.get(key);
      }
      /**
       * This is used to get a specific key from storage
       * @param {string} key - the key for the item
       * This is used to clear the storage
       * @returns {string} the data item
       */
      ;

      _proto.getItem = function getItem(key) {
        return js_cookie.get(key);
      }
      /**
       * This is used to remove an item from storage
       * @param {string} key - the key being set
       * @returns {string} value - value that was deleted
       */
      ;

      _proto.removeItem = function removeItem(key) {
        var options = {
          path: this.path,
          expires: this.expires,
          domain: this.domain,
          secure: this.secure
        };

        if (this.sameSite) {
          options.sameSite = this.sameSite;
        }

        return js_cookie.remove(key, options);
      }
      /**
       * This is used to clear the storage of optional
       * items that were previously set
       * @returns {} an empty object
       */
      ;

      _proto.clear = function clear() {
        var cookies = js_cookie.get();
        var numKeys = Object.keys(cookies).length;

        for (var index = 0; index < numKeys; ++index) {
          this.removeItem(Object.keys(cookies)[index]);
        }

        return {};
      };

      return CookieStorage;
    }();

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var SELF = '_self';
    var launchUri = function (url) {
        var windowProxy = window.open(url, SELF);
        if (windowProxy) {
            return Promise.resolve(windowProxy);
        }
        else {
            return Promise.reject();
        }
    };

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var setState = function (state) {
        window.sessionStorage.setItem('oauth_state', state);
    };
    var getState = function () {
        var oauth_state = window.sessionStorage.getItem('oauth_state');
        window.sessionStorage.removeItem('oauth_state');
        return oauth_state;
    };
    var setPKCE = function (private_key) {
        window.sessionStorage.setItem('ouath_pkce_key', private_key);
    };
    var getPKCE = function () {
        var ouath_pkce_key = window.sessionStorage.getItem('ouath_pkce_key');
        window.sessionStorage.removeItem('ouath_pkce_key');
        return ouath_pkce_key;
    };

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$d = (undefined && undefined.__assign) || function () {
        __assign$d = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$d.apply(this, arguments);
    };
    var __awaiter$d = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$d = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$5 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var AMPLIFY_SYMBOL$3 = (typeof Symbol !== 'undefined' &&
        typeof Symbol.for === 'function'
        ? Symbol.for('amplify_default')
        : '@@amplify_default');
    var dispatchAuthEvent$1 = function (event, data, message) {
        Hub.dispatch('auth', { event: event, data: data, message: message }, 'Auth', AMPLIFY_SYMBOL$3);
    };
    var logger$i = new ConsoleLogger('OAuth');
    var OAuth = /** @class */ (function () {
        function OAuth(_a) {
            var config = _a.config, cognitoClientId = _a.cognitoClientId, _b = _a.scopes, scopes = _b === void 0 ? [] : _b;
            this._urlOpener = config.urlOpener || launchUri;
            this._config = config;
            this._cognitoClientId = cognitoClientId;
            if (!this.isValidScopes(scopes))
                throw Error('scopes must be a String Array');
            this._scopes = scopes;
        }
        OAuth.prototype.isValidScopes = function (scopes) {
            return (Array.isArray(scopes) && scopes.every(function (scope) { return typeof scope === 'string'; }));
        };
        OAuth.prototype.oauthSignIn = function (responseType, domain, redirectSignIn, clientId, provider, customState) {
            if (responseType === void 0) { responseType = 'code'; }
            if (provider === void 0) { provider = CognitoHostedUIIdentityProvider.Cognito; }
            var generatedState = this._generateState(32);
            /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito
            single-encodes/decodes url on first sign in and double-encodes/decodes url
            when user already signed in. Using encodeURIComponent, Base32, Base64 add
            characters % or = which on further encoding becomes unsafe. '=' create issue
            for parsing query params.
            Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */
            var state = customState
                ? generatedState + "-" + urlSafeEncode(customState)
                : generatedState;
            setState(state);
            var pkce_key = this._generateRandom(128);
            setPKCE(pkce_key);
            var code_challenge = this._generateChallenge(pkce_key);
            var code_challenge_method = 'S256';
            var scopesString = this._scopes.join(' ');
            var queryString = Object.entries(__assign$d(__assign$d({ redirect_uri: redirectSignIn, response_type: responseType, client_id: clientId, identity_provider: provider, scope: scopesString, state: state }, (responseType === 'code' ? { code_challenge: code_challenge } : {})), (responseType === 'code' ? { code_challenge_method: code_challenge_method } : {})))
                .map(function (_a) {
                var _b = __read$5(_a, 2), k = _b[0], v = _b[1];
                return encodeURIComponent(k) + "=" + encodeURIComponent(v);
            })
                .join('&');
            var URL = "https://" + domain + "/oauth2/authorize?" + queryString;
            logger$i.debug("Redirecting to " + URL);
            this._urlOpener(URL, redirectSignIn);
        };
        OAuth.prototype._handleCodeFlow = function (currentUrl) {
            return __awaiter$d(this, void 0, void 0, function () {
                var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, _a, access_token, refresh_token, id_token, error;
                return __generator$d(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            code = (url.parse(currentUrl).query || '')
                                .split('&')
                                .map(function (pairings) { return pairings.split('='); })
                                .reduce(function (accum, _a) {
                                var _b;
                                var _c = __read$5(_a, 2), k = _c[0], v = _c[1];
                                return (__assign$d(__assign$d({}, accum), (_b = {}, _b[k] = v, _b)));
                            }, { code: undefined }).code;
                            currentUrlPathname = url.parse(currentUrl).pathname || '/';
                            redirectSignInPathname = url.parse(this._config.redirectSignIn).pathname || '/';
                            if (!code || currentUrlPathname !== redirectSignInPathname) {
                                return [2 /*return*/];
                            }
                            oAuthTokenEndpoint = 'https://' + this._config.domain + '/oauth2/token';
                            dispatchAuthEvent$1('codeFlow', {}, "Retrieving tokens from " + oAuthTokenEndpoint);
                            client_id = isCognitoHostedOpts(this._config)
                                ? this._cognitoClientId
                                : this._config.clientID;
                            redirect_uri = isCognitoHostedOpts(this._config)
                                ? this._config.redirectSignIn
                                : this._config.redirectUri;
                            code_verifier = getPKCE();
                            oAuthTokenBody = __assign$d({ grant_type: 'authorization_code', code: code,
                                client_id: client_id,
                                redirect_uri: redirect_uri }, (code_verifier ? { code_verifier: code_verifier } : {}));
                            logger$i.debug("Calling token endpoint: " + oAuthTokenEndpoint + " with", oAuthTokenBody);
                            body = Object.entries(oAuthTokenBody)
                                .map(function (_a) {
                                var _b = __read$5(_a, 2), k = _b[0], v = _b[1];
                                return encodeURIComponent(k) + "=" + encodeURIComponent(v);
                            })
                                .join('&');
                            return [4 /*yield*/, fetch(oAuthTokenEndpoint, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded',
                                    },
                                    body: body,
                                })];
                        case 1: return [4 /*yield*/, (_b.sent()).json()];
                        case 2:
                            _a = _b.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;
                            if (error) {
                                throw new Error(error);
                            }
                            return [2 /*return*/, {
                                    accessToken: access_token,
                                    refreshToken: refresh_token,
                                    idToken: id_token,
                                }];
                    }
                });
            });
        };
        OAuth.prototype._handleImplicitFlow = function (currentUrl) {
            return __awaiter$d(this, void 0, void 0, function () {
                var _a, id_token, access_token;
                return __generator$d(this, function (_b) {
                    _a = (url.parse(currentUrl).hash || '#')
                        .substr(1) // Remove # from returned code
                        .split('&')
                        .map(function (pairings) { return pairings.split('='); })
                        .reduce(function (accum, _a) {
                        var _b;
                        var _c = __read$5(_a, 2), k = _c[0], v = _c[1];
                        return (__assign$d(__assign$d({}, accum), (_b = {}, _b[k] = v, _b)));
                    }, {
                        id_token: undefined,
                        access_token: undefined,
                    }), id_token = _a.id_token, access_token = _a.access_token;
                    dispatchAuthEvent$1('implicitFlow', {}, "Got tokens from " + currentUrl);
                    logger$i.debug("Retrieving implicit tokens from " + currentUrl + " with");
                    return [2 /*return*/, {
                            accessToken: access_token,
                            idToken: id_token,
                            refreshToken: null,
                        }];
                });
            });
        };
        OAuth.prototype.handleAuthResponse = function (currentUrl) {
            return __awaiter$d(this, void 0, void 0, function () {
                var urlParams, error, error_description, state, _a, _b, e_1;
                return __generator$d(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 5, , 6]);
                            urlParams = currentUrl
                                ? __assign$d(__assign$d({}, (url.parse(currentUrl).hash || '#')
                                    .substr(1)
                                    .split('&')
                                    .map(function (entry) { return entry.split('='); })
                                    .reduce(function (acc, _a) {
                                    var _b = __read$5(_a, 2), k = _b[0], v = _b[1];
                                    return ((acc[k] = v), acc);
                                }, {})), (url.parse(currentUrl).query || '')
                                    .split('&')
                                    .map(function (entry) { return entry.split('='); })
                                    .reduce(function (acc, _a) {
                                    var _b = __read$5(_a, 2), k = _b[0], v = _b[1];
                                    return ((acc[k] = v), acc);
                                }, {}))
                                : {};
                            error = urlParams.error, error_description = urlParams.error_description;
                            if (error) {
                                throw new Error(error_description);
                            }
                            state = this._validateState(urlParams);
                            logger$i.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
                            if (!(this._config.responseType === 'code')) return [3 /*break*/, 2];
                            _a = [{}];
                            return [4 /*yield*/, this._handleCodeFlow(currentUrl)];
                        case 1: return [2 /*return*/, __assign$d.apply(void 0, [__assign$d.apply(void 0, _a.concat([(_c.sent())])), { state: state }])];
                        case 2:
                            _b = [{}];
                            return [4 /*yield*/, this._handleImplicitFlow(currentUrl)];
                        case 3: return [2 /*return*/, __assign$d.apply(void 0, [__assign$d.apply(void 0, _b.concat([(_c.sent())])), { state: state }])];
                        case 4: return [3 /*break*/, 6];
                        case 5:
                            e_1 = _c.sent();
                            logger$i.error("Error handling auth response.", e_1);
                            throw e_1;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        OAuth.prototype._validateState = function (urlParams) {
            if (!urlParams) {
                return;
            }
            var savedState = getState();
            var returnedState = urlParams.state;
            // This is because savedState only exists if the flow was initiated by Amplify
            if (savedState && savedState !== returnedState) {
                throw new Error('Invalid state in OAuth flow');
            }
            return returnedState;
        };
        OAuth.prototype.signOut = function () {
            return __awaiter$d(this, void 0, void 0, function () {
                var oAuthLogoutEndpoint, client_id, signout_uri;
                return __generator$d(this, function (_a) {
                    oAuthLogoutEndpoint = 'https://' + this._config.domain + '/logout?';
                    client_id = isCognitoHostedOpts(this._config)
                        ? this._cognitoClientId
                        : this._config.oauth.clientID;
                    signout_uri = isCognitoHostedOpts(this._config)
                        ? this._config.redirectSignOut
                        : this._config.returnTo;
                    oAuthLogoutEndpoint += Object.entries({
                        client_id: client_id,
                        logout_uri: encodeURIComponent(signout_uri),
                    })
                        .map(function (_a) {
                        var _b = __read$5(_a, 2), k = _b[0], v = _b[1];
                        return k + "=" + v;
                    })
                        .join('&');
                    dispatchAuthEvent$1('oAuthSignOut', { oAuth: 'signOut' }, "Signing out from " + oAuthLogoutEndpoint);
                    logger$i.debug("Signing out from " + oAuthLogoutEndpoint);
                    return [2 /*return*/, this._urlOpener(oAuthLogoutEndpoint)];
                });
            });
        };
        OAuth.prototype._generateState = function (length) {
            var result = '';
            var i = length;
            var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            for (; i > 0; --i)
                result += chars[Math.round(Math.random() * (chars.length - 1))];
            return result;
        };
        OAuth.prototype._generateChallenge = function (code) {
            return this._base64URL(sha256(code));
        };
        OAuth.prototype._base64URL = function (string) {
            return string
                .toString(encBase64)
                .replace(/=/g, '')
                .replace(/\+/g, '-')
                .replace(/\//g, '_');
        };
        OAuth.prototype._generateRandom = function (size) {
            var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
            var buffer = new Uint8Array(size);
            if (typeof window !== 'undefined' && !!window.crypto) {
                window.crypto.getRandomValues(buffer);
            }
            else {
                for (var i = 0; i < size; i += 1) {
                    buffer[i] = (Math.random() * CHARSET.length) | 0;
                }
            }
            return this._bufferToString(buffer);
        };
        OAuth.prototype._bufferToString = function (buffer) {
            var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var state = [];
            for (var i = 0; i < buffer.byteLength; i += 1) {
                var index = buffer[i] % CHARSET.length;
                state.push(CHARSET[index]);
            }
            return state.join('');
        };
        return OAuth;
    }());

    /*
     * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var urlListener = (function (callback) {
        if (JS.browserOrNode().isBrowser && window.location) {
            var url = window.location.href;
            callback({ url: url });
        }
        else if (JS.browserOrNode().isNode) ;
        else {
            throw new Error('Not supported');
        }
    });

    var AuthErrorStrings;
    (function (AuthErrorStrings) {
        AuthErrorStrings["DEFAULT_MSG"] = "Authentication Error";
        AuthErrorStrings["EMPTY_USERNAME"] = "Username cannot be empty";
        AuthErrorStrings["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
        AuthErrorStrings["EMPTY_PASSWORD"] = "Password cannot be empty";
        AuthErrorStrings["EMPTY_CODE"] = "Confirmation code cannot be empty";
        AuthErrorStrings["SIGN_UP_ERROR"] = "Error creating account";
        AuthErrorStrings["NO_MFA"] = "No valid MFA method provided";
        AuthErrorStrings["INVALID_MFA"] = "Invalid MFA type";
        AuthErrorStrings["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
        AuthErrorStrings["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
    })(AuthErrorStrings || (AuthErrorStrings = {}));

    /*
     * Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __extends$5 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var logger$h = new ConsoleLogger('AuthError');
    var AuthError = /** @class */ (function (_super) {
        __extends$5(AuthError, _super);
        function AuthError(type) {
            var _this = this;
            var _a = authErrorMessages[type], message = _a.message, log = _a.log;
            _this = _super.call(this, message) || this;
            // Hack for making the custom error class work when transpiled to es5
            // TODO: Delete the following 2 lines after we change the build target to >= es2015
            _this.constructor = AuthError;
            Object.setPrototypeOf(_this, AuthError.prototype);
            _this.name = 'AuthError';
            _this.log = log || message;
            logger$h.error(_this.log);
            return _this;
        }
        return AuthError;
    }(Error));
    var NoUserPoolError = /** @class */ (function (_super) {
        __extends$5(NoUserPoolError, _super);
        function NoUserPoolError(type) {
            var _this = _super.call(this, type) || this;
            // Hack for making the custom error class work when transpiled to es5
            // TODO: Delete the following 2 lines after we change the build target to >= es2015
            _this.constructor = NoUserPoolError;
            Object.setPrototypeOf(_this, NoUserPoolError.prototype);
            _this.name = 'NoUserPoolError';
            return _this;
        }
        return NoUserPoolError;
    }(AuthError));
    var authErrorMessages = {
        noConfig: {
            message: AuthErrorStrings.DEFAULT_MSG,
            log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n\t\t\t\tRefer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        ",
        },
        missingAuthConfig: {
            message: AuthErrorStrings.DEFAULT_MSG,
            log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        ",
        },
        emptyUsername: {
            message: AuthErrorStrings.EMPTY_USERNAME,
        },
        // TODO: should include a list of valid sign-in types
        invalidUsername: {
            message: AuthErrorStrings.INVALID_USERNAME,
        },
        emptyPassword: {
            message: AuthErrorStrings.EMPTY_PASSWORD,
        },
        emptyCode: {
            message: AuthErrorStrings.EMPTY_CODE,
        },
        signUpError: {
            message: AuthErrorStrings.SIGN_UP_ERROR,
            log: 'The first parameter should either be non-null string or object',
        },
        noMFA: {
            message: AuthErrorStrings.NO_MFA,
        },
        invalidMFA: {
            message: AuthErrorStrings.INVALID_MFA,
        },
        emptyChallengeResponse: {
            message: AuthErrorStrings.EMPTY_CHALLENGE,
        },
        noUserSession: {
            message: AuthErrorStrings.NO_USER_SESSION,
        },
        default: {
            message: AuthErrorStrings.DEFAULT_MSG,
        },
    };

    /*
     * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *	 http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$c = (undefined && undefined.__assign) || function () {
        __assign$c = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$c.apply(this, arguments);
    };
    var __awaiter$c = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$c = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$4 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var logger$g = new ConsoleLogger('AuthClass');
    var USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';
    // 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/
    var OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;
    var AMPLIFY_SYMBOL$2 = (typeof Symbol !== 'undefined' &&
        typeof Symbol.for === 'function'
        ? Symbol.for('amplify_default')
        : '@@amplify_default');
    var dispatchAuthEvent = function (event, data, message) {
        Hub.dispatch('auth', { event: event, data: data, message: message }, 'Auth', AMPLIFY_SYMBOL$2);
    };
    /**
     * Provide authentication steps
     */
    var AuthClass = /** @class */ (function () {
        /**
         * Initialize Auth with AWS configurations
         * @param {Object} config - Configuration of the Auth
         */
        function AuthClass(config) {
            var _this = this;
            this.userPool = null;
            this.user = null;
            this.oAuthFlowInProgress = false;
            this.Credentials = Credentials;
            this.wrapRefreshSessionCallback = function (callback) {
                var wrapped = function (error, data) {
                    if (data) {
                        dispatchAuthEvent('tokenRefresh', undefined, "New token retrieved");
                    }
                    else {
                        dispatchAuthEvent('tokenRefresh_failure', error, "Failed to retrieve new token");
                    }
                    return callback(error, data);
                };
                return wrapped;
            }; // prettier-ignore
            this.configure(config);
            this.currentCredentials = this.currentCredentials.bind(this);
            this.currentUserCredentials = this.currentUserCredentials.bind(this);
            Hub.listen('auth', function (_a) {
                var payload = _a.payload;
                var event = payload.event;
                switch (event) {
                    case 'signIn':
                        _this._storage.setItem('amplify-signin-with-hostedUI', 'false');
                        break;
                    case 'signOut':
                        _this._storage.removeItem('amplify-signin-with-hostedUI');
                        break;
                    case 'cognitoHostedUI':
                        _this._storage.setItem('amplify-signin-with-hostedUI', 'true');
                        break;
                }
            });
        }
        AuthClass.prototype.getModuleName = function () {
            return 'Auth';
        };
        AuthClass.prototype.configure = function (config) {
            var _this = this;
            if (!config)
                return this._config || {};
            logger$g.debug('configure Auth');
            var conf = Object.assign({}, this._config, Parser$1.parseMobilehubConfig(config).Auth, config);
            this._config = conf;
            var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint;
            if (!this._config.storage) {
                // backward compatability
                if (cookieStorage)
                    this._storage = new CookieStorage(cookieStorage);
                else {
                    this._storage = config.ssr
                        ? new UniversalStorage()
                        : new StorageHelper$1().getStorage();
                }
            }
            else {
                if (!this._isValidAuthStorage(this._config.storage)) {
                    logger$g.error('The storage in the Auth config is not valid!');
                    throw new Error('Empty storage object');
                }
                this._storage = this._config.storage;
            }
            this._storageSync = Promise.resolve();
            if (typeof this._storage['sync'] === 'function') {
                this._storageSync = this._storage['sync']();
            }
            if (userPoolId) {
                var userPoolData = {
                    UserPoolId: userPoolId,
                    ClientId: userPoolWebClientId,
                    endpoint: endpoint,
                };
                userPoolData.Storage = this._storage;
                this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);
            }
            this.Credentials.configure({
                mandatorySignIn: mandatorySignIn,
                region: identityPoolRegion || region,
                userPoolId: userPoolId,
                identityPoolId: identityPoolId,
                refreshHandlers: refreshHandlers,
                storage: this._storage,
            });
            // initialize cognitoauth client if hosted ui options provided
            // to keep backward compatibility:
            var cognitoHostedUIConfig = oauth
                ? isCognitoHostedOpts(this._config.oauth)
                    ? oauth
                    : oauth.awsCognito
                : undefined;
            if (cognitoHostedUIConfig) {
                var cognitoAuthParams = Object.assign({
                    cognitoClientId: userPoolWebClientId,
                    UserPoolId: userPoolId,
                    domain: cognitoHostedUIConfig['domain'],
                    scopes: cognitoHostedUIConfig['scope'],
                    redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],
                    redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],
                    responseType: cognitoHostedUIConfig['responseType'],
                    Storage: this._storage,
                    urlOpener: cognitoHostedUIConfig['urlOpener'],
                    clientMetadata: clientMetadata,
                }, cognitoHostedUIConfig['options']);
                this._oAuthHandler = new OAuth({
                    scopes: cognitoAuthParams.scopes,
                    config: cognitoAuthParams,
                    cognitoClientId: cognitoAuthParams.cognitoClientId,
                });
                // **NOTE** - Remove this in a future major release as it is a breaking change
                // Prevents _handleAuthResponse from being called multiple times in Expo
                // See https://github.com/aws-amplify/amplify-js/issues/4388
                var usedResponseUrls_1 = {};
                urlListener(function (_a) {
                    var url = _a.url;
                    if (usedResponseUrls_1[url]) {
                        return;
                    }
                    usedResponseUrls_1[url] = true;
                    _this._handleAuthResponse(url);
                });
            }
            dispatchAuthEvent('configured', null, "The Auth category has been configured successfully");
            return this._config;
        };
        /**
         * Sign up with username, password and other attributes like phone, email
         * @param {String | object} params - The user attributes used for signin
         * @param {String[]} restOfAttrs - for the backward compatability
         * @return - A promise resolves callback data if success
         */
        AuthClass.prototype.signUp = function (params) {
            var _this = this;
            var restOfAttrs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                restOfAttrs[_i - 1] = arguments[_i];
            }
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            var username = null;
            var password = null;
            var attributes = [];
            var validationData = null;
            var clientMetadata;
            if (params && typeof params === 'string') {
                username = params;
                password = restOfAttrs ? restOfAttrs[0] : null;
                var email = restOfAttrs ? restOfAttrs[1] : null;
                var phone_number = restOfAttrs ? restOfAttrs[2] : null;
                if (email)
                    attributes.push(new CognitoUserAttribute({ Name: 'email', Value: email }));
                if (phone_number)
                    attributes.push(new CognitoUserAttribute({
                        Name: 'phone_number',
                        Value: phone_number,
                    }));
            }
            else if (params && typeof params === 'object') {
                username = params['username'];
                password = params['password'];
                if (params && params.clientMetadata) {
                    clientMetadata = params.clientMetadata;
                }
                else if (this._config.clientMetadata) {
                    clientMetadata = this._config.clientMetadata;
                }
                var attrs_1 = params['attributes'];
                if (attrs_1) {
                    Object.keys(attrs_1).map(function (key) {
                        attributes.push(new CognitoUserAttribute({ Name: key, Value: attrs_1[key] }));
                    });
                }
                var validationDataObject_1 = params['validationData'];
                if (validationDataObject_1) {
                    validationData = [];
                    Object.keys(validationDataObject_1).map(function (key) {
                        validationData.push(new CognitoUserAttribute({
                            Name: key,
                            Value: validationDataObject_1[key],
                        }));
                    });
                }
            }
            else {
                return this.rejectAuthError(AuthErrorTypes.SignUpError);
            }
            if (!username) {
                return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
            }
            if (!password) {
                return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
            }
            logger$g.debug('signUp attrs:', attributes);
            logger$g.debug('signUp validation data:', validationData);
            return new Promise(function (resolve, reject) {
                _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {
                    if (err) {
                        dispatchAuthEvent('signUp_failure', err, username + " failed to signup");
                        reject(err);
                    }
                    else {
                        dispatchAuthEvent('signUp', data, username + " has signed up successfully");
                        resolve(data);
                    }
                }, clientMetadata);
            });
        };
        /**
         * Send the verification code to confirm sign up
         * @param {String} username - The username to be confirmed
         * @param {String} code - The verification code
         * @param {ConfirmSignUpOptions} options - other options for confirm signup
         * @return - A promise resolves callback data if success
         */
        AuthClass.prototype.confirmSignUp = function (username, code, options) {
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            if (!username) {
                return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
            }
            if (!code) {
                return this.rejectAuthError(AuthErrorTypes.EmptyCode);
            }
            var user = this.createCognitoUser(username);
            var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean'
                ? options.forceAliasCreation
                : true;
            var clientMetadata;
            if (options && options.clientMetadata) {
                clientMetadata = options.clientMetadata;
            }
            else if (this._config.clientMetadata) {
                clientMetadata = this._config.clientMetadata;
            }
            return new Promise(function (resolve, reject) {
                user.confirmRegistration(code, forceAliasCreation, function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(data);
                    }
                }, clientMetadata);
            });
        };
        /**
         * Resend the verification code
         * @param {String} username - The username to be confirmed
         * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers
         * @return - A promise resolves code delivery details if successful
         */
        AuthClass.prototype.resendSignUp = function (username, clientMetadata) {
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            if (!username) {
                return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
            }
            var user = this.createCognitoUser(username);
            return new Promise(function (resolve, reject) {
                user.resendConfirmationCode(function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(data);
                    }
                }, clientMetadata);
            });
        };
        /**
         * Sign in
         * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options
         * @param {String} password - The password of the username
         * @return - A promise resolves the CognitoUser
         */
        AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            var username = null;
            var password = null;
            var validationData = {};
            // for backward compatibility
            if (typeof usernameOrSignInOpts === 'string') {
                username = usernameOrSignInOpts;
                password = pw;
            }
            else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {
                if (typeof pw !== 'undefined') {
                    logger$g.warn('The password should be defined under the first parameter object!');
                }
                username = usernameOrSignInOpts.username;
                password = usernameOrSignInOpts.password;
                validationData = usernameOrSignInOpts.validationData;
            }
            else {
                return this.rejectAuthError(AuthErrorTypes.InvalidUsername);
            }
            if (!username) {
                return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
            }
            var authDetails = new AuthenticationDetails({
                Username: username,
                Password: password,
                ValidationData: validationData,
                ClientMetadata: clientMetadata,
            });
            if (password) {
                return this.signInWithPassword(authDetails);
            }
            else {
                return this.signInWithoutPassword(authDetails);
            }
        };
        /**
         * Return an object with the authentication callbacks
         * @param {CognitoUser} user - the cognito user object
         * @param {} resolve - function called when resolving the current step
         * @param {} reject - function called when rejecting the current step
         * @return - an object with the callback methods for user authentication
         */
        AuthClass.prototype.authCallbacks = function (user, resolve, reject) {
            var _this = this;
            var that = this;
            return {
                onSuccess: function (session) { return __awaiter$c(_this, void 0, void 0, function () {
                    var cred, e_1, currentUser, e_2;
                    return __generator$c(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                logger$g.debug(session);
                                delete user['challengeName'];
                                delete user['challengeParam'];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 4, 5, 9]);
                                return [4 /*yield*/, this.Credentials.clear()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, this.Credentials.set(session, 'session')];
                            case 3:
                                cred = _a.sent();
                                logger$g.debug('succeed to get cognito credentials', cred);
                                return [3 /*break*/, 9];
                            case 4:
                                e_1 = _a.sent();
                                logger$g.debug('cannot get cognito credentials', e_1);
                                return [3 /*break*/, 9];
                            case 5:
                                _a.trys.push([5, 7, , 8]);
                                return [4 /*yield*/, this.currentUserPoolUser()];
                            case 6:
                                currentUser = _a.sent();
                                that.user = currentUser;
                                dispatchAuthEvent('signIn', currentUser, "A user " + user.getUsername() + " has been signed in");
                                resolve(currentUser);
                                return [3 /*break*/, 8];
                            case 7:
                                e_2 = _a.sent();
                                logger$g.error('Failed to get the signed in user', e_2);
                                reject(e_2);
                                return [3 /*break*/, 8];
                            case 8: return [7 /*endfinally*/];
                            case 9: return [2 /*return*/];
                        }
                    });
                }); },
                onFailure: function (err) {
                    logger$g.debug('signIn failure', err);
                    dispatchAuthEvent('signIn_failure', err, user.getUsername() + " failed to signin");
                    reject(err);
                },
                customChallenge: function (challengeParam) {
                    logger$g.debug('signIn custom challenge answer required');
                    user['challengeName'] = 'CUSTOM_CHALLENGE';
                    user['challengeParam'] = challengeParam;
                    resolve(user);
                },
                mfaRequired: function (challengeName, challengeParam) {
                    logger$g.debug('signIn MFA required');
                    user['challengeName'] = challengeName;
                    user['challengeParam'] = challengeParam;
                    resolve(user);
                },
                mfaSetup: function (challengeName, challengeParam) {
                    logger$g.debug('signIn mfa setup', challengeName);
                    user['challengeName'] = challengeName;
                    user['challengeParam'] = challengeParam;
                    resolve(user);
                },
                newPasswordRequired: function (userAttributes, requiredAttributes) {
                    logger$g.debug('signIn new password');
                    user['challengeName'] = 'NEW_PASSWORD_REQUIRED';
                    user['challengeParam'] = {
                        userAttributes: userAttributes,
                        requiredAttributes: requiredAttributes,
                    };
                    resolve(user);
                },
                totpRequired: function (challengeName, challengeParam) {
                    logger$g.debug('signIn totpRequired');
                    user['challengeName'] = challengeName;
                    user['challengeParam'] = challengeParam;
                    resolve(user);
                },
                selectMFAType: function (challengeName, challengeParam) {
                    logger$g.debug('signIn selectMFAType', challengeName);
                    user['challengeName'] = challengeName;
                    user['challengeParam'] = challengeParam;
                    resolve(user);
                },
            };
        };
        /**
         * Sign in with a password
         * @private
         * @param {AuthenticationDetails} authDetails - the user sign in data
         * @return - A promise resolves the CognitoUser object if success or mfa required
         */
        AuthClass.prototype.signInWithPassword = function (authDetails) {
            var _this = this;
            if (this.pendingSignIn) {
                throw new Error('Pending sign-in attempt already in progress');
            }
            var user = this.createCognitoUser(authDetails.getUsername());
            this.pendingSignIn = new Promise(function (resolve, reject) {
                user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {
                    _this.pendingSignIn = null;
                    resolve(value);
                }, function (error) {
                    _this.pendingSignIn = null;
                    reject(error);
                }));
            });
            return this.pendingSignIn;
        };
        /**
         * Sign in without a password
         * @private
         * @param {AuthenticationDetails} authDetails - the user sign in data
         * @return - A promise resolves the CognitoUser object if success or mfa required
         */
        AuthClass.prototype.signInWithoutPassword = function (authDetails) {
            var _this = this;
            var user = this.createCognitoUser(authDetails.getUsername());
            user.setAuthenticationFlowType('CUSTOM_AUTH');
            return new Promise(function (resolve, reject) {
                user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));
            });
        };
        /**
         * This was previously used by an authenticated user to get MFAOptions,
         * but no longer returns a meaningful response. Refer to the documentation for
         * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
         * @deprecated
         * @param {CognitoUser} user - the current user
         * @return - A promise resolves the current preferred mfa option if success
         */
        AuthClass.prototype.getMFAOptions = function (user) {
            return new Promise(function (res, rej) {
                user.getMFAOptions(function (err, mfaOptions) {
                    if (err) {
                        logger$g.debug('get MFA Options failed', err);
                        rej(err);
                        return;
                    }
                    logger$g.debug('get MFA options success', mfaOptions);
                    res(mfaOptions);
                    return;
                });
            });
        };
        /**
         * get preferred mfa method
         * @param {CognitoUser} user - the current cognito user
         * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA
         */
        AuthClass.prototype.getPreferredMFA = function (user, params) {
            var _this = this;
            var that = this;
            return new Promise(function (res, rej) {
                var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
                var bypassCache = params ? params.bypassCache : false;
                user.getUserData(function (err, data) {
                    if (err) {
                        logger$g.debug('getting preferred mfa failed', err);
                        rej(err);
                        return;
                    }
                    var mfaType = that._getMfaTypeFromUserData(data);
                    if (!mfaType) {
                        rej('invalid MFA Type');
                        return;
                    }
                    else {
                        res(mfaType);
                        return;
                    }
                }, { bypassCache: bypassCache, clientMetadata: clientMetadata });
            });
        };
        AuthClass.prototype._getMfaTypeFromUserData = function (data) {
            var ret = null;
            var preferredMFA = data.PreferredMfaSetting;
            // if the user has used Auth.setPreferredMFA() to setup the mfa type
            // then the "PreferredMfaSetting" would exist in the response
            if (preferredMFA) {
                ret = preferredMFA;
            }
            else {
                // if mfaList exists but empty, then its noMFA
                var mfaList = data.UserMFASettingList;
                if (!mfaList) {
                    // if SMS was enabled by using Auth.enableSMS(),
                    // the response would contain MFAOptions
                    // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'
                    // if it does not exist, then it should be NOMFA
                    var MFAOptions = data.MFAOptions;
                    if (MFAOptions) {
                        ret = 'SMS_MFA';
                    }
                    else {
                        ret = 'NOMFA';
                    }
                }
                else if (mfaList.length === 0) {
                    ret = 'NOMFA';
                }
                else {
                    logger$g.debug('invalid case for getPreferredMFA', data);
                }
            }
            return ret;
        };
        AuthClass.prototype._getUserData = function (user, params) {
            return new Promise(function (res, rej) {
                user.getUserData(function (err, data) {
                    if (err) {
                        logger$g.debug('getting user data failed', err);
                        rej(err);
                        return;
                    }
                    else {
                        res(data);
                        return;
                    }
                }, params);
            });
        };
        /**
         * set preferred MFA method
         * @param {CognitoUser} user - the current Cognito user
         * @param {string} mfaMethod - preferred mfa method
         * @return - A promise resolve if success
         */
        AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {
            return __awaiter$c(this, void 0, void 0, function () {
                var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType;
                return __generator$c(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            clientMetadata = this._config.clientMetadata;
                            return [4 /*yield*/, this._getUserData(user, {
                                    bypassCache: true,
                                    clientMetadata: clientMetadata,
                                })];
                        case 1:
                            userData = _b.sent();
                            smsMfaSettings = null;
                            totpMfaSettings = null;
                            _a = mfaMethod;
                            switch (_a) {
                                case 'TOTP' : return [3 /*break*/, 2];
                                case 'SMS' : return [3 /*break*/, 3];
                                case 'NOMFA': return [3 /*break*/, 4];
                            }
                            return [3 /*break*/, 6];
                        case 2:
                            totpMfaSettings = {
                                PreferredMfa: true,
                                Enabled: true,
                            };
                            return [3 /*break*/, 7];
                        case 3:
                            smsMfaSettings = {
                                PreferredMfa: true,
                                Enabled: true,
                            };
                            return [3 /*break*/, 7];
                        case 4:
                            mfaList = userData['UserMFASettingList'];
                            return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];
                        case 5:
                            currentMFAType = _b.sent();
                            if (currentMFAType === 'NOMFA') {
                                return [2 /*return*/, Promise.resolve('No change for mfa type')];
                            }
                            else if (currentMFAType === 'SMS_MFA') {
                                smsMfaSettings = {
                                    PreferredMfa: false,
                                    Enabled: false,
                                };
                            }
                            else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {
                                totpMfaSettings = {
                                    PreferredMfa: false,
                                    Enabled: false,
                                };
                            }
                            else {
                                return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];
                            }
                            // if there is a UserMFASettingList in the response
                            // we need to disable every mfa type in that list
                            if (mfaList && mfaList.length !== 0) {
                                // to disable SMS or TOTP if exists in that list
                                mfaList.forEach(function (mfaType) {
                                    if (mfaType === 'SMS_MFA') {
                                        smsMfaSettings = {
                                            PreferredMfa: false,
                                            Enabled: false,
                                        };
                                    }
                                    else if (mfaType === 'SOFTWARE_TOKEN_MFA') {
                                        totpMfaSettings = {
                                            PreferredMfa: false,
                                            Enabled: false,
                                        };
                                    }
                                });
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            logger$g.debug('no validmfa method provided');
                            return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];
                        case 7:
                            return [2 /*return*/, new Promise(function (res, rej) {
                                    user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {
                                        if (err) {
                                            logger$g.debug('Set user mfa preference error', err);
                                            return rej(err);
                                        }
                                        logger$g.debug('Set user mfa success', result);
                                        logger$g.debug('Caching the latest user data into local');
                                        // cache the latest result into user data
                                        user.getUserData(function (err, data) {
                                            if (err) {
                                                logger$g.debug('getting user data failed', err);
                                                return rej(err);
                                            }
                                            else {
                                                return res(result);
                                            }
                                        }, {
                                            bypassCache: true,
                                            clientMetadata: clientMetadata,
                                        });
                                    });
                                })];
                    }
                });
            });
        };
        /**
         * diable SMS
         * @deprecated
         * @param {CognitoUser} user - the current user
         * @return - A promise resolves is success
         */
        AuthClass.prototype.disableSMS = function (user) {
            return new Promise(function (res, rej) {
                user.disableMFA(function (err, data) {
                    if (err) {
                        logger$g.debug('disable mfa failed', err);
                        rej(err);
                        return;
                    }
                    logger$g.debug('disable mfa succeed', data);
                    res(data);
                    return;
                });
            });
        };
        /**
         * enable SMS
         * @deprecated
         * @param {CognitoUser} user - the current user
         * @return - A promise resolves is success
         */
        AuthClass.prototype.enableSMS = function (user) {
            return new Promise(function (res, rej) {
                user.enableMFA(function (err, data) {
                    if (err) {
                        logger$g.debug('enable mfa failed', err);
                        rej(err);
                        return;
                    }
                    logger$g.debug('enable mfa succeed', data);
                    res(data);
                    return;
                });
            });
        };
        /**
         * Setup TOTP
         * @param {CognitoUser} user - the current user
         * @return - A promise resolves with the secret code if success
         */
        AuthClass.prototype.setupTOTP = function (user) {
            return new Promise(function (res, rej) {
                user.associateSoftwareToken({
                    onFailure: function (err) {
                        logger$g.debug('associateSoftwareToken failed', err);
                        rej(err);
                        return;
                    },
                    associateSecretCode: function (secretCode) {
                        logger$g.debug('associateSoftwareToken sucess', secretCode);
                        res(secretCode);
                        return;
                    },
                });
            });
        };
        /**
         * verify TOTP setup
         * @param {CognitoUser} user - the current user
         * @param {string} challengeAnswer - challenge answer
         * @return - A promise resolves is success
         */
        AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {
            logger$g.debug('verification totp token', user, challengeAnswer);
            return new Promise(function (res, rej) {
                user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {
                    onFailure: function (err) {
                        logger$g.debug('verifyTotpToken failed', err);
                        rej(err);
                        return;
                    },
                    onSuccess: function (data) {
                        dispatchAuthEvent('signIn', user, "A user " + user.getUsername() + " has been signed in");
                        logger$g.debug('verifyTotpToken success', data);
                        res(data);
                        return;
                    },
                });
            });
        };
        /**
         * Send MFA code to confirm sign in
         * @param {Object} user - The CognitoUser object
         * @param {String} code - The confirmation code
         */
        AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {
            var _this = this;
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!code) {
                return this.rejectAuthError(AuthErrorTypes.EmptyCode);
            }
            var that = this;
            return new Promise(function (resolve, reject) {
                user.sendMFACode(code, {
                    onSuccess: function (session) { return __awaiter$c(_this, void 0, void 0, function () {
                        var cred, e_3;
                        return __generator$c(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    logger$g.debug(session);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 4, 5, 6]);
                                    return [4 /*yield*/, this.Credentials.clear()];
                                case 2:
                                    _a.sent();
                                    return [4 /*yield*/, this.Credentials.set(session, 'session')];
                                case 3:
                                    cred = _a.sent();
                                    logger$g.debug('succeed to get cognito credentials', cred);
                                    return [3 /*break*/, 6];
                                case 4:
                                    e_3 = _a.sent();
                                    logger$g.debug('cannot get cognito credentials', e_3);
                                    return [3 /*break*/, 6];
                                case 5:
                                    that.user = user;
                                    dispatchAuthEvent('signIn', user, "A user " + user.getUsername() + " has been signed in");
                                    resolve(user);
                                    return [7 /*endfinally*/];
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); },
                    onFailure: function (err) {
                        logger$g.debug('confirm signIn failure', err);
                        reject(err);
                    },
                }, mfaType, clientMetadata);
            });
        };
        AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {
            var _this = this;
            if (requiredAttributes === void 0) { requiredAttributes = {}; }
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!password) {
                return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
            }
            var that = this;
            return new Promise(function (resolve, reject) {
                user.completeNewPasswordChallenge(password, requiredAttributes, {
                    onSuccess: function (session) { return __awaiter$c(_this, void 0, void 0, function () {
                        var cred, e_4;
                        return __generator$c(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    logger$g.debug(session);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 4, 5, 6]);
                                    return [4 /*yield*/, this.Credentials.clear()];
                                case 2:
                                    _a.sent();
                                    return [4 /*yield*/, this.Credentials.set(session, 'session')];
                                case 3:
                                    cred = _a.sent();
                                    logger$g.debug('succeed to get cognito credentials', cred);
                                    return [3 /*break*/, 6];
                                case 4:
                                    e_4 = _a.sent();
                                    logger$g.debug('cannot get cognito credentials', e_4);
                                    return [3 /*break*/, 6];
                                case 5:
                                    that.user = user;
                                    dispatchAuthEvent('signIn', user, "A user " + user.getUsername() + " has been signed in");
                                    resolve(user);
                                    return [7 /*endfinally*/];
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); },
                    onFailure: function (err) {
                        logger$g.debug('completeNewPassword failure', err);
                        dispatchAuthEvent('completeNewPassword_failure', err, _this.user + " failed to complete the new password flow");
                        reject(err);
                    },
                    mfaRequired: function (challengeName, challengeParam) {
                        logger$g.debug('signIn MFA required');
                        user['challengeName'] = challengeName;
                        user['challengeParam'] = challengeParam;
                        resolve(user);
                    },
                    mfaSetup: function (challengeName, challengeParam) {
                        logger$g.debug('signIn mfa setup', challengeName);
                        user['challengeName'] = challengeName;
                        user['challengeParam'] = challengeParam;
                        resolve(user);
                    },
                    totpRequired: function (challengeName, challengeParam) {
                        logger$g.debug('signIn mfa setup', challengeName);
                        user['challengeName'] = challengeName;
                        user['challengeParam'] = challengeParam;
                        resolve(user);
                    },
                }, clientMetadata);
            });
        };
        /**
         * Send the answer to a custom challenge
         * @param {CognitoUser} user - The CognitoUser object
         * @param {String} challengeResponses - The confirmation code
         */
        AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {
            var _this = this;
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            if (!challengeResponses) {
                return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);
            }
            return new Promise(function (resolve, reject) {
                user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);
            });
        };
        /**
         * Update an authenticated users' attributes
         * @param {CognitoUser} - The currently logged in user object
         * @return {Promise}
         **/
        AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            var attributeList = [];
            var that = this;
            return new Promise(function (resolve, reject) {
                that.userSession(user).then(function (session) {
                    for (var key in attributes) {
                        if (key !== 'sub' && key.indexOf('_verified') < 0) {
                            var attr = {
                                Name: key,
                                Value: attributes[key],
                            };
                            attributeList.push(attr);
                        }
                    }
                    user.updateAttributes(attributeList, function (err, result) {
                        if (err) {
                            return reject(err);
                        }
                        else {
                            return resolve(result);
                        }
                    }, clientMetadata);
                });
            });
        };
        /**
         * Return user attributes
         * @param {Object} user - The CognitoUser object
         * @return - A promise resolves to user attributes if success
         */
        AuthClass.prototype.userAttributes = function (user) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.userSession(user).then(function (session) {
                    user.getUserAttributes(function (err, attributes) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(attributes);
                        }
                    });
                });
            });
        };
        AuthClass.prototype.verifiedContact = function (user) {
            var that = this;
            return this.userAttributes(user).then(function (attributes) {
                var attrs = that.attributesToObject(attributes);
                var unverified = {};
                var verified = {};
                if (attrs['email']) {
                    if (attrs['email_verified']) {
                        verified['email'] = attrs['email'];
                    }
                    else {
                        unverified['email'] = attrs['email'];
                    }
                }
                if (attrs['phone_number']) {
                    if (attrs['phone_number_verified']) {
                        verified['phone_number'] = attrs['phone_number'];
                    }
                    else {
                        unverified['phone_number'] = attrs['phone_number'];
                    }
                }
                return {
                    verified: verified,
                    unverified: unverified,
                };
            });
        };
        /**
         * Get current authenticated user
         * @return - A promise resolves to current authenticated CognitoUser if success
         */
        AuthClass.prototype.currentUserPoolUser = function (params) {
            var _this = this;
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            return new Promise(function (res, rej) {
                _this._storageSync
                    .then(function () { return __awaiter$c(_this, void 0, void 0, function () {
                    var user, clientMetadata;
                    var _this = this;
                    return __generator$c(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.isOAuthInProgress()) return [3 /*break*/, 2];
                                logger$g.debug('OAuth signIn in progress, waiting for resolution...');
                                return [4 /*yield*/, new Promise(function (res) {
                                        var timeoutId = setTimeout(function () {
                                            logger$g.debug('OAuth signIn in progress timeout');
                                            Hub.remove('auth', hostedUISignCallback);
                                            res();
                                        }, OAUTH_FLOW_MS_TIMEOUT);
                                        Hub.listen('auth', hostedUISignCallback);
                                        function hostedUISignCallback(_a) {
                                            var payload = _a.payload;
                                            var event = payload.event;
                                            if (event === 'cognitoHostedUI' ||
                                                event === 'cognitoHostedUI_failure') {
                                                logger$g.debug("OAuth signIn resolved: " + event);
                                                clearTimeout(timeoutId);
                                                Hub.remove('auth', hostedUISignCallback);
                                                res();
                                            }
                                        }
                                    })];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                user = this.userPool.getCurrentUser();
                                if (!user) {
                                    logger$g.debug('Failed to get user from user pool');
                                    rej('No current user');
                                    return [2 /*return*/];
                                }
                                clientMetadata = this._config.clientMetadata;
                                // refresh the session if the session expired.
                                user.getSession(function (err, session) { return __awaiter$c(_this, void 0, void 0, function () {
                                    var bypassCache, clientMetadata, _a, scope;
                                    var _this = this;
                                    return __generator$c(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                if (err) {
                                                    logger$g.debug('Failed to get the user session', err);
                                                    rej(err);
                                                    return [2 /*return*/];
                                                }
                                                bypassCache = params ? params.bypassCache : false;
                                                if (!bypassCache) return [3 /*break*/, 2];
                                                return [4 /*yield*/, this.Credentials.clear()];
                                            case 1:
                                                _b.sent();
                                                _b.label = 2;
                                            case 2:
                                                clientMetadata = this._config.clientMetadata;
                                                _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;
                                                if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {
                                                    user.getUserData(function (err, data) {
                                                        if (err) {
                                                            logger$g.debug('getting user data failed', err);
                                                            // Make sure the user is still valid
                                                            if (err.message === 'User is disabled.' ||
                                                                err.message === 'User does not exist.' ||
                                                                err.message === 'Access Token has been revoked' // Session revoked by another app
                                                            ) {
                                                                rej(err);
                                                            }
                                                            else {
                                                                // the error may also be thrown when lack of permissions to get user info etc
                                                                // in that case we just bypass the error
                                                                res(user);
                                                            }
                                                            return;
                                                        }
                                                        var preferredMFA = data.PreferredMfaSetting || 'NOMFA';
                                                        var attributeList = [];
                                                        for (var i = 0; i < data.UserAttributes.length; i++) {
                                                            var attribute = {
                                                                Name: data.UserAttributes[i].Name,
                                                                Value: data.UserAttributes[i].Value,
                                                            };
                                                            var userAttribute = new CognitoUserAttribute(attribute);
                                                            attributeList.push(userAttribute);
                                                        }
                                                        var attributes = _this.attributesToObject(attributeList);
                                                        Object.assign(user, { attributes: attributes, preferredMFA: preferredMFA });
                                                        return res(user);
                                                    }, { bypassCache: bypassCache, clientMetadata: clientMetadata });
                                                }
                                                else {
                                                    logger$g.debug("Unable to get the user data because the " + USER_ADMIN_SCOPE + " " +
                                                        "is not in the scopes of the access token");
                                                    return [2 /*return*/, res(user)];
                                                }
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }, { clientMetadata: clientMetadata });
                                return [2 /*return*/];
                        }
                    });
                }); })
                    .catch(function (e) {
                    logger$g.debug('Failed to sync cache info into memory', e);
                    return rej(e);
                });
            });
        };
        AuthClass.prototype.isOAuthInProgress = function () {
            return this.oAuthFlowInProgress;
        };
        /**
         * Get current authenticated user
         * @param {CurrentUserOpts} - options for getting the current user
         * @return - A promise resolves to current authenticated CognitoUser if success
         */
        AuthClass.prototype.currentAuthenticatedUser = function (params) {
            return __awaiter$c(this, void 0, void 0, function () {
                var federatedUser, e_5, federatedInfo, user, e_6;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            logger$g.debug('getting current authenticated user');
                            federatedUser = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._storageSync];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_5 = _a.sent();
                            logger$g.debug('Failed to sync cache info into memory', e_5);
                            throw e_5;
                        case 4:
                            try {
                                federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));
                                if (federatedInfo) {
                                    federatedUser = __assign$c(__assign$c({}, federatedInfo.user), { token: federatedInfo.token });
                                }
                            }
                            catch (e) {
                                logger$g.debug('cannot load federated user from auth storage');
                            }
                            if (!federatedUser) return [3 /*break*/, 5];
                            this.user = federatedUser;
                            logger$g.debug('get current authenticated federated user', this.user);
                            return [2 /*return*/, this.user];
                        case 5:
                            logger$g.debug('get current authenticated userpool user');
                            user = null;
                            _a.label = 6;
                        case 6:
                            _a.trys.push([6, 8, , 9]);
                            return [4 /*yield*/, this.currentUserPoolUser(params)];
                        case 7:
                            user = _a.sent();
                            return [3 /*break*/, 9];
                        case 8:
                            e_6 = _a.sent();
                            if (e_6 === 'No userPool') {
                                logger$g.error('Cannot get the current user because the user pool is missing. ' +
                                    'Please make sure the Auth module is configured with a valid Cognito User Pool ID');
                            }
                            logger$g.debug('The user is not authenticated by the error', e_6);
                            return [2 /*return*/, Promise.reject('The user is not authenticated')];
                        case 9:
                            this.user = user;
                            return [2 /*return*/, this.user];
                    }
                });
            });
        };
        /**
         * Get current user's session
         * @return - A promise resolves to session object if success
         */
        AuthClass.prototype.currentSession = function () {
            var that = this;
            logger$g.debug('Getting current session');
            // Purposely not calling the reject method here because we don't need a console error
            if (!this.userPool) {
                return Promise.reject();
            }
            return new Promise(function (res, rej) {
                that
                    .currentUserPoolUser()
                    .then(function (user) {
                    that
                        .userSession(user)
                        .then(function (session) {
                        res(session);
                        return;
                    })
                        .catch(function (e) {
                        logger$g.debug('Failed to get the current session', e);
                        rej(e);
                        return;
                    });
                })
                    .catch(function (e) {
                    logger$g.debug('Failed to get the current user', e);
                    rej(e);
                    return;
                });
            });
        };
        /**
         * Get the corresponding user session
         * @param {Object} user - The CognitoUser object
         * @return - A promise resolves to the session
         */
        AuthClass.prototype.userSession = function (user) {
            if (!user) {
                logger$g.debug('the user is null');
                return this.rejectAuthError(AuthErrorTypes.NoUserSession);
            }
            var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
            return new Promise(function (resolve, reject) {
                logger$g.debug('Getting the session from this user:', user);
                user.getSession(function (err, session) {
                    if (err) {
                        logger$g.debug('Failed to get the session from user', user);
                        reject(err);
                        return;
                    }
                    else {
                        logger$g.debug('Succeed to get the user session', session);
                        resolve(session);
                        return;
                    }
                }, { clientMetadata: clientMetadata });
            });
        };
        /**
         * Get authenticated credentials of current user.
         * @return - A promise resolves to be current user's credentials
         */
        AuthClass.prototype.currentUserCredentials = function () {
            return __awaiter$c(this, void 0, void 0, function () {
                var e_7, federatedInfo;
                var _this = this;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            logger$g.debug('Getting current user credentials');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._storageSync];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_7 = _a.sent();
                            logger$g.debug('Failed to sync cache info into memory', e_7);
                            throw e_7;
                        case 4:
                            federatedInfo = null;
                            try {
                                federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));
                            }
                            catch (e) {
                                logger$g.debug('failed to get or parse item aws-amplify-federatedInfo', e);
                            }
                            if (federatedInfo) {
                                // refresh the jwt token here if necessary
                                return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];
                            }
                            else {
                                return [2 /*return*/, this.currentSession()
                                        .then(function (session) {
                                        logger$g.debug('getting session success', session);
                                        return _this.Credentials.set(session, 'session');
                                    })
                                        .catch(function (error) {
                                        logger$g.debug('getting session failed', error);
                                        return _this.Credentials.set(null, 'guest');
                                    })];
                            }
                    }
                });
            });
        };
        AuthClass.prototype.currentCredentials = function () {
            logger$g.debug('getting current credentials');
            return this.Credentials.get();
        };
        /**
         * Initiate an attribute confirmation request
         * @param {Object} user - The CognitoUser
         * @param {Object} attr - The attributes to be verified
         * @return - A promise resolves to callback data if success
         */
        AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            return new Promise(function (resolve, reject) {
                user.getAttributeVerificationCode(attr, {
                    onSuccess: function () {
                        return resolve();
                    },
                    onFailure: function (err) {
                        return reject(err);
                    },
                }, clientMetadata);
            });
        };
        /**
         * Confirm an attribute using a confirmation code
         * @param {Object} user - The CognitoUser
         * @param {Object} attr - The attribute to be verified
         * @param {String} code - The confirmation code
         * @return - A promise resolves to callback data if success
         */
        AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {
            if (!code) {
                return this.rejectAuthError(AuthErrorTypes.EmptyCode);
            }
            return new Promise(function (resolve, reject) {
                user.verifyAttribute(attr, code, {
                    onSuccess: function (data) {
                        resolve(data);
                        return;
                    },
                    onFailure: function (err) {
                        reject(err);
                        return;
                    },
                });
            });
        };
        AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {
            var that = this;
            return that
                .currentUserPoolUser()
                .then(function (user) { return that.verifyUserAttribute(user, attr); });
        };
        /**
         * Confirm current user's attribute using a confirmation code
         * @param {Object} attr - The attribute to be verified
         * @param {String} code - The confirmation code
         * @return - A promise resolves to callback data if success
         */
        AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {
            var that = this;
            return that
                .currentUserPoolUser()
                .then(function (user) { return that.verifyUserAttributeSubmit(user, attr, code); });
        };
        AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {
            return __awaiter$c(this, void 0, void 0, function () {
                var e_8, isSignedInHostedUI;
                var _this = this;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this._storageSync];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_8 = _a.sent();
                            logger$g.debug('Failed to sync cache info into memory', e_8);
                            throw e_8;
                        case 3:
                            isSignedInHostedUI = this._oAuthHandler &&
                                this._storage.getItem('amplify-signin-with-hostedUI') === 'true';
                            return [2 /*return*/, new Promise(function (res, rej) {
                                    if (opts && opts.global) {
                                        logger$g.debug('user global sign out', user);
                                        // in order to use global signout
                                        // we must validate the user as an authenticated user by using getSession
                                        var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
                                        user.getSession(function (err, result) {
                                            if (err) {
                                                logger$g.debug('failed to get the user session', err);
                                                return rej(err);
                                            }
                                            user.globalSignOut({
                                                onSuccess: function (data) {
                                                    logger$g.debug('global sign out success');
                                                    if (isSignedInHostedUI) {
                                                        _this.oAuthSignOutRedirect(res, rej);
                                                    }
                                                    else {
                                                        return res();
                                                    }
                                                },
                                                onFailure: function (err) {
                                                    logger$g.debug('global sign out failed', err);
                                                    return rej(err);
                                                },
                                            });
                                        }, { clientMetadata: clientMetadata });
                                    }
                                    else {
                                        logger$g.debug('user sign out', user);
                                        user.signOut();
                                        if (isSignedInHostedUI) {
                                            _this.oAuthSignOutRedirect(res, rej);
                                        }
                                        else {
                                            return res();
                                        }
                                    }
                                })];
                    }
                });
            });
        };
        AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {
            var isBrowser = JS.browserOrNode().isBrowser;
            if (isBrowser) {
                this.oAuthSignOutRedirectOrReject(reject);
            }
            else {
                this.oAuthSignOutAndResolve(resolve);
            }
        };
        AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {
            this._oAuthHandler.signOut();
            resolve();
        };
        AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {
            this._oAuthHandler.signOut(); // this method redirects url
            // App should be redirected to another url otherwise it will reject
            setTimeout(function () { return reject('Signout timeout fail'); }, 3000);
        };
        /**
         * Sign out method
         * @
         * @return - A promise resolved if success
         */
        AuthClass.prototype.signOut = function (opts) {
            return __awaiter$c(this, void 0, void 0, function () {
                var user;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.cleanCachedItems()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a.sent();
                            logger$g.debug('failed to clear cached items');
                            return [3 /*break*/, 3];
                        case 3:
                            if (!this.userPool) return [3 /*break*/, 7];
                            user = this.userPool.getCurrentUser();
                            if (!user) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            logger$g.debug('no current Cognito user');
                            _a.label = 6;
                        case 6: return [3 /*break*/, 8];
                        case 7:
                            logger$g.debug('no Congito User pool');
                            _a.label = 8;
                        case 8:
                            /**
                             * Note for future refactor - no reliable way to get username with
                             * Cognito User Pools vs Identity when federating with Social Providers
                             * This is why we need a well structured session object that can be inspected
                             * and information passed back in the message below for Hub dispatch
                             */
                            dispatchAuthEvent('signOut', this.user, "A user has been signed out");
                            this.user = null;
                            return [2 /*return*/];
                    }
                });
            });
        };
        AuthClass.prototype.cleanCachedItems = function () {
            return __awaiter$c(this, void 0, void 0, function () {
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0: 
                        // clear cognito cached item
                        return [4 /*yield*/, this.Credentials.clear()];
                        case 1:
                            // clear cognito cached item
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Change a password for an authenticated user
         * @param {Object} user - The CognitoUser object
         * @param {String} oldPassword - the current password
         * @param {String} newPassword - the requested new password
         * @return - A promise resolves if success
         */
        AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {
            var _this = this;
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            return new Promise(function (resolve, reject) {
                _this.userSession(user).then(function (session) {
                    user.changePassword(oldPassword, newPassword, function (err, data) {
                        if (err) {
                            logger$g.debug('change password failure', err);
                            return reject(err);
                        }
                        else {
                            return resolve(data);
                        }
                    }, clientMetadata);
                });
            });
        };
        /**
         * Initiate a forgot password request
         * @param {String} username - the username to change password
         * @return - A promise resolves if success
         */
        AuthClass.prototype.forgotPassword = function (username, clientMetadata) {
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            if (!username) {
                return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
            }
            var user = this.createCognitoUser(username);
            return new Promise(function (resolve, reject) {
                user.forgotPassword({
                    onSuccess: function () {
                        resolve();
                        return;
                    },
                    onFailure: function (err) {
                        logger$g.debug('forgot password failure', err);
                        dispatchAuthEvent('forgotPassword_failure', err, username + " forgotPassword failed");
                        reject(err);
                        return;
                    },
                    inputVerificationCode: function (data) {
                        dispatchAuthEvent('forgotPassword', user, username + " has initiated forgot password flow");
                        resolve(data);
                        return;
                    },
                }, clientMetadata);
            });
        };
        /**
         * Confirm a new password using a confirmation Code
         * @param {String} username - The username
         * @param {String} code - The confirmation code
         * @param {String} password - The new password
         * @return - A promise that resolves if success
         */
        AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {
            if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
            if (!this.userPool) {
                return this.rejectNoUserPool();
            }
            if (!username) {
                return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
            }
            if (!code) {
                return this.rejectAuthError(AuthErrorTypes.EmptyCode);
            }
            if (!password) {
                return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
            }
            var user = this.createCognitoUser(username);
            return new Promise(function (resolve, reject) {
                user.confirmPassword(code, password, {
                    onSuccess: function () {
                        dispatchAuthEvent('forgotPasswordSubmit', user, username + " forgotPasswordSubmit successful");
                        resolve();
                        return;
                    },
                    onFailure: function (err) {
                        dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + " forgotPasswordSubmit failed");
                        reject(err);
                        return;
                    },
                }, clientMetadata);
            });
        };
        /**
         * Get user information
         * @async
         * @return {Object }- current User's information
         */
        AuthClass.prototype.currentUserInfo = function () {
            return __awaiter$c(this, void 0, void 0, function () {
                var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            source = this.Credentials.getCredSource();
                            if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];
                            return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {
                                    return logger$g.debug(err);
                                })];
                        case 1:
                            user = _a.sent();
                            if (!user) {
                                return [2 /*return*/, null];
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 8, , 9]);
                            return [4 /*yield*/, this.userAttributes(user)];
                        case 3:
                            attributes = _a.sent();
                            userAttrs = this.attributesToObject(attributes);
                            credentials = null;
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, this.currentCredentials()];
                        case 5:
                            credentials = _a.sent();
                            return [3 /*break*/, 7];
                        case 6:
                            e_10 = _a.sent();
                            logger$g.debug('Failed to retrieve credentials while getting current user info', e_10);
                            return [3 /*break*/, 7];
                        case 7:
                            info = {
                                id: credentials ? credentials.identityId : undefined,
                                username: user.getUsername(),
                                attributes: userAttrs,
                            };
                            return [2 /*return*/, info];
                        case 8:
                            err_1 = _a.sent();
                            logger$g.debug('currentUserInfo error', err_1);
                            return [2 /*return*/, {}];
                        case 9:
                            if (source === 'federated') {
                                user = this.user;
                                return [2 /*return*/, user ? user : {}];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {
            return __awaiter$c(this, void 0, void 0, function () {
                var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._config.identityPoolId && !this._config.userPoolId) {
                                throw new Error("Federation requires either a User Pool or Identity Pool in config");
                            }
                            // Ensure backwards compatability
                            if (typeof providerOrOptions === 'undefined') {
                                if (this._config.identityPoolId && !this._config.userPoolId) {
                                    throw new Error("Federation with Identity Pools requires tokens passed as arguments");
                                }
                            }
                            if (!(isFederatedSignInOptions(providerOrOptions) ||
                                isFederatedSignInOptionsCustom(providerOrOptions) ||
                                hasCustomState(providerOrOptions) ||
                                typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];
                            options = providerOrOptions || {
                                provider: CognitoHostedUIIdentityProvider.Cognito,
                            };
                            provider = isFederatedSignInOptions(options)
                                ? options.provider
                                : options.customProvider;
                            customState = isFederatedSignInOptions(options)
                                ? options.customState
                                : options.customState;
                            if (this._config.userPoolId) {
                                client_id = isCognitoHostedOpts(this._config.oauth)
                                    ? this._config.userPoolWebClientId
                                    : this._config.oauth.clientID;
                                redirect_uri = isCognitoHostedOpts(this._config.oauth)
                                    ? this._config.oauth.redirectSignIn
                                    : this._config.oauth.redirectUri;
                                this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);
                            }
                            return [3 /*break*/, 4];
                        case 1:
                            provider = providerOrOptions;
                            // To check if the user is already logged in
                            try {
                                loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);
                                if (loggedInUser) {
                                    logger$g.warn("There is already a signed in user: " + loggedInUser + " in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.");
                                }
                            }
                            catch (e) { }
                            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;
                            return [4 /*yield*/, this.Credentials.set({ provider: provider, token: token, identity_id: identity_id, user: user, expires_at: expires_at }, 'federation')];
                        case 2:
                            credentials = _a.sent();
                            return [4 /*yield*/, this.currentAuthenticatedUser()];
                        case 3:
                            currentUser = _a.sent();
                            dispatchAuthEvent('signIn', currentUser, "A user " + currentUser.username + " has been signed in");
                            logger$g.debug('federated sign in credentials', credentials);
                            return [2 /*return*/, credentials];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Used to complete the OAuth flow with or without the Cognito Hosted UI
         * @param {String} URL - optional parameter for customers to pass in the response URL
         */
        AuthClass.prototype._handleAuthResponse = function (URL) {
            return __awaiter$c(this, void 0, void 0, function () {
                var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;
                return __generator$c(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.oAuthFlowInProgress) {
                                logger$g.debug("Skipping URL " + URL + " current flow in progress");
                                return [2 /*return*/];
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, , 8, 9]);
                            this.oAuthFlowInProgress = true;
                            if (!this._config.userPoolId) {
                                throw new Error("OAuth responses require a User Pool defined in config");
                            }
                            dispatchAuthEvent('parsingCallbackUrl', { url: URL }, "The callback url is being parsed");
                            currentUrl = URL || (JS.browserOrNode().isBrowser ? window.location.href : '');
                            hasCodeOrError = !!(url.parse(currentUrl).query || '')
                                .split('&')
                                .map(function (entry) { return entry.split('='); })
                                .find(function (_a) {
                                var _b = __read$4(_a, 1), k = _b[0];
                                return k === 'code' || k === 'error';
                            });
                            hasTokenOrError = !!(url.parse(currentUrl).hash || '#')
                                .substr(1)
                                .split('&')
                                .map(function (entry) { return entry.split('='); })
                                .find(function (_a) {
                                var _b = __read$4(_a, 1), k = _b[0];
                                return k === 'access_token' || k === 'error';
                            });
                            if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];
                            this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 6, , 7]);
                            return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];
                        case 3:
                            _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;
                            session = new CognitoUserSession({
                                IdToken: new CognitoIdToken({ IdToken: idToken }),
                                RefreshToken: new CognitoRefreshToken({
                                    RefreshToken: refreshToken,
                                }),
                                AccessToken: new CognitoAccessToken({
                                    AccessToken: accessToken,
                                }),
                            });
                            credentials = void 0;
                            if (!this._config.identityPoolId) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.Credentials.set(session, 'session')];
                        case 4:
                            credentials = _b.sent();
                            logger$g.debug('AWS credentials', credentials);
                            _b.label = 5;
                        case 5:
                            isCustomStateIncluded = /-/.test(state);
                            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);
                            // This calls cacheTokens() in Cognito SDK
                            currentUser.setSignInUserSession(session);
                            if (window && typeof window.history !== 'undefined') {
                                window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                            }
                            dispatchAuthEvent('signIn', currentUser, "A user " + currentUser.getUsername() + " has been signed in");
                            dispatchAuthEvent('cognitoHostedUI', currentUser, "A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI");
                            if (isCustomStateIncluded) {
                                customState = state
                                    .split('-')
                                    .splice(1)
                                    .join('-');
                                dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), "State for user " + currentUser.getUsername());
                            }
                            //#endregion
                            return [2 /*return*/, credentials];
                        case 6:
                            err_2 = _b.sent();
                            logger$g.debug('Error in cognito hosted auth response', err_2);
                            dispatchAuthEvent('signIn_failure', err_2, "The OAuth response flow failed");
                            dispatchAuthEvent('cognitoHostedUI_failure', err_2, "A failure occurred when returning to the Cognito Hosted UI");
                            dispatchAuthEvent('customState_failure', err_2, "A failure occurred when returning state");
                            return [3 /*break*/, 7];
                        case 7: return [3 /*break*/, 9];
                        case 8:
                            this.oAuthFlowInProgress = false;
                            return [7 /*endfinally*/];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Compact version of credentials
         * @param {Object} credentials
         * @return {Object} - Credentials
         */
        AuthClass.prototype.essentialCredentials = function (credentials) {
            return {
                accessKeyId: credentials.accessKeyId,
                sessionToken: credentials.sessionToken,
                secretAccessKey: credentials.secretAccessKey,
                identityId: credentials.identityId,
                authenticated: credentials.authenticated,
            };
        };
        AuthClass.prototype.attributesToObject = function (attributes) {
            var _this = this;
            var obj = {};
            if (attributes) {
                attributes.map(function (attribute) {
                    if (attribute.Name === 'email_verified' ||
                        attribute.Name === 'phone_number_verified') {
                        obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;
                    }
                    else {
                        obj[attribute.Name] = attribute.Value;
                    }
                });
            }
            return obj;
        };
        AuthClass.prototype.isTruthyString = function (value) {
            return typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';
        };
        AuthClass.prototype.createCognitoUser = function (username) {
            var userData = {
                Username: username,
                Pool: this.userPool,
            };
            userData.Storage = this._storage;
            var authenticationFlowType = this._config.authenticationFlowType;
            var user = new CognitoUser(userData);
            if (authenticationFlowType) {
                user.setAuthenticationFlowType(authenticationFlowType);
            }
            return user;
        };
        AuthClass.prototype._isValidAuthStorage = function (obj) {
            // We need to check if the obj has the functions of Storage
            return (!!obj &&
                typeof obj.getItem === 'function' &&
                typeof obj.setItem === 'function' &&
                typeof obj.removeItem === 'function' &&
                typeof obj.clear === 'function');
        };
        AuthClass.prototype.noUserPoolErrorHandler = function (config) {
            if (config) {
                if (!config.userPoolId || !config.identityPoolId) {
                    return AuthErrorTypes.MissingAuthConfig;
                }
            }
            return AuthErrorTypes.NoConfig;
        };
        AuthClass.prototype.rejectAuthError = function (type) {
            return Promise.reject(new AuthError(type));
        };
        AuthClass.prototype.rejectNoUserPool = function () {
            var type = this.noUserPoolErrorHandler(this._config);
            return Promise.reject(new NoUserPoolError(type));
        };
        return AuthClass;
    }());
    var Auth = new AuthClass(null);
    Amplify.register(Auth);

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    /**
     * Default cache config
     */
    var defaultConfig = {
        keyPrefix: 'aws-amplify-cache',
        capacityInBytes: 1048576,
        itemMaxSize: 210000,
        defaultTTL: 259200000,
        defaultPriority: 5,
        warningThreshold: 0.8,
        // the storage helper will check if localStorage exists,
        // if not, will use a in-memory object instead
        storage: new StorageHelper$1().getStorage(),
    };
    /**
     * return the byte size of the string
     * @param str
     */
    function getByteLength(str) {
        var ret = 0;
        ret = str.length;
        for (var i = str.length; i >= 0; i -= 1) {
            var charCode = str.charCodeAt(i);
            if (charCode > 0x7f && charCode <= 0x7ff) {
                ret += 1;
            }
            else if (charCode > 0x7ff && charCode <= 0xffff) {
                ret += 2;
            }
            // trail surrogate
            if (charCode >= 0xdc00 && charCode <= 0xdfff) {
                i -= 1;
            }
        }
        return ret;
    }
    /**
     * get current time
     */
    function getCurrTime() {
        var currTime = new Date();
        return currTime.getTime();
    }
    /**
     * check if passed value is an integer
     */
    function isInteger(value) {
        if (Number.isInteger) {
            return Number.isInteger(value);
        }
        return _isInteger(value);
    }
    function _isInteger(value) {
        return (typeof value === 'number' && isFinite(value) && Math.floor(value) === value);
    }

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var logger$f = new ConsoleLogger('StorageCache');
    /**
     * Initialization of the cache
     *
     */
    var StorageCache = /** @class */ (function () {
        /**
         * Initialize the cache
         * @param config - the configuration of the cache
         */
        function StorageCache(config) {
            this.config = Object.assign({}, config);
            this.cacheCurSizeKey = this.config.keyPrefix + 'CurSize';
            this.checkConfig();
        }
        StorageCache.prototype.getModuleName = function () {
            return 'Cache';
        };
        StorageCache.prototype.checkConfig = function () {
            // check configuration
            if (!isInteger(this.config.capacityInBytes)) {
                logger$f.error('Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.');
                this.config.capacityInBytes = defaultConfig.capacityInBytes;
            }
            if (!isInteger(this.config.itemMaxSize)) {
                logger$f.error('Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.');
                this.config.itemMaxSize = defaultConfig.itemMaxSize;
            }
            if (!isInteger(this.config.defaultTTL)) {
                logger$f.error('Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.');
                this.config.defaultTTL = defaultConfig.defaultTTL;
            }
            if (!isInteger(this.config.defaultPriority)) {
                logger$f.error('Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.');
                this.config.defaultPriority = defaultConfig.defaultPriority;
            }
            if (this.config.itemMaxSize > this.config.capacityInBytes) {
                logger$f.error('Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.');
                this.config.itemMaxSize = defaultConfig.itemMaxSize;
            }
            if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {
                logger$f.error('Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.');
                this.config.defaultPriority = defaultConfig.defaultPriority;
            }
            if (Number(this.config.warningThreshold) > 1 ||
                Number(this.config.warningThreshold) < 0) {
                logger$f.error('Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.');
                this.config.warningThreshold = defaultConfig.warningThreshold;
            }
            // set 5MB limit
            var cacheLimit = 5 * 1024 * 1024;
            if (this.config.capacityInBytes > cacheLimit) {
                logger$f.error('Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.');
                this.config.capacityInBytes = defaultConfig.capacityInBytes;
            }
        };
        /**
         * produce a JSON object with meta-data and data value
         * @param value - the value of the item
         * @param options - optional, the specified meta-data
         *
         * @return - the item which has the meta-data and the value
         */
        StorageCache.prototype.fillCacheItem = function (key, value, options) {
            var ret = {
                key: key,
                data: value,
                timestamp: getCurrTime(),
                visitedTime: getCurrTime(),
                priority: options.priority,
                expires: options.expires,
                type: typeof value,
                byteSize: 0,
            };
            ret.byteSize = getByteLength(JSON.stringify(ret));
            // for accurate size
            ret.byteSize = getByteLength(JSON.stringify(ret));
            return ret;
        };
        /**
         * set cache with customized configuration
         * @param config - customized configuration
         *
         * @return - the current configuration
         */
        StorageCache.prototype.configure = function (config) {
            if (!config) {
                return this.config;
            }
            if (config.keyPrefix) {
                logger$f.warn("Don't try to configure keyPrefix!");
            }
            this.config = Object.assign({}, this.config, config, config.Cache);
            this.checkConfig();
            return this.config;
        };
        return StorageCache;
    }());

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __extends$4 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var logger$e = new ConsoleLogger('Cache');
    /**
     * Customized storage based on the SessionStorage or LocalStorage with LRU implemented
     */
    var BrowserStorageCacheClass = /** @class */ (function (_super) {
        __extends$4(BrowserStorageCacheClass, _super);
        /**
         * initialize the cache
         * @param config - the configuration of the cache
         */
        function BrowserStorageCacheClass(config) {
            var _this = this;
            var cacheConfig = config
                ? Object.assign({}, defaultConfig, config)
                : defaultConfig;
            _this = _super.call(this, cacheConfig) || this;
            _this.config.storage = cacheConfig.storage;
            _this.getItem = _this.getItem.bind(_this);
            _this.setItem = _this.setItem.bind(_this);
            _this.removeItem = _this.removeItem.bind(_this);
            return _this;
        }
        /**
         * decrease current size of the cache
         *
         * @private
         * @param amount - the amount of the cache size which needs to be decreased
         */
        BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {
            var curSize = this.getCacheCurSize();
            this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());
        };
        /**
         * increase current size of the cache
         *
         * @private
         * @param amount - the amount of the cache szie which need to be increased
         */
        BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function (amount) {
            var curSize = this.getCacheCurSize();
            this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());
        };
        /**
         * update the visited time if item has been visited
         *
         * @private
         * @param item - the item which need to be refreshed
         * @param prefixedKey - the key of the item
         *
         * @return the refreshed item
         */
        BrowserStorageCacheClass.prototype._refreshItem = function (item, prefixedKey) {
            item.visitedTime = getCurrTime();
            this.config.storage.setItem(prefixedKey, JSON.stringify(item));
            return item;
        };
        /**
         * check wether item is expired
         *
         * @private
         * @param key - the key of the item
         *
         * @return true if the item is expired.
         */
        BrowserStorageCacheClass.prototype._isExpired = function (key) {
            var text = this.config.storage.getItem(key);
            var item = JSON.parse(text);
            if (getCurrTime() >= item.expires) {
                return true;
            }
            return false;
        };
        /**
         * delete item from cache
         *
         * @private
         * @param prefixedKey - the key of the item
         * @param size - optional, the byte size of the item
         */
        BrowserStorageCacheClass.prototype._removeItem = function (prefixedKey, size) {
            var itemSize = size
                ? size
                : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;
            this._decreaseCurSizeInBytes(itemSize);
            // remove the cache item
            this.config.storage.removeItem(prefixedKey);
        };
        /**
         * put item into cache
         *
         * @private
         * @param prefixedKey - the key of the item
         * @param itemData - the value of the item
         * @param itemSizeInBytes - the byte size of the item
         */
        BrowserStorageCacheClass.prototype._setItem = function (prefixedKey, item) {
            // update the cache size
            this._increaseCurSizeInBytes(item.byteSize);
            try {
                this.config.storage.setItem(prefixedKey, JSON.stringify(item));
            }
            catch (setItemErr) {
                // if failed, we need to rollback the cache size
                this._decreaseCurSizeInBytes(item.byteSize);
                logger$e.error("Failed to set item " + setItemErr);
            }
        };
        /**
         * total space needed when poping out items
         *
         * @private
         * @param itemSize
         *
         * @return total space needed
         */
        BrowserStorageCacheClass.prototype._sizeToPop = function (itemSize) {
            var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;
            var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;
            return spaceItemNeed > cacheThresholdSpace
                ? spaceItemNeed
                : cacheThresholdSpace;
        };
        /**
         * see whether cache is full
         *
         * @private
         * @param itemSize
         *
         * @return true if cache is full
         */
        BrowserStorageCacheClass.prototype._isCacheFull = function (itemSize) {
            return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;
        };
        /**
         * scan the storage and find out all the keys owned by this cache
         * also clean the expired keys while scanning
         *
         * @private
         *
         * @return array of keys
         */
        BrowserStorageCacheClass.prototype._findValidKeys = function () {
            var keys = [];
            var keyInCache = [];
            // get all keys in Storage
            for (var i = 0; i < this.config.storage.length; i += 1) {
                keyInCache.push(this.config.storage.key(i));
            }
            // find those items which belong to our cache and also clean those expired items
            for (var i = 0; i < keyInCache.length; i += 1) {
                var key = keyInCache[i];
                if (key.indexOf(this.config.keyPrefix) === 0 &&
                    key !== this.cacheCurSizeKey) {
                    if (this._isExpired(key)) {
                        this._removeItem(key);
                    }
                    else {
                        keys.push(key);
                    }
                }
            }
            return keys;
        };
        /**
         * get all the items we have, sort them by their priority,
         * if priority is same, sort them by their last visited time
         * pop out items from the low priority (5 is the lowest)
         *
         * @private
         * @param keys - all the keys in this cache
         * @param sizeToPop - the total size of the items which needed to be poped out
         */
        BrowserStorageCacheClass.prototype._popOutItems = function (keys, sizeToPop) {
            var items = [];
            var remainedSize = sizeToPop;
            // get the items from Storage
            for (var i = 0; i < keys.length; i += 1) {
                var val = this.config.storage.getItem(keys[i]);
                if (val != null) {
                    var item = JSON.parse(val);
                    items.push(item);
                }
            }
            // first compare priority
            // then compare visited time
            items.sort(function (a, b) {
                if (a.priority > b.priority) {
                    return -1;
                }
                else if (a.priority < b.priority) {
                    return 1;
                }
                else {
                    if (a.visitedTime < b.visitedTime) {
                        return -1;
                    }
                    else
                        return 1;
                }
            });
            for (var i = 0; i < items.length; i += 1) {
                // pop out items until we have enough room for new item
                this._removeItem(items[i].key, items[i].byteSize);
                remainedSize -= items[i].byteSize;
                if (remainedSize <= 0) {
                    return;
                }
            }
        };
        /**
         * Set item into cache. You can put number, string, boolean or object.
         * The cache will first check whether has the same key.
         * If it has, it will delete the old item and then put the new item in
         * The cache will pop out items if it is full
         * You can specify the cache item options. The cache will abort and output a warning:
         * If the key is invalid
         * If the size of the item exceeds itemMaxSize.
         * If the value is undefined
         * If incorrect cache item configuration
         * If error happened with browser storage
         *
         * @param key - the key of the item
         * @param value - the value of the item
         * @param {Object} [options] - optional, the specified meta-data
         */
        BrowserStorageCacheClass.prototype.setItem = function (key, value, options) {
            logger$e.log("Set item: key is " + key + ", value is " + value + " with options: " + options);
            var prefixedKey = this.config.keyPrefix + key;
            // invalid keys
            if (prefixedKey === this.config.keyPrefix ||
                prefixedKey === this.cacheCurSizeKey) {
                logger$e.warn("Invalid key: should not be empty or 'CurSize'");
                return;
            }
            if (typeof value === 'undefined') {
                logger$e.warn("The value of item should not be undefined!");
                return;
            }
            var cacheItemOptions = {
                priority: options && options.priority !== undefined
                    ? options.priority
                    : this.config.defaultPriority,
                expires: options && options.expires !== undefined
                    ? options.expires
                    : this.config.defaultTTL + getCurrTime(),
            };
            if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
                logger$e.warn("Invalid parameter: priority due to out or range. It should be within 1 and 5.");
                return;
            }
            var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
            // check wether this item is too big;
            if (item.byteSize > this.config.itemMaxSize) {
                logger$e.warn("Item with key: " + key + " you are trying to put into is too big!");
                return;
            }
            try {
                // first look into the storage, if it exists, delete it.
                var val = this.config.storage.getItem(prefixedKey);
                if (val) {
                    this._removeItem(prefixedKey, JSON.parse(val).byteSize);
                }
                // check whether the cache is full
                if (this._isCacheFull(item.byteSize)) {
                    var validKeys = this._findValidKeys();
                    // check again and then pop out items
                    if (this._isCacheFull(item.byteSize)) {
                        var sizeToPop = this._sizeToPop(item.byteSize);
                        this._popOutItems(validKeys, sizeToPop);
                    }
                }
                // put item in the cache
                // may failed due to storage full
                this._setItem(prefixedKey, item);
            }
            catch (e) {
                logger$e.warn("setItem failed! " + e);
            }
        };
        /**
         * Get item from cache. It will return null if item doesn’t exist or it has been expired.
         * If you specified callback function in the options,
         * then the function will be executed if no such item in the cache
         * and finally put the return value into cache.
         * Please make sure the callback function will return the value you want to put into the cache.
         * The cache will abort output a warning:
         * If the key is invalid
         * If error happened with browser storage
         *
         * @param key - the key of the item
         * @param {Object} [options] - the options of callback function
         *
         * @return - return the value of the item
         */
        BrowserStorageCacheClass.prototype.getItem = function (key, options) {
            logger$e.log("Get item: key is " + key + " with options " + options);
            var ret = null;
            var prefixedKey = this.config.keyPrefix + key;
            if (prefixedKey === this.config.keyPrefix ||
                prefixedKey === this.cacheCurSizeKey) {
                logger$e.warn("Invalid key: should not be empty or 'CurSize'");
                return null;
            }
            try {
                ret = this.config.storage.getItem(prefixedKey);
                if (ret != null) {
                    if (this._isExpired(prefixedKey)) {
                        // if expired, remove that item and return null
                        this._removeItem(prefixedKey, JSON.parse(ret).byteSize);
                        ret = null;
                    }
                    else {
                        // if not expired, great, return the value and refresh it
                        var item = JSON.parse(ret);
                        item = this._refreshItem(item, prefixedKey);
                        return item.data;
                    }
                }
                if (options && options.callback !== undefined) {
                    var val = options.callback();
                    if (val !== null) {
                        this.setItem(key, val, options);
                    }
                    return val;
                }
                return null;
            }
            catch (e) {
                logger$e.warn("getItem failed! " + e);
                return null;
            }
        };
        /**
         * remove item from the cache
         * The cache will abort output a warning:
         * If error happened with browser storage
         * @param key - the key of the item
         */
        BrowserStorageCacheClass.prototype.removeItem = function (key) {
            logger$e.log("Remove item: key is " + key);
            var prefixedKey = this.config.keyPrefix + key;
            if (prefixedKey === this.config.keyPrefix ||
                prefixedKey === this.cacheCurSizeKey) {
                return;
            }
            try {
                var val = this.config.storage.getItem(prefixedKey);
                if (val) {
                    this._removeItem(prefixedKey, JSON.parse(val).byteSize);
                }
            }
            catch (e) {
                logger$e.warn("removeItem failed! " + e);
            }
        };
        /**
         * clear the entire cache
         * The cache will abort output a warning:
         * If error happened with browser storage
         */
        BrowserStorageCacheClass.prototype.clear = function () {
            logger$e.log("Clear Cache");
            var keysToRemove = [];
            for (var i = 0; i < this.config.storage.length; i += 1) {
                var key = this.config.storage.key(i);
                if (key.indexOf(this.config.keyPrefix) === 0) {
                    keysToRemove.push(key);
                }
            }
            try {
                for (var i = 0; i < keysToRemove.length; i += 1) {
                    this.config.storage.removeItem(keysToRemove[i]);
                }
            }
            catch (e) {
                logger$e.warn("clear failed! " + e);
            }
        };
        /**
         * Return all the keys in the cache.
         *
         * @return - all keys in the cache
         */
        BrowserStorageCacheClass.prototype.getAllKeys = function () {
            var keys = [];
            for (var i = 0; i < this.config.storage.length; i += 1) {
                var key = this.config.storage.key(i);
                if (key.indexOf(this.config.keyPrefix) === 0 &&
                    key !== this.cacheCurSizeKey) {
                    keys.push(key.substring(this.config.keyPrefix.length));
                }
            }
            return keys;
        };
        /**
         * return the current size of the cache
         *
         * @return - current size of the cache
         */
        BrowserStorageCacheClass.prototype.getCacheCurSize = function () {
            var ret = this.config.storage.getItem(this.cacheCurSizeKey);
            if (!ret) {
                this.config.storage.setItem(this.cacheCurSizeKey, '0');
                ret = '0';
            }
            return Number(ret);
        };
        /**
         * Return a new instance of cache with customized configuration.
         * @param config - the customized configuration
         *
         * @return - new instance of Cache
         */
        BrowserStorageCacheClass.prototype.createInstance = function (config) {
            if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {
                logger$e.error('invalid keyPrefix, setting keyPrefix with timeStamp');
                config.keyPrefix = getCurrTime.toString();
            }
            return new BrowserStorageCacheClass(config);
        };
        return BrowserStorageCacheClass;
    }(StorageCache));
    var BrowserStorageCache = new BrowserStorageCacheClass();

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    Amplify.register(BrowserStorageCache);

    var build = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Crc32 = exports.crc32 = void 0;

    function crc32(data) {
        return new Crc32().update(data).digest();
    }
    exports.crc32 = crc32;
    var Crc32 = /** @class */ (function () {
        function Crc32() {
            this.checksum = 0xffffffff;
        }
        Crc32.prototype.update = function (data) {
            var e_1, _a;
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var byte = data_1_1.value;
                    this.checksum =
                        (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return this;
        };
        Crc32.prototype.digest = function () {
            return (this.checksum ^ 0xffffffff) >>> 0;
        };
        return Crc32;
    }());
    exports.Crc32 = Crc32;
    // prettier-ignore
    var lookupTable = Uint32Array.from([
        0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
        0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
        0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
        0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
        0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
        0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
        0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
        0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
        0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
        0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
        0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
        0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
        0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
        0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
        0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
        0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
        0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
        0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
        0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
        0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
        0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
        0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
        0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
        0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
        0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
        0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
        0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
        0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
        0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
        0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
        0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
        0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
        0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
        0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
        0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
        0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
        0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
        0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
        0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
        0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
        0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
        0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
        0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
        0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
        0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
        0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
        0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
        0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
        0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
        0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
        0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
        0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
        0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
        0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
        0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
        0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
        0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
        0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
        0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
        0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
        0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
        0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
        0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
        0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
    ]);
    //# sourceMappingURL=index.js.map
    });

    /**
     * A lossless representation of a signed, 64-bit integer. Instances of this
     * class may be used in arithmetic expressions as if they were numeric
     * primitives, but the binary representation will be preserved unchanged as the
     * `bytes` property of the object. The bytes should be encoded as big-endian,
     * two's complement integers.
     */
    var Int64 = /** @class */ (function () {
        function Int64(bytes) {
            this.bytes = bytes;
            if (bytes.byteLength !== 8) {
                throw new Error("Int64 buffers must be exactly 8 bytes");
            }
        }
        Int64.fromNumber = function (number) {
            if (number > 9223372036854775807 || number < -9223372036854775808) {
                throw new Error(number + " is too large (or, if negative, too small) to represent as an Int64");
            }
            var bytes = new Uint8Array(8);
            for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
                bytes[i] = remaining;
            }
            if (number < 0) {
                negate(bytes);
            }
            return new Int64(bytes);
        };
        /**
         * Called implicitly by infix arithmetic operators.
         */
        Int64.prototype.valueOf = function () {
            var bytes = this.bytes.slice(0);
            var negative = bytes[0] & 128;
            if (negative) {
                negate(bytes);
            }
            return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
        };
        Int64.prototype.toString = function () {
            return String(this.valueOf());
        };
        return Int64;
    }());
    function negate(bytes) {
        for (var i = 0; i < 8; i++) {
            bytes[i] ^= 0xff;
        }
        for (var i = 7; i > -1; i--) {
            bytes[i]++;
            if (bytes[i] !== 0)
                break;
        }
    }

    /**
     * @internal
     */
    var HeaderMarshaller = /** @class */ (function () {
        function HeaderMarshaller(toUtf8, fromUtf8) {
            this.toUtf8 = toUtf8;
            this.fromUtf8 = fromUtf8;
        }
        HeaderMarshaller.prototype.format = function (headers) {
            var e_1, _a, e_2, _b;
            var chunks = [];
            try {
                for (var _c = __values$1(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var headerName = _d.value;
                    var bytes = this.fromUtf8(headerName);
                    chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var out = new Uint8Array(chunks.reduce(function (carry, bytes) { return carry + bytes.byteLength; }, 0));
            var position = 0;
            try {
                for (var chunks_1 = __values$1(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {
                    var chunk = chunks_1_1.value;
                    out.set(chunk, position);
                    position += chunk.byteLength;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return out;
        };
        HeaderMarshaller.prototype.formatHeaderValue = function (header) {
            switch (header.type) {
                case "boolean":
                    return Uint8Array.from([header.value ? 0 /* boolTrue */ : 1 /* boolFalse */]);
                case "byte":
                    return Uint8Array.from([2 /* byte */, header.value]);
                case "short":
                    var shortView = new DataView(new ArrayBuffer(3));
                    shortView.setUint8(0, 3 /* short */);
                    shortView.setInt16(1, header.value, false);
                    return new Uint8Array(shortView.buffer);
                case "integer":
                    var intView = new DataView(new ArrayBuffer(5));
                    intView.setUint8(0, 4 /* integer */);
                    intView.setInt32(1, header.value, false);
                    return new Uint8Array(intView.buffer);
                case "long":
                    var longBytes = new Uint8Array(9);
                    longBytes[0] = 5 /* long */;
                    longBytes.set(header.value.bytes, 1);
                    return longBytes;
                case "binary":
                    var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                    binView.setUint8(0, 6 /* byteArray */);
                    binView.setUint16(1, header.value.byteLength, false);
                    var binBytes = new Uint8Array(binView.buffer);
                    binBytes.set(header.value, 3);
                    return binBytes;
                case "string":
                    var utf8Bytes = this.fromUtf8(header.value);
                    var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                    strView.setUint8(0, 7 /* string */);
                    strView.setUint16(1, utf8Bytes.byteLength, false);
                    var strBytes = new Uint8Array(strView.buffer);
                    strBytes.set(utf8Bytes, 3);
                    return strBytes;
                case "timestamp":
                    var tsBytes = new Uint8Array(9);
                    tsBytes[0] = 8 /* timestamp */;
                    tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
                    return tsBytes;
                case "uuid":
                    if (!UUID_PATTERN.test(header.value)) {
                        throw new Error("Invalid UUID received: " + header.value);
                    }
                    var uuidBytes = new Uint8Array(17);
                    uuidBytes[0] = 9 /* uuid */;
                    uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
                    return uuidBytes;
            }
        };
        HeaderMarshaller.prototype.parse = function (headers) {
            var out = {};
            var position = 0;
            while (position < headers.byteLength) {
                var nameLength = headers.getUint8(position++);
                var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
                position += nameLength;
                switch (headers.getUint8(position++)) {
                    case 0 /* boolTrue */:
                        out[name] = {
                            type: BOOLEAN_TAG,
                            value: true,
                        };
                        break;
                    case 1 /* boolFalse */:
                        out[name] = {
                            type: BOOLEAN_TAG,
                            value: false,
                        };
                        break;
                    case 2 /* byte */:
                        out[name] = {
                            type: BYTE_TAG,
                            value: headers.getInt8(position++),
                        };
                        break;
                    case 3 /* short */:
                        out[name] = {
                            type: SHORT_TAG,
                            value: headers.getInt16(position, false),
                        };
                        position += 2;
                        break;
                    case 4 /* integer */:
                        out[name] = {
                            type: INT_TAG,
                            value: headers.getInt32(position, false),
                        };
                        position += 4;
                        break;
                    case 5 /* long */:
                        out[name] = {
                            type: LONG_TAG,
                            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),
                        };
                        position += 8;
                        break;
                    case 6 /* byteArray */:
                        var binaryLength = headers.getUint16(position, false);
                        position += 2;
                        out[name] = {
                            type: BINARY_TAG,
                            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),
                        };
                        position += binaryLength;
                        break;
                    case 7 /* string */:
                        var stringLength = headers.getUint16(position, false);
                        position += 2;
                        out[name] = {
                            type: STRING_TAG,
                            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),
                        };
                        position += stringLength;
                        break;
                    case 8 /* timestamp */:
                        out[name] = {
                            type: TIMESTAMP_TAG,
                            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),
                        };
                        position += 8;
                        break;
                    case 9 /* uuid */:
                        var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                        position += 16;
                        out[name] = {
                            type: UUID_TAG,
                            value: toHex(uuidBytes.subarray(0, 4)) + "-" + toHex(uuidBytes.subarray(4, 6)) + "-" + toHex(uuidBytes.subarray(6, 8)) + "-" + toHex(uuidBytes.subarray(8, 10)) + "-" + toHex(uuidBytes.subarray(10)),
                        };
                        break;
                    default:
                        throw new Error("Unrecognized header type tag");
                }
            }
            return out;
        };
        return HeaderMarshaller;
    }());
    var HEADER_VALUE_TYPE;
    (function (HEADER_VALUE_TYPE) {
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
        HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;

    // All prelude components are unsigned, 32-bit integers
    var PRELUDE_MEMBER_LENGTH = 4;
    // The prelude consists of two components
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    // Checksums are always CRC32 hashes.
    var CHECKSUM_LENGTH = 4;
    // Messages must include a full prelude, a prelude checksum, and a message checksum
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    /**
     * @internal
     */
    function splitMessage(_a) {
        var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;
        if (byteLength < MINIMUM_MESSAGE_LENGTH) {
            throw new Error("Provided message too short to accommodate event stream message overhead");
        }
        var view = new DataView(buffer, byteOffset, byteLength);
        var messageLength = view.getUint32(0, false);
        if (byteLength !== messageLength) {
            throw new Error("Reported message length does not match received message length");
        }
        var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
        var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
        var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
        var checksummer = new build.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
        if (expectedPreludeChecksum !== checksummer.digest()) {
            throw new Error("The prelude checksum specified in the message (" + expectedPreludeChecksum + ") does not match the calculated CRC32 checksum (" + checksummer.digest() + ")");
        }
        checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
        if (expectedMessageChecksum !== checksummer.digest()) {
            throw new Error("The message checksum (" + checksummer.digest() + ") did not match the expected value of " + expectedMessageChecksum);
        }
        return {
            headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
            body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),
        };
    }

    /**
     * A marshaller that can convert binary-packed event stream messages into
     * JavaScript objects and back again into their binary format.
     */
    var EventStreamMarshaller$2 = /** @class */ (function () {
        function EventStreamMarshaller(toUtf8, fromUtf8) {
            this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
        }
        /**
         * Convert a structured JavaScript object with tagged headers into a binary
         * event stream message.
         */
        EventStreamMarshaller.prototype.marshall = function (_a) {
            var rawHeaders = _a.headers, body = _a.body;
            var headers = this.headerMarshaller.format(rawHeaders);
            var length = headers.byteLength + body.byteLength + 16;
            var out = new Uint8Array(length);
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            var checksum = new build.Crc32();
            // Format message
            view.setUint32(0, length, false);
            view.setUint32(4, headers.byteLength, false);
            view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
            out.set(headers, 12);
            out.set(body, headers.byteLength + 12);
            // Write trailing message checksum
            view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
            return out;
        };
        /**
         * Convert a binary event stream message into a JavaScript object with an
         * opaque, binary body and tagged, parsed headers.
         */
        EventStreamMarshaller.prototype.unmarshall = function (message) {
            var _a = splitMessage(message), headers = _a.headers, body = _a.body;
            return { headers: this.headerMarshaller.parse(headers), body: body };
        };
        /**
         * Convert a structured JavaScript object with tagged headers into a binary
         * event stream message header.
         */
        EventStreamMarshaller.prototype.formatHeaders = function (rawHeaders) {
            return this.headerMarshaller.format(rawHeaders);
        };
        return EventStreamMarshaller;
    }());

    function getChunkedStream(source) {
        var _a;
        var currentMessageTotalLength = 0;
        var currentMessagePendingLength = 0;
        var currentMessage = null;
        var messageLengthBuffer = null;
        var allocateMessage = function (size) {
            if (typeof size !== "number") {
                throw new Error("Attempted to allocate an event message where size was not a number: " + size);
            }
            currentMessageTotalLength = size;
            currentMessagePendingLength = 4;
            currentMessage = new Uint8Array(size);
            var currentMessageView = new DataView(currentMessage.buffer);
            currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes
        };
        var iterator = function () {
            return __asyncGenerator(this, arguments, function () {
                var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;
                return __generator$j(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            sourceIterator = source[Symbol.asyncIterator]();
                            _b.label = 1;
                        case 1:
                            return [4 /*yield*/, __await(sourceIterator.next())];
                        case 2:
                            _a = _b.sent(), value = _a.value, done = _a.done;
                            if (!done) return [3 /*break*/, 10];
                            if (!!currentMessageTotalLength) return [3 /*break*/, 4];
                            return [4 /*yield*/, __await(void 0)];
                        case 3: return [2 /*return*/, _b.sent()];
                        case 4:
                            if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3 /*break*/, 7];
                            return [4 /*yield*/, __await(currentMessage)];
                        case 5: return [4 /*yield*/, _b.sent()];
                        case 6:
                            _b.sent();
                            return [3 /*break*/, 8];
                        case 7: throw new Error("Truncated event message received.");
                        case 8: return [4 /*yield*/, __await(void 0)];
                        case 9: return [2 /*return*/, _b.sent()];
                        case 10:
                            chunkLength = value.length;
                            currentOffset = 0;
                            _b.label = 11;
                        case 11:
                            if (!(currentOffset < chunkLength)) return [3 /*break*/, 15];
                            // create new message if necessary
                            if (!currentMessage) {
                                bytesRemaining = chunkLength - currentOffset;
                                // prevent edge case where total length spans 2 chunks
                                if (!messageLengthBuffer) {
                                    messageLengthBuffer = new Uint8Array(4);
                                }
                                numBytesForTotal = Math.min(4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer
                                bytesRemaining // bytes left in chunk
                                );
                                messageLengthBuffer.set(
                                // @ts-ignore error TS2532: Object is possibly 'undefined' for value
                                value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
                                currentMessagePendingLength += numBytesForTotal;
                                currentOffset += numBytesForTotal;
                                if (currentMessagePendingLength < 4) {
                                    // not enough information to create the current message
                                    return [3 /*break*/, 15];
                                }
                                allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
                                messageLengthBuffer = null;
                            }
                            numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message
                            chunkLength - currentOffset // number of bytes left in the original chunk
                            );
                            currentMessage.set(
                            // @ts-ignore error TS2532: Object is possibly 'undefined' for value
                            value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
                            currentMessagePendingLength += numBytesToWrite;
                            currentOffset += numBytesToWrite;
                            if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3 /*break*/, 14];
                            return [4 /*yield*/, __await(currentMessage)];
                        case 12: 
                        // push out the message
                        return [4 /*yield*/, _b.sent()];
                        case 13:
                            // push out the message
                            _b.sent();
                            // cleanup
                            currentMessage = null;
                            currentMessageTotalLength = 0;
                            currentMessagePendingLength = 0;
                            _b.label = 14;
                        case 14: return [3 /*break*/, 11];
                        case 15: return [3 /*break*/, 1];
                        case 16: return [2 /*return*/];
                    }
                });
            });
        };
        return _a = {},
            _a[Symbol.asyncIterator] = iterator,
            _a;
    }

    function getUnmarshalledStream(source, options) {
        var _a;
        return _a = {},
            _a[Symbol.asyncIterator] = function () {
                return __asyncGenerator(this, arguments, function () {
                    var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;
                    var _a, _b;
                    var e_1, _c;
                    return __generator$j(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                _d.trys.push([0, 12, 13, 18]);
                                source_1 = __asyncValues(source);
                                _d.label = 1;
                            case 1: return [4 /*yield*/, __await(source_1.next())];
                            case 2:
                                if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3 /*break*/, 11];
                                chunk = source_1_1.value;
                                message = options.eventMarshaller.unmarshall(chunk);
                                messageType = message.headers[":message-type"].value;
                                if (!(messageType === "error")) return [3 /*break*/, 3];
                                unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
                                unmodeledError.name = message.headers[":error-code"].value;
                                throw unmodeledError;
                            case 3:
                                if (!(messageType === "exception")) return [3 /*break*/, 5];
                                code = message.headers[":exception-type"].value;
                                exception = (_a = {}, _a[code] = message, _a);
                                return [4 /*yield*/, __await(options.deserializer(exception))];
                            case 4:
                                deserializedException = _d.sent();
                                if (deserializedException.$unknown) {
                                    error = new Error(options.toUtf8(message.body));
                                    error.name = code;
                                    throw error;
                                }
                                throw deserializedException[code];
                            case 5:
                                if (!(messageType === "event")) return [3 /*break*/, 9];
                                event = (_b = {},
                                    _b[message.headers[":event-type"].value] = message,
                                    _b);
                                return [4 /*yield*/, __await(options.deserializer(event))];
                            case 6:
                                deserialized = _d.sent();
                                if (deserialized.$unknown)
                                    return [3 /*break*/, 10];
                                return [4 /*yield*/, __await(deserialized)];
                            case 7: return [4 /*yield*/, _d.sent()];
                            case 8:
                                _d.sent();
                                return [3 /*break*/, 10];
                            case 9: throw Error("Unrecognizable event type: " + message.headers[":event-type"].value);
                            case 10: return [3 /*break*/, 1];
                            case 11: return [3 /*break*/, 18];
                            case 12:
                                e_1_1 = _d.sent();
                                e_1 = { error: e_1_1 };
                                return [3 /*break*/, 18];
                            case 13:
                                _d.trys.push([13, , 16, 17]);
                                if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3 /*break*/, 15];
                                return [4 /*yield*/, __await(_c.call(source_1))];
                            case 14:
                                _d.sent();
                                _d.label = 15;
                            case 15: return [3 /*break*/, 17];
                            case 16:
                                if (e_1) throw e_1.error;
                                return [7 /*endfinally*/];
                            case 17: return [7 /*endfinally*/];
                            case 18: return [2 /*return*/];
                        }
                    });
                });
            },
            _a;
    }

    var EventStreamMarshaller$1 = /** @class */ (function () {
        function EventStreamMarshaller(_a) {
            var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
            this.eventMarshaller = new EventStreamMarshaller$2(utf8Encoder, utf8Decoder);
            this.utfEncoder = utf8Encoder;
        }
        EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {
            var chunkedStream = getChunkedStream(body);
            var unmarshalledStream = getUnmarshalledStream(chunkedStream, {
                eventMarshaller: this.eventMarshaller,
                deserializer: deserializer,
                toUtf8: this.utfEncoder,
            });
            return unmarshalledStream;
        };
        EventStreamMarshaller.prototype.serialize = function (input, serializer) {
            var _a;
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var self = this;
            var serializedIterator = function () {
                return __asyncGenerator(this, arguments, function () {
                    var input_1, input_1_1, chunk, payloadBuf, e_1_1;
                    var e_1, _a;
                    return __generator$j(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 7, 8, 13]);
                                input_1 = __asyncValues(input);
                                _b.label = 1;
                            case 1: return [4 /*yield*/, __await(input_1.next())];
                            case 2:
                                if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3 /*break*/, 6];
                                chunk = input_1_1.value;
                                payloadBuf = self.eventMarshaller.marshall(serializer(chunk));
                                return [4 /*yield*/, __await(payloadBuf)];
                            case 3: return [4 /*yield*/, _b.sent()];
                            case 4:
                                _b.sent();
                                _b.label = 5;
                            case 5: return [3 /*break*/, 1];
                            case 6: return [3 /*break*/, 13];
                            case 7:
                                e_1_1 = _b.sent();
                                e_1 = { error: e_1_1 };
                                return [3 /*break*/, 13];
                            case 8:
                                _b.trys.push([8, , 11, 12]);
                                if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3 /*break*/, 10];
                                return [4 /*yield*/, __await(_a.call(input_1))];
                            case 9:
                                _b.sent();
                                _b.label = 10;
                            case 10: return [3 /*break*/, 12];
                            case 11:
                                if (e_1) throw e_1.error;
                                return [7 /*endfinally*/];
                            case 12: return [7 /*endfinally*/];
                            case 13: return [4 /*yield*/, __await(new Uint8Array(0))];
                            case 14: 
                            // Ending frame
                            return [4 /*yield*/, _b.sent()];
                            case 15:
                                // Ending frame
                                _b.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            };
            return _a = {},
                _a[Symbol.asyncIterator] = serializedIterator,
                _a;
        };
        return EventStreamMarshaller;
    }());

    /**
     * A util function converting ReadableStream into an async iterable.
     * Reference: https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate
     */
    var readableStreamtoIterable = function (readableStream) {
        var _a;
        return (_a = {},
            _a[Symbol.asyncIterator] = function () {
                return __asyncGenerator(this, arguments, function () {
                    var reader, _a, done, value;
                    return __generator$j(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                reader = readableStream.getReader();
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, , 9, 10]);
                                _b.label = 2;
                            case 2:
                                return [4 /*yield*/, __await(reader.read())];
                            case 3:
                                _a = _b.sent(), done = _a.done, value = _a.value;
                                if (!done) return [3 /*break*/, 5];
                                return [4 /*yield*/, __await(void 0)];
                            case 4: return [2 /*return*/, _b.sent()];
                            case 5: return [4 /*yield*/, __await(value)];
                            case 6: return [4 /*yield*/, _b.sent()];
                            case 7:
                                _b.sent();
                                return [3 /*break*/, 2];
                            case 8: return [3 /*break*/, 10];
                            case 9:
                                reader.releaseLock();
                                return [7 /*endfinally*/];
                            case 10: return [2 /*return*/];
                        }
                    });
                });
            },
            _a);
    };
    /**
     * A util function converting async iterable to a ReadableStream.
     */
    var iterableToReadableStream = function (asyncIterable) {
        var iterator = asyncIterable[Symbol.asyncIterator]();
        return new ReadableStream({
            pull: function (controller) {
                return __awaiter$j(this, void 0, void 0, function () {
                    var _a, done, value;
                    return __generator$j(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, iterator.next()];
                            case 1:
                                _a = _b.sent(), done = _a.done, value = _a.value;
                                if (done) {
                                    return [2 /*return*/, controller.close()];
                                }
                                controller.enqueue(value);
                                return [2 /*return*/];
                        }
                    });
                });
            },
        });
    };

    /**
     * Utility class used to serialize and deserialize event streams in
     * browsers and ReactNative.
     *
     * In browsers where ReadableStream API is available:
     * * deserialize from ReadableStream to an async iterable of output structure
     * * serialize from async iterable of input structure to ReadableStream
     * In ReactNative where only async iterable API is available:
     * * deserialize from async iterable of binaries to async iterable of output structure
     * * serialize from async iterable of input structure to async iterable of binaries
     *
     * We use ReadableStream API in browsers because of the consistency with other
     * streaming operations, where ReadableStream API is used to denote streaming data.
     * Whereas in ReactNative, ReadableStream API is not available, we use async iterable
     * for streaming data although it has lower throughput.
     */
    var EventStreamMarshaller = /** @class */ (function () {
        function EventStreamMarshaller(_a) {
            var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
            this.eventMarshaller = new EventStreamMarshaller$2(utf8Encoder, utf8Decoder);
            this.universalMarshaller = new EventStreamMarshaller$1({
                utf8Decoder: utf8Decoder,
                utf8Encoder: utf8Encoder,
            });
        }
        EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {
            var bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;
            return this.universalMarshaller.deserialize(bodyIterable, deserializer);
        };
        /**
         * Generate a stream that serialize events into stream of binary chunks;
         *
         * Caveat is that streaming request payload doesn't work on browser with native
         * xhr or fetch handler currently because they don't support upload streaming.
         * reference:
         * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906
         * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483
         *
         */
        EventStreamMarshaller.prototype.serialize = function (input, serializer) {
            var serialziedIterable = this.universalMarshaller.serialize(input, serializer);
            return typeof ReadableStream === "function" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;
        };
        return EventStreamMarshaller;
    }());
    var isReadableStream = function (body) {
        return typeof ReadableStream === "function" && body instanceof ReadableStream;
    };

    /** browser event stream serde utils provider */
    var eventStreamSerdeProvider = function (options) { return new EventStreamMarshaller(options); };

    var resolveEventStreamSerdeConfig = function (input) { return (__assign$i(__assign$i({}, input), { eventStreamMarshaller: input.eventStreamSerdeProvider(input) })); };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends$3(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$b = function() {
        __assign$b = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$b.apply(this, arguments);
    };

    function __awaiter$b(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$b(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var name = "@aws-sdk/client-s3";
    var description = "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native";
    var version = "3.6.1";
    var scripts = {
    	clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    	"build-documentation": "yarn remove-documentation && typedoc ./",
    	prepublishOnly: "yarn build",
    	pretest: "yarn build:cjs",
    	"remove-definitions": "rimraf ./types",
    	"remove-dist": "rimraf ./dist",
    	"remove-documentation": "rimraf ./docs",
    	"test:unit": "mocha **/cjs/**/*.spec.js",
    	"test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
    	test: "yarn test:unit",
    	"build:cjs": "tsc -p tsconfig.json",
    	"build:es": "tsc -p tsconfig.es.json",
    	build: "yarn build:cjs && yarn build:es",
    	postbuild: "downlevel-dts types types/ts3.4"
    };
    var main = "./dist/cjs/index.js";
    var types = "./types/index.d.ts";
    var module = "./dist/es/index.js";
    var browser = {
    	"./runtimeConfig": "./runtimeConfig.browser"
    };
    var sideEffects = false;
    var dependencies = {
    	"@aws-crypto/sha256-browser": "^1.0.0",
    	"@aws-crypto/sha256-js": "^1.0.0",
    	"@aws-sdk/config-resolver": "3.6.1",
    	"@aws-sdk/credential-provider-node": "3.6.1",
    	"@aws-sdk/eventstream-serde-browser": "3.6.1",
    	"@aws-sdk/eventstream-serde-config-resolver": "3.6.1",
    	"@aws-sdk/eventstream-serde-node": "3.6.1",
    	"@aws-sdk/fetch-http-handler": "3.6.1",
    	"@aws-sdk/hash-blob-browser": "3.6.1",
    	"@aws-sdk/hash-node": "3.6.1",
    	"@aws-sdk/hash-stream-node": "3.6.1",
    	"@aws-sdk/invalid-dependency": "3.6.1",
    	"@aws-sdk/md5-js": "3.6.1",
    	"@aws-sdk/middleware-apply-body-checksum": "3.6.1",
    	"@aws-sdk/middleware-bucket-endpoint": "3.6.1",
    	"@aws-sdk/middleware-content-length": "3.6.1",
    	"@aws-sdk/middleware-expect-continue": "3.6.1",
    	"@aws-sdk/middleware-host-header": "3.6.1",
    	"@aws-sdk/middleware-location-constraint": "3.6.1",
    	"@aws-sdk/middleware-logger": "3.6.1",
    	"@aws-sdk/middleware-retry": "3.6.1",
    	"@aws-sdk/middleware-sdk-s3": "3.6.1",
    	"@aws-sdk/middleware-serde": "3.6.1",
    	"@aws-sdk/middleware-signing": "3.6.1",
    	"@aws-sdk/middleware-ssec": "3.6.1",
    	"@aws-sdk/middleware-stack": "3.6.1",
    	"@aws-sdk/middleware-user-agent": "3.6.1",
    	"@aws-sdk/node-config-provider": "3.6.1",
    	"@aws-sdk/node-http-handler": "3.6.1",
    	"@aws-sdk/protocol-http": "3.6.1",
    	"@aws-sdk/smithy-client": "3.6.1",
    	"@aws-sdk/types": "3.6.1",
    	"@aws-sdk/url-parser": "3.6.1",
    	"@aws-sdk/url-parser-native": "3.6.1",
    	"@aws-sdk/util-base64-browser": "3.6.1",
    	"@aws-sdk/util-base64-node": "3.6.1",
    	"@aws-sdk/util-body-length-browser": "3.6.1",
    	"@aws-sdk/util-body-length-node": "3.6.1",
    	"@aws-sdk/util-user-agent-browser": "3.6.1",
    	"@aws-sdk/util-user-agent-node": "3.6.1",
    	"@aws-sdk/util-utf8-browser": "3.6.1",
    	"@aws-sdk/util-utf8-node": "3.6.1",
    	"@aws-sdk/util-waiter": "3.6.1",
    	"@aws-sdk/xml-builder": "3.6.1",
    	"fast-xml-parser": "^3.16.0",
    	tslib: "^2.0.0"
    };
    var devDependencies = {
    	"@aws-sdk/client-documentation-generator": "3.6.1",
    	"@types/chai": "^4.2.11",
    	"@types/mocha": "^8.0.4",
    	"@types/node": "^12.7.5",
    	"downlevel-dts": "0.7.0",
    	jest: "^26.1.0",
    	rimraf: "^3.0.0",
    	typedoc: "^0.19.2",
    	typescript: "~4.1.2"
    };
    var engines = {
    	node: ">=10.0.0"
    };
    var typesVersions = {
    	"<4.0": {
    		"types/*": [
    			"types/ts3.4/*"
    		]
    	}
    };
    var author = {
    	name: "AWS SDK for JavaScript Team",
    	url: "https://aws.amazon.com/javascript/"
    };
    var license = "Apache-2.0";
    var homepage = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3";
    var repository = {
    	type: "git",
    	url: "https://github.com/aws/aws-sdk-js-v3.git",
    	directory: "clients/client-s3"
    };
    var packageInfo = {
    	name: name,
    	description: description,
    	version: version,
    	scripts: scripts,
    	main: main,
    	types: types,
    	module: module,
    	browser: browser,
    	"react-native": {
    	"./runtimeConfig": "./runtimeConfig.native"
    },
    	sideEffects: sideEffects,
    	dependencies: dependencies,
    	devDependencies: devDependencies,
    	engines: engines,
    	typesVersions: typesVersions,
    	author: author,
    	license: license,
    	homepage: homepage,
    	repository: repository
    };

    function blobReader(blob, onChunk, chunkSize) {
        if (chunkSize === void 0) { chunkSize = 1024 * 1024; }
        return new Promise(function (resolve, reject) {
            var fileReader = new FileReader();
            fileReader.addEventListener("error", reject);
            fileReader.addEventListener("abort", reject);
            var size = blob.size;
            var totalBytesRead = 0;
            function read() {
                if (totalBytesRead >= size) {
                    resolve();
                    return;
                }
                fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
            }
            fileReader.addEventListener("load", function (event) {
                var result = event.target.result;
                onChunk(new Uint8Array(result));
                totalBytesRead += result.byteLength;
                // read the next block
                read();
            });
            // kick off the read
            read();
        });
    }

    var blobHasher = function blobHasher(hashCtor, blob) {
        return __awaiter$j(this, void 0, void 0, function () {
            var hash;
            return __generator$j(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hash = new hashCtor();
                        return [4 /*yield*/, blobReader(blob, function (chunk) {
                                hash.update(chunk);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, hash.digest()];
                }
            });
        });
    };

    /**
     * @internal
     */
    var BLOCK_SIZE = 64;
    /**
     * @internal
     */
    var DIGEST_LENGTH = 16;
    /**
     * @internal
     */
    var INIT = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476];

    var Md5 = /** @class */ (function () {
        function Md5() {
            this.state = Uint32Array.from(INIT);
            this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
            this.bufferLength = 0;
            this.bytesHashed = 0;
            this.finished = false;
        }
        Md5.prototype.update = function (sourceData) {
            if (isEmptyData(sourceData)) {
                return;
            }
            else if (this.finished) {
                throw new Error("Attempted to update an already finished hash.");
            }
            var data = convertToBuffer(sourceData);
            var position = 0;
            var byteLength = data.byteLength;
            this.bytesHashed += byteLength;
            while (byteLength > 0) {
                this.buffer.setUint8(this.bufferLength++, data[position++]);
                byteLength--;
                if (this.bufferLength === BLOCK_SIZE) {
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
            }
        };
        Md5.prototype.digest = function () {
            return __awaiter$j(this, void 0, void 0, function () {
                var _a, buffer, undecoratedLength, bytesHashed, bitsHashed, i, i, out, i;
                return __generator$j(this, function (_b) {
                    if (!this.finished) {
                        _a = this, buffer = _a.buffer, undecoratedLength = _a.bufferLength, bytesHashed = _a.bytesHashed;
                        bitsHashed = bytesHashed * 8;
                        buffer.setUint8(this.bufferLength++, 128);
                        // Ensure the final block has enough room for the hashed length
                        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
                            for (i = this.bufferLength; i < BLOCK_SIZE; i++) {
                                buffer.setUint8(i, 0);
                            }
                            this.hashBuffer();
                            this.bufferLength = 0;
                        }
                        for (i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
                            buffer.setUint8(i, 0);
                        }
                        buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
                        buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);
                        this.hashBuffer();
                        this.finished = true;
                    }
                    out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
                    for (i = 0; i < 4; i++) {
                        out.setUint32(i * 4, this.state[i], true);
                    }
                    return [2 /*return*/, new Uint8Array(out.buffer, out.byteOffset, out.byteLength)];
                });
            });
        };
        Md5.prototype.hashBuffer = function () {
            var _a = this, buffer = _a.buffer, state = _a.state;
            var a = state[0], b = state[1], c = state[2], d = state[3];
            a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
            d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
            c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
            b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
            a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
            d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
            c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
            b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
            a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
            d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
            c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
            b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
            a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
            d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
            c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
            b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
            a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
            d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
            c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
            b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
            a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
            d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
            c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
            b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
            a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
            d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
            c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
            b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
            a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
            d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
            c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
            b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
            a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
            d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
            c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
            b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
            a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
            d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
            c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
            b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
            a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
            d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
            c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
            b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
            a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
            d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
            c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
            b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
            a = ii$1(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
            d = ii$1(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
            c = ii$1(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
            b = ii$1(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
            a = ii$1(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
            d = ii$1(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
            c = ii$1(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
            b = ii$1(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
            a = ii$1(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
            d = ii$1(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
            c = ii$1(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
            b = ii$1(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
            a = ii$1(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
            d = ii$1(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
            c = ii$1(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
            b = ii$1(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
            state[0] = (a + state[0]) & 0xffffffff;
            state[1] = (b + state[1]) & 0xffffffff;
            state[2] = (c + state[2]) & 0xffffffff;
            state[3] = (d + state[3]) & 0xffffffff;
        };
        return Md5;
    }());
    function cmn(q, a, b, x, s, t) {
        a = (((a + q) & 0xffffffff) + ((x + t) & 0xffffffff)) & 0xffffffff;
        return (((a << s) | (a >>> (32 - s))) + b) & 0xffffffff;
    }
    function ff(a, b, c, d, x, s, t) {
        return cmn((b & c) | (~b & d), a, b, x, s, t);
    }
    function gg(a, b, c, d, x, s, t) {
        return cmn((b & d) | (c & ~d), a, b, x, s, t);
    }
    function hh(a, b, c, d, x, s, t) {
        return cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function ii$1(a, b, c, d, x, s, t) {
        return cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    function isEmptyData(data) {
        if (typeof data === "string") {
            return data.length === 0;
        }
        return data.byteLength === 0;
    }
    function convertToBuffer(data) {
        if (typeof data === "string") {
            return fromUtf8(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
        }
        return new Uint8Array(data);
    }

    // Partition default templates
    var AWS_TEMPLATE = "s3.{region}.amazonaws.com";
    var AWS_CN_TEMPLATE = "s3.{region}.amazonaws.com.cn";
    var AWS_ISO_TEMPLATE = "s3.{region}.c2s.ic.gov";
    var AWS_ISO_B_TEMPLATE = "s3.{region}.sc2s.sgov.gov";
    var AWS_US_GOV_TEMPLATE = "s3.{region}.amazonaws.com";
    // Partition regions
    var AWS_REGIONS = new Set([
        "af-south-1",
        "ap-east-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-south-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-north-1",
        "eu-south-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "me-south-1",
        "sa-east-1",
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
    ]);
    var AWS_CN_REGIONS = new Set(["cn-north-1", "cn-northwest-1"]);
    var AWS_ISO_REGIONS = new Set(["us-iso-east-1"]);
    var AWS_ISO_B_REGIONS = new Set(["us-isob-east-1"]);
    var AWS_US_GOV_REGIONS = new Set(["us-gov-east-1", "us-gov-west-1"]);
    var defaultRegionInfoProvider = function (region, options) {
        var regionInfo = undefined;
        switch (region) {
            // First, try to match exact region names.
            case "af-south-1":
                regionInfo = {
                    hostname: "s3.af-south-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-east-1":
                regionInfo = {
                    hostname: "s3.ap-east-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-northeast-1":
                regionInfo = {
                    hostname: "s3.ap-northeast-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-northeast-2":
                regionInfo = {
                    hostname: "s3.ap-northeast-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-south-1":
                regionInfo = {
                    hostname: "s3.ap-south-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-southeast-1":
                regionInfo = {
                    hostname: "s3.ap-southeast-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "ap-southeast-2":
                regionInfo = {
                    hostname: "s3.ap-southeast-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "aws-global":
                regionInfo = {
                    hostname: "s3.amazonaws.com",
                    partition: "aws",
                    signingRegion: "us-east-1",
                };
                break;
            case "ca-central-1":
                regionInfo = {
                    hostname: "s3.ca-central-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "cn-north-1":
                regionInfo = {
                    hostname: "s3.cn-north-1.amazonaws.com.cn",
                    partition: "aws-cn",
                };
                break;
            case "cn-northwest-1":
                regionInfo = {
                    hostname: "s3.cn-northwest-1.amazonaws.com.cn",
                    partition: "aws-cn",
                };
                break;
            case "eu-central-1":
                regionInfo = {
                    hostname: "s3.eu-central-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-north-1":
                regionInfo = {
                    hostname: "s3.eu-north-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-south-1":
                regionInfo = {
                    hostname: "s3.eu-south-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-west-1":
                regionInfo = {
                    hostname: "s3.eu-west-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-west-2":
                regionInfo = {
                    hostname: "s3.eu-west-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "eu-west-3":
                regionInfo = {
                    hostname: "s3.eu-west-3.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "fips-us-gov-west-1":
                regionInfo = {
                    hostname: "s3-fips.us-gov-west-1.amazonaws.com",
                    partition: "aws-us-gov",
                    signingRegion: "us-gov-west-1",
                };
                break;
            case "me-south-1":
                regionInfo = {
                    hostname: "s3.me-south-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "s3-external-1":
                regionInfo = {
                    hostname: "s3-external-1.amazonaws.com",
                    partition: "aws",
                    signingRegion: "us-east-1",
                };
                break;
            case "sa-east-1":
                regionInfo = {
                    hostname: "s3.sa-east-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-east-1":
                regionInfo = {
                    hostname: "s3.us-east-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-east-2":
                regionInfo = {
                    hostname: "s3.us-east-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-gov-east-1":
                regionInfo = {
                    hostname: "s3.us-gov-east-1.amazonaws.com",
                    partition: "aws-us-gov",
                };
                break;
            case "us-gov-west-1":
                regionInfo = {
                    hostname: "s3.us-gov-west-1.amazonaws.com",
                    partition: "aws-us-gov",
                };
                break;
            case "us-iso-east-1":
                regionInfo = {
                    hostname: "s3.us-iso-east-1.c2s.ic.gov",
                    partition: "aws-iso",
                };
                break;
            case "us-isob-east-1":
                regionInfo = {
                    hostname: "s3.us-isob-east-1.sc2s.sgov.gov",
                    partition: "aws-iso-b",
                };
                break;
            case "us-west-1":
                regionInfo = {
                    hostname: "s3.us-west-1.amazonaws.com",
                    partition: "aws",
                };
                break;
            case "us-west-2":
                regionInfo = {
                    hostname: "s3.us-west-2.amazonaws.com",
                    partition: "aws",
                };
                break;
            // Next, try to match partition endpoints.
            default:
                if (AWS_REGIONS.has(region)) {
                    regionInfo = {
                        hostname: AWS_TEMPLATE.replace("{region}", region),
                        partition: "aws",
                    };
                }
                if (AWS_CN_REGIONS.has(region)) {
                    regionInfo = {
                        hostname: AWS_CN_TEMPLATE.replace("{region}", region),
                        partition: "aws-cn",
                    };
                }
                if (AWS_ISO_REGIONS.has(region)) {
                    regionInfo = {
                        hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
                        partition: "aws-iso",
                    };
                }
                if (AWS_ISO_B_REGIONS.has(region)) {
                    regionInfo = {
                        hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
                        partition: "aws-iso-b",
                    };
                }
                if (AWS_US_GOV_REGIONS.has(region)) {
                    regionInfo = {
                        hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
                        partition: "aws-us-gov",
                    };
                }
                // Finally, assume it's an AWS partition endpoint.
                if (regionInfo === undefined) {
                    regionInfo = {
                        hostname: AWS_TEMPLATE.replace("{region}", region),
                        partition: "aws",
                    };
                }
        }
        return Promise.resolve(__assign$b({ signingService: "s3" }, regionInfo));
    };

    /**
     * @internal
     */
    var ClientSharedValues = {
        apiVersion: "2006-03-01",
        disableHostPrefix: false,
        logger: {},
        regionInfoProvider: defaultRegionInfoProvider,
        serviceId: "S3",
        signingEscapePath: false,
        urlParser: parseUrl,
        useArnRegion: false,
    };

    /**
     * @internal
     */
    var ClientDefaultValues = __assign$b(__assign$b({}, ClientSharedValues), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function (_) { return function () { return Promise.reject(new Error("Credential is missing")); }; }, defaultUserAgentProvider: defaultUserAgent({
            serviceId: ClientSharedValues.serviceId,
            clientVersion: packageInfo.version,
        }), eventStreamSerdeProvider: eventStreamSerdeProvider, maxAttempts: DEFAULT_MAX_ATTEMPTS, md5: Md5, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: build$1.Sha256, streamCollector: streamCollector,
        streamHasher: blobHasher, utf8Decoder: fromUtf8, utf8Encoder: toUtf8 });

    /**
     * Validate whether a string is an ARN.
     */
    var validate$1 = function (str) {
        return typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
    };
    /**
     * Parse an ARN string into structure with partition, service, region, accountId and resource values
     */
    var parse$1 = function (arn) {
        var segments = arn.split(":");
        if (segments.length < 6 || segments[0] !== "arn")
            throw new Error("Malformed ARN");
        var _a = __read$9(segments), 
        //Skip "arn" literal
        partition = _a[1], service = _a[2], region = _a[3], accountId = _a[4], resource = _a.slice(5);
        return {
            partition: partition,
            service: service,
            region: region,
            accountId: accountId,
            resource: resource.join(":"),
        };
    };

    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var DOT_PATTERN = /\./;
    var S3_HOSTNAME_PATTERN = /^(.+\.)?s3[.-]([a-z0-9-]+)\./;
    var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
    var AWS_PARTITION_SUFFIX = "amazonaws.com";
    var isBucketNameOptions = function (options) { return typeof options.bucketName === "string"; };
    /**
     * Get pseudo region from supplied region. For example, if supplied with `fips-us-west-2`, it returns `us-west-2`.
     * @internal
     */
    var getPseudoRegion = function (region) { return (isFipsRegion(region) ? region.replace(/fips-|-fips/, "") : region); };
    /**
     * Determines whether a given string is DNS compliant per the rules outlined by
     * S3. Length, capitaization, and leading dot restrictions are enforced by the
     * DOMAIN_PATTERN regular expression.
     * @internal
     *
     * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
     */
    var isDnsCompatibleBucketName = function (bucketName) {
        return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    };
    var getRegionalSuffix = function (hostname) {
        var parts = hostname.match(S3_HOSTNAME_PATTERN);
        return [parts[2], hostname.replace(new RegExp("^" + parts[0]), "")];
    };
    var getSuffix = function (hostname) {
        return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
    };
    /**
     * Infer region and hostname suffix from a complete hostname
     * @internal
     * @param hostname - Hostname
     * @returns [Region, Hostname suffix]
     */
    var getSuffixForArnEndpoint = function (hostname) {
        return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)
            ? [hostname.replace("." + AWS_PARTITION_SUFFIX, ""), AWS_PARTITION_SUFFIX]
            : getRegionalSuffix(hostname);
    };
    var validateArnEndpointOptions = function (options) {
        if (options.pathStyleEndpoint) {
            throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
        }
        if (options.accelerateEndpoint) {
            throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
        }
        if (!options.tlsCompatible) {
            throw new Error("HTTPS is required when bucket is an ARN");
        }
    };
    var validateService = function (service) {
        if (service !== "s3" && service !== "s3-outposts") {
            throw new Error("Expect 's3' or 's3-outposts' in ARN service component");
        }
    };
    var validateS3Service = function (service) {
        if (service !== "s3") {
            throw new Error("Expect 's3' in Accesspoint ARN service component");
        }
    };
    var validateOutpostService = function (service) {
        if (service !== "s3-outposts") {
            throw new Error("Expect 's3-posts' in Outpost ARN service component");
        }
    };
    /**
     * Validate partition inferred from ARN is the same to `options.clientPartition`.
     * @internal
     */
    var validatePartition = function (partition, options) {
        if (partition !== options.clientPartition) {
            throw new Error("Partition in ARN is incompatible, got \"" + partition + "\" but expected \"" + options.clientPartition + "\"");
        }
    };
    /**
     * validate region value inferred from ARN. If `options.useArnRegion` is set, it validates the region is not a FIPS
     * region. If `options.useArnRegion` is unset, it validates the region is equal to `options.clientRegion` or
     * `options.clientSigningRegion`.
     * @internal
     */
    var validateRegion = function (region, options) {
        if (region === "") {
            throw new Error("ARN region is empty");
        }
        if (!options.useArnRegion &&
            !isEqualRegions(region, options.clientRegion) &&
            !isEqualRegions(region, options.clientSigningRegion)) {
            throw new Error("Region in ARN is incompatible, got " + region + " but expected " + options.clientRegion);
        }
        if (options.useArnRegion && isFipsRegion(region)) {
            throw new Error("Endpoint does not support FIPS region");
        }
    };
    var isFipsRegion = function (region) { return region.startsWith("fips-") || region.endsWith("-fips"); };
    var isEqualRegions = function (regionA, regionB) {
        return regionA === regionB || getPseudoRegion(regionA) === regionB || regionA === getPseudoRegion(regionB);
    };
    /**
     * Validate an account ID
     * @internal
     */
    var validateAccountId = function (accountId) {
        if (!/[0-9]{12}/.exec(accountId)) {
            throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
        }
    };
    /**
     * Validate a host label according to https://tools.ietf.org/html/rfc3986#section-3.2.2
     * @internal
     */
    var validateDNSHostLabel = function (label, options) {
        if (options === void 0) { options = { tlsCompatible: true }; }
        // reference: https://tools.ietf.org/html/rfc3986#section-3.2.2
        if (label.length >= 64 ||
            !/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(label) ||
            /(\d+\.){3}\d+/.test(label) ||
            /[.-]{2}/.test(label) ||
            ((options === null || options === void 0 ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label))) {
            throw new Error("Invalid DNS label " + label);
        }
    };
    /**
     * Validate and parse an Access Point ARN or Outposts ARN
     * @internal
     *
     * @param resource - The resource section of an ARN
     * @returns Access Point Name and optional Outpost ID.
     */
    var getArnResources = function (resource) {
        var delimiter = resource.includes(":") ? ":" : "/";
        var _a = __read$9(resource.split(delimiter)), resourceType = _a[0], rest = _a.slice(1);
        if (resourceType === "accesspoint") {
            // Parse accesspoint ARN
            if (rest.length !== 1 || rest[0] === "") {
                throw new Error("Access Point ARN should have one resource accesspoint" + delimiter + "{accesspointname}");
            }
            return { accesspointName: rest[0] };
        }
        else if (resourceType === "outpost") {
            // Parse outpost ARN
            if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
                throw new Error("Outpost ARN should have resource outpost" + delimiter + "{outpostId}" + delimiter + "accesspoint" + delimiter + "{accesspointName}");
            }
            var _b = __read$9(rest, 3), outpostId = _b[0]; _b[1]; var accesspointName = _b[2];
            return { outpostId: outpostId, accesspointName: accesspointName };
        }
        else {
            throw new Error("ARN resource should begin with 'accesspoint" + delimiter + "' or 'outpost" + delimiter + "'");
        }
    };
    /**
     * Throw if dual stack configuration is set to true.
     * @internal
     */
    var validateNoDualstack = function (dualstackEndpoint) {
        if (dualstackEndpoint)
            throw new Error("Dualstack endpoint is not supported with Outpost");
    };
    /**
     * Validate region is not appended or prepended with a `fips-`
     * @internal
     */
    var validateNoFIPS = function (region) {
        if (isFipsRegion(region !== null && region !== void 0 ? region : ""))
            throw new Error("FIPS region is not supported with Outpost, got " + region);
    };

    var bucketHostname = function (options) {
        var isCustomEndpoint = options.isCustomEndpoint; options.baseHostname; var dualstackEndpoint = options.dualstackEndpoint, accelerateEndpoint = options.accelerateEndpoint;
        if (isCustomEndpoint) {
            if (dualstackEndpoint)
                throw new Error("Dualstack endpoint is not supported with custom endpoint");
            if (accelerateEndpoint)
                throw new Error("Accelerate endpoint is not supported with custom endpoint");
        }
        return isBucketNameOptions(options)
            ? // Construct endpoint when bucketName is a string referring to a bucket name
                getEndpointFromBucketName(__assign$i(__assign$i({}, options), { isCustomEndpoint: isCustomEndpoint }))
            : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point
                getEndpointFromArn(__assign$i(__assign$i({}, options), { isCustomEndpoint: isCustomEndpoint }));
    };
    var getEndpointFromArn = function (options) {
        var isCustomEndpoint = options.isCustomEndpoint, baseHostname = options.baseHostname;
        var _a = __read$9(isCustomEndpoint
            ? [options.clientRegion, baseHostname]
            : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`
                getSuffixForArnEndpoint(baseHostname), 2), clientRegion = _a[0], hostnameSuffix = _a[1];
        var pathStyleEndpoint = options.pathStyleEndpoint, _b = options.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, _c = options.accelerateEndpoint, accelerateEndpoint = _c === void 0 ? false : _c, _d = options.tlsCompatible, tlsCompatible = _d === void 0 ? true : _d, useArnRegion = options.useArnRegion, bucketName = options.bucketName, _e = options.clientPartition, clientPartition = _e === void 0 ? "aws" : _e, _f = options.clientSigningRegion, clientSigningRegion = _f === void 0 ? clientRegion : _f;
        validateArnEndpointOptions({ pathStyleEndpoint: pathStyleEndpoint, accelerateEndpoint: accelerateEndpoint, tlsCompatible: tlsCompatible });
        // Validate and parse the ARN supplied as a bucket name
        var service = bucketName.service, partition = bucketName.partition, accountId = bucketName.accountId, region = bucketName.region, resource = bucketName.resource;
        validateService(service);
        validatePartition(partition, { clientPartition: clientPartition });
        validateAccountId(accountId);
        validateRegion(region, { useArnRegion: useArnRegion, clientRegion: clientRegion, clientSigningRegion: clientSigningRegion });
        var _g = getArnResources(resource), accesspointName = _g.accesspointName, outpostId = _g.outpostId;
        validateDNSHostLabel(accesspointName + "-" + accountId, { tlsCompatible: tlsCompatible });
        var endpointRegion = useArnRegion ? region : clientRegion;
        var signingRegion = useArnRegion ? region : clientSigningRegion;
        if (outpostId) {
            // if this is an Outpost ARN
            validateOutpostService(service);
            validateDNSHostLabel(outpostId, { tlsCompatible: tlsCompatible });
            validateNoDualstack(dualstackEndpoint);
            validateNoFIPS(endpointRegion);
            var hostnamePrefix_1 = accesspointName + "-" + accountId + "." + outpostId;
            return {
                bucketEndpoint: true,
                hostname: "" + hostnamePrefix_1 + (isCustomEndpoint ? "" : ".s3-outposts." + endpointRegion) + "." + hostnameSuffix,
                signingRegion: signingRegion,
                signingService: "s3-outposts",
            };
        }
        // construct endpoint from Accesspoint ARN
        validateS3Service(service);
        var hostnamePrefix = accesspointName + "-" + accountId;
        return {
            bucketEndpoint: true,
            hostname: "" + hostnamePrefix + (isCustomEndpoint ? "" : ".s3-accesspoint" + (dualstackEndpoint ? ".dualstack" : "") + "." + endpointRegion) + "." + hostnameSuffix,
            signingRegion: signingRegion,
        };
    };
    var getEndpointFromBucketName = function (_a) {
        var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, region = _a.clientRegion, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.pathStyleEndpoint, pathStyleEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, _f = _a.isCustomEndpoint, isCustomEndpoint = _f === void 0 ? false : _f;
        var _g = __read$9(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2), clientRegion = _g[0], hostnameSuffix = _g[1];
        if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {
            return {
                bucketEndpoint: false,
                hostname: dualstackEndpoint ? "s3.dualstack." + clientRegion + "." + hostnameSuffix : baseHostname,
            };
        }
        if (accelerateEndpoint) {
            baseHostname = "s3-accelerate" + (dualstackEndpoint ? ".dualstack" : "") + "." + hostnameSuffix;
        }
        else if (dualstackEndpoint) {
            baseHostname = "s3.dualstack." + clientRegion + "." + hostnameSuffix;
        }
        return {
            bucketEndpoint: true,
            hostname: bucketName + "." + baseHostname,
        };
    };

    var bucketEndpointMiddleware = function (options) { return function (next, context) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;
        return __generator$j(this, function (_g) {
            switch (_g.label) {
                case 0:
                    bucketName = args.input.Bucket;
                    replaceBucketInPath = options.bucketEndpoint;
                    request = args.request;
                    if (!HttpRequest.isInstance(request)) return [3 /*break*/, 8];
                    if (!options.bucketEndpoint) return [3 /*break*/, 1];
                    request.hostname = bucketName;
                    return [3 /*break*/, 7];
                case 1:
                    if (!validate$1(bucketName)) return [3 /*break*/, 5];
                    bucketArn = parse$1(bucketName);
                    _a = getPseudoRegion;
                    return [4 /*yield*/, options.region()];
                case 2:
                    clientRegion = _a.apply(void 0, [_g.sent()]);
                    return [4 /*yield*/, options.regionInfoProvider(clientRegion)];
                case 3:
                    _b = (_g.sent()) || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;
                    return [4 /*yield*/, options.useArnRegion()];
                case 4:
                    useArnRegion = _g.sent();
                    _d = bucketHostname({
                        bucketName: bucketArn,
                        baseHostname: request.hostname,
                        accelerateEndpoint: options.useAccelerateEndpoint,
                        dualstackEndpoint: options.useDualstackEndpoint,
                        pathStyleEndpoint: options.forcePathStyle,
                        tlsCompatible: request.protocol === "https:",
                        useArnRegion: useArnRegion,
                        clientPartition: partition,
                        clientSigningRegion: signingRegion,
                        clientRegion: clientRegion,
                        isCustomEndpoint: options.isCustomEndpoint,
                    }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService;
                    // If the request needs to use a region or service name inferred from ARN that different from client region, we
                    // need to set them in the handler context so the signer will use them
                    if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
                        context["signing_region"] = modifiedSigningRegion;
                    }
                    if (signingService && signingService !== "s3") {
                        context["signing_service"] = signingService;
                    }
                    request.hostname = hostname;
                    replaceBucketInPath = bucketEndpoint;
                    return [3 /*break*/, 7];
                case 5:
                    _e = getPseudoRegion;
                    return [4 /*yield*/, options.region()];
                case 6:
                    clientRegion = _e.apply(void 0, [_g.sent()]);
                    _f = bucketHostname({
                        bucketName: bucketName,
                        clientRegion: clientRegion,
                        baseHostname: request.hostname,
                        accelerateEndpoint: options.useAccelerateEndpoint,
                        dualstackEndpoint: options.useDualstackEndpoint,
                        pathStyleEndpoint: options.forcePathStyle,
                        tlsCompatible: request.protocol === "https:",
                        isCustomEndpoint: options.isCustomEndpoint,
                    }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;
                    request.hostname = hostname;
                    replaceBucketInPath = bucketEndpoint;
                    _g.label = 7;
                case 7:
                    if (replaceBucketInPath) {
                        request.path = request.path.replace(/^(\/)?[^\/]+/, "");
                        if (request.path === "") {
                            request.path = "/";
                        }
                    }
                    _g.label = 8;
                case 8: return [2 /*return*/, next(__assign$i(__assign$i({}, args), { request: request }))];
            }
        });
    }); }; }; };
    var bucketEndpointMiddlewareOptions = {
        tags: ["BUCKET_ENDPOINT"],
        name: "bucketEndpointMiddleware",
        relation: "before",
        toMiddleware: "hostHeaderMiddleware",
        override: true,
    };
    var getBucketEndpointPlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
        },
    }); };

    function resolveBucketEndpointConfig(input) {
        var _a = input.bucketEndpoint, bucketEndpoint = _a === void 0 ? false : _a, _b = input.forcePathStyle, forcePathStyle = _b === void 0 ? false : _b, _c = input.useAccelerateEndpoint, useAccelerateEndpoint = _c === void 0 ? false : _c, _d = input.useDualstackEndpoint, useDualstackEndpoint = _d === void 0 ? false : _d, _e = input.useArnRegion, useArnRegion = _e === void 0 ? false : _e;
        return __assign$i(__assign$i({}, input), { bucketEndpoint: bucketEndpoint,
            forcePathStyle: forcePathStyle,
            useAccelerateEndpoint: useAccelerateEndpoint,
            useDualstackEndpoint: useDualstackEndpoint, useArnRegion: typeof useArnRegion === "function" ? useArnRegion : function () { return Promise.resolve(useArnRegion); } });
    }

    function addExpectContinueMiddleware(options) {
        var _this = this;
        return function (next) { return function (args) { return __awaiter$j(_this, void 0, void 0, function () {
            var request;
            return __generator$j(this, function (_a) {
                request = args.request;
                if (HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
                    request.headers = __assign$i(__assign$i({}, request.headers), { Expect: "100-continue" });
                }
                return [2 /*return*/, next(__assign$i(__assign$i({}, args), { request: request }))];
            });
        }); }; };
    }
    var addExpectContinueMiddlewareOptions = {
        step: "build",
        tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
        name: "addExpectContinueMiddleware",
        override: true,
    };
    var getAddExpectContinuePlugin = function (options) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
        },
    }); };

    /**
     * @internal
     */
    function validateBucketNameMiddleware() {
        var _this = this;
        return function (next) { return function (args) { return __awaiter$j(_this, void 0, void 0, function () {
            var Bucket, err;
            return __generator$j(this, function (_a) {
                Bucket = args.input.Bucket;
                if (typeof Bucket === "string" && !validate$1(Bucket) && Bucket.indexOf("/") >= 0) {
                    err = new Error("Bucket name shouldn't contain '/', received '" + Bucket + "'");
                    err.name = "InvalidBucketName";
                    throw err;
                }
                return [2 /*return*/, next(__assign$i({}, args))];
            });
        }); }; };
    }
    /**
     * @internal
     */
    var validateBucketNameMiddlewareOptions = {
        step: "initialize",
        tags: ["VALIDATE_BUCKET_NAME"],
        name: "validateBucketNameMiddleware",
        override: true,
    };
    /**
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var getValidateBucketNamePlugin = function (unused) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
        },
    }); };

    /**
     * @internal
     */
    var useRegionalEndpointMiddleware = function (config) { return function (next) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var request, _a;
        return __generator$j(this, function (_b) {
            switch (_b.label) {
                case 0:
                    request = args.request;
                    if (!HttpRequest.isInstance(request) || config.isCustomEndpoint)
                        return [2 /*return*/, next(__assign$i({}, args))];
                    if (!(request.hostname === "s3.amazonaws.com")) return [3 /*break*/, 1];
                    request.hostname = "s3.us-east-1.amazonaws.com";
                    return [3 /*break*/, 3];
                case 1:
                    _a = "aws-global";
                    return [4 /*yield*/, config.region()];
                case 2:
                    if (_a === (_b.sent())) {
                        request.hostname = "s3.amazonaws.com";
                    }
                    _b.label = 3;
                case 3: return [2 /*return*/, next(__assign$i({}, args))];
            }
        });
    }); }; }; };
    /**
     * @internal
     */
    var useRegionalEndpointMiddlewareOptions = {
        step: "build",
        tags: ["USE_REGIONAL_ENDPOINT", "S3"],
        name: "useRegionalEndpointMiddleware",
        override: true,
    };
    /**
     * @internal
     */
    var getUseRegionalEndpointPlugin = function (config) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);
        },
    }); };

    /**
     * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,
     * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.
     * @internal
     */
    var throw200ExceptionsMiddleware = function (config) { return function (next) { return function (args) { return __awaiter$j(void 0, void 0, void 0, function () {
        var result, response, statusCode, body, bodyBytes, bodyString, err;
        return __generator$j(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, next(args)];
                case 1:
                    result = _a.sent();
                    response = result.response;
                    if (!HttpResponse.isInstance(response))
                        return [2 /*return*/, result];
                    statusCode = response.statusCode, body = response.body;
                    if (statusCode < 200 && statusCode >= 300)
                        return [2 /*return*/, result];
                    return [4 /*yield*/, collectBody$1(body, config)];
                case 2:
                    bodyBytes = _a.sent();
                    return [4 /*yield*/, collectBodyString$1(bodyBytes, config)];
                case 3:
                    bodyString = _a.sent();
                    if (bodyBytes.length === 0) {
                        err = new Error("S3 aborted request");
                        err.name = "InternalError";
                        throw err;
                    }
                    if (bodyString && bodyString.match("<Error>")) {
                        // Set the error code to 4XX so that error deserializer can parse them
                        response.statusCode = 400;
                    }
                    // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.
                    // So that the deserializer can consume the body as normal.
                    response.body = bodyBytes;
                    return [2 /*return*/, result];
            }
        });
    }); }; }; };
    // Collect low-level response body stream to Uint8Array.
    var collectBody$1 = function (streamBody, context) {
        if (streamBody === void 0) { streamBody = new Uint8Array(); }
        if (streamBody instanceof Uint8Array) {
            return Promise.resolve(streamBody);
        }
        return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    // Encode Uint8Array data into string with utf-8.
    var collectBodyString$1 = function (streamBody, context) {
        return collectBody$1(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
    };
    /**
     * @internal
     */
    var throw200ExceptionsMiddlewareOptions = {
        relation: "after",
        toMiddleware: "deserializerMiddleware",
        tags: ["THROW_200_EXCEPTIONS", "S3"],
        name: "throw200ExceptionsMiddleware",
        override: true,
    };
    /**
     *
     * @internal
     */
    var getThrow200ExceptionsPlugin = function (config) { return ({
        applyToStack: function (clientStack) {
            clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
        },
    }); };

    /**
     * <p></p>
     */
    var S3Client = /** @class */ (function (_super) {
        __extends$3(S3Client, _super);
        function S3Client(configuration) {
            var _this = this;
            var _config_0 = __assign$b(__assign$b({}, ClientDefaultValues), configuration);
            var _config_1 = resolveRegionConfig(_config_0);
            var _config_2 = resolveEndpointsConfig(_config_1);
            var _config_3 = resolveAwsAuthConfig(_config_2);
            var _config_4 = resolveRetryConfig(_config_3);
            var _config_5 = resolveHostHeaderConfig(_config_4);
            var _config_6 = resolveBucketEndpointConfig(_config_5);
            var _config_7 = resolveUserAgentConfig(_config_6);
            var _config_8 = resolveEventStreamSerdeConfig(_config_7);
            _this = _super.call(this, _config_8) || this;
            _this.config = _config_8;
            _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
            _this.middlewareStack.use(getRetryPlugin(_this.config));
            _this.middlewareStack.use(getContentLengthPlugin(_this.config));
            _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
            _this.middlewareStack.use(getLoggerPlugin(_this.config));
            _this.middlewareStack.use(getValidateBucketNamePlugin(_this.config));
            _this.middlewareStack.use(getUseRegionalEndpointPlugin(_this.config));
            _this.middlewareStack.use(getAddExpectContinuePlugin(_this.config));
            _this.middlewareStack.use(getUserAgentPlugin(_this.config));
            return _this;
        }
        S3Client.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        return S3Client;
    }(Client$1));

    var AbortIncompleteMultipartUpload;
    (function (AbortIncompleteMultipartUpload) {
        AbortIncompleteMultipartUpload.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AbortIncompleteMultipartUpload || (AbortIncompleteMultipartUpload = {}));
    var AbortMultipartUploadOutput;
    (function (AbortMultipartUploadOutput) {
        AbortMultipartUploadOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AbortMultipartUploadOutput || (AbortMultipartUploadOutput = {}));
    var AbortMultipartUploadRequest;
    (function (AbortMultipartUploadRequest) {
        AbortMultipartUploadRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AbortMultipartUploadRequest || (AbortMultipartUploadRequest = {}));
    var NoSuchUpload;
    (function (NoSuchUpload) {
        NoSuchUpload.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NoSuchUpload || (NoSuchUpload = {}));
    var AccelerateConfiguration;
    (function (AccelerateConfiguration) {
        AccelerateConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AccelerateConfiguration || (AccelerateConfiguration = {}));
    var Grantee;
    (function (Grantee) {
        Grantee.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Grantee || (Grantee = {}));
    var Grant;
    (function (Grant) {
        Grant.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Grant || (Grant = {}));
    var Owner;
    (function (Owner) {
        Owner.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Owner || (Owner = {}));
    var AccessControlPolicy;
    (function (AccessControlPolicy) {
        AccessControlPolicy.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AccessControlPolicy || (AccessControlPolicy = {}));
    var AccessControlTranslation;
    (function (AccessControlTranslation) {
        AccessControlTranslation.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AccessControlTranslation || (AccessControlTranslation = {}));
    var CompleteMultipartUploadOutput;
    (function (CompleteMultipartUploadOutput) {
        CompleteMultipartUploadOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
    })(CompleteMultipartUploadOutput || (CompleteMultipartUploadOutput = {}));
    var CompletedPart;
    (function (CompletedPart) {
        CompletedPart.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CompletedPart || (CompletedPart = {}));
    var CompletedMultipartUpload;
    (function (CompletedMultipartUpload) {
        CompletedMultipartUpload.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CompletedMultipartUpload || (CompletedMultipartUpload = {}));
    var CompleteMultipartUploadRequest;
    (function (CompleteMultipartUploadRequest) {
        CompleteMultipartUploadRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CompleteMultipartUploadRequest || (CompleteMultipartUploadRequest = {}));
    var CopyObjectResult;
    (function (CopyObjectResult) {
        CopyObjectResult.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CopyObjectResult || (CopyObjectResult = {}));
    var CopyObjectOutput;
    (function (CopyObjectOutput) {
        CopyObjectOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
    })(CopyObjectOutput || (CopyObjectOutput = {}));
    var CopyObjectRequest;
    (function (CopyObjectRequest) {
        CopyObjectRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b(__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING })), (obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING }))); };
    })(CopyObjectRequest || (CopyObjectRequest = {}));
    var ObjectNotInActiveTierError;
    (function (ObjectNotInActiveTierError) {
        ObjectNotInActiveTierError.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectNotInActiveTierError || (ObjectNotInActiveTierError = {}));
    var BucketAlreadyExists;
    (function (BucketAlreadyExists) {
        BucketAlreadyExists.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(BucketAlreadyExists || (BucketAlreadyExists = {}));
    var BucketAlreadyOwnedByYou;
    (function (BucketAlreadyOwnedByYou) {
        BucketAlreadyOwnedByYou.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(BucketAlreadyOwnedByYou || (BucketAlreadyOwnedByYou = {}));
    var CreateBucketOutput;
    (function (CreateBucketOutput) {
        CreateBucketOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CreateBucketOutput || (CreateBucketOutput = {}));
    var CreateBucketConfiguration;
    (function (CreateBucketConfiguration) {
        CreateBucketConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CreateBucketConfiguration || (CreateBucketConfiguration = {}));
    var CreateBucketRequest;
    (function (CreateBucketRequest) {
        CreateBucketRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CreateBucketRequest || (CreateBucketRequest = {}));
    var CreateMultipartUploadOutput;
    (function (CreateMultipartUploadOutput) {
        CreateMultipartUploadOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
    })(CreateMultipartUploadOutput || (CreateMultipartUploadOutput = {}));
    var CreateMultipartUploadRequest;
    (function (CreateMultipartUploadRequest) {
        CreateMultipartUploadRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
    })(CreateMultipartUploadRequest || (CreateMultipartUploadRequest = {}));
    var DeleteBucketRequest;
    (function (DeleteBucketRequest) {
        DeleteBucketRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketRequest || (DeleteBucketRequest = {}));
    var DeleteBucketAnalyticsConfigurationRequest;
    (function (DeleteBucketAnalyticsConfigurationRequest) {
        DeleteBucketAnalyticsConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketAnalyticsConfigurationRequest || (DeleteBucketAnalyticsConfigurationRequest = {}));
    var DeleteBucketCorsRequest;
    (function (DeleteBucketCorsRequest) {
        DeleteBucketCorsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketCorsRequest || (DeleteBucketCorsRequest = {}));
    var DeleteBucketEncryptionRequest;
    (function (DeleteBucketEncryptionRequest) {
        DeleteBucketEncryptionRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketEncryptionRequest || (DeleteBucketEncryptionRequest = {}));
    var DeleteBucketIntelligentTieringConfigurationRequest;
    (function (DeleteBucketIntelligentTieringConfigurationRequest) {
        DeleteBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketIntelligentTieringConfigurationRequest || (DeleteBucketIntelligentTieringConfigurationRequest = {}));
    var DeleteBucketInventoryConfigurationRequest;
    (function (DeleteBucketInventoryConfigurationRequest) {
        DeleteBucketInventoryConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketInventoryConfigurationRequest || (DeleteBucketInventoryConfigurationRequest = {}));
    var DeleteBucketLifecycleRequest;
    (function (DeleteBucketLifecycleRequest) {
        DeleteBucketLifecycleRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketLifecycleRequest || (DeleteBucketLifecycleRequest = {}));
    var DeleteBucketMetricsConfigurationRequest;
    (function (DeleteBucketMetricsConfigurationRequest) {
        DeleteBucketMetricsConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketMetricsConfigurationRequest || (DeleteBucketMetricsConfigurationRequest = {}));
    var DeleteBucketOwnershipControlsRequest;
    (function (DeleteBucketOwnershipControlsRequest) {
        DeleteBucketOwnershipControlsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketOwnershipControlsRequest || (DeleteBucketOwnershipControlsRequest = {}));
    var DeleteBucketPolicyRequest;
    (function (DeleteBucketPolicyRequest) {
        DeleteBucketPolicyRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketPolicyRequest || (DeleteBucketPolicyRequest = {}));
    var DeleteBucketReplicationRequest;
    (function (DeleteBucketReplicationRequest) {
        DeleteBucketReplicationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketReplicationRequest || (DeleteBucketReplicationRequest = {}));
    var DeleteBucketTaggingRequest;
    (function (DeleteBucketTaggingRequest) {
        DeleteBucketTaggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketTaggingRequest || (DeleteBucketTaggingRequest = {}));
    var DeleteBucketWebsiteRequest;
    (function (DeleteBucketWebsiteRequest) {
        DeleteBucketWebsiteRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteBucketWebsiteRequest || (DeleteBucketWebsiteRequest = {}));
    var DeleteObjectOutput;
    (function (DeleteObjectOutput) {
        DeleteObjectOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteObjectOutput || (DeleteObjectOutput = {}));
    var DeleteObjectRequest;
    (function (DeleteObjectRequest) {
        DeleteObjectRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteObjectRequest || (DeleteObjectRequest = {}));
    var DeletedObject;
    (function (DeletedObject) {
        DeletedObject.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeletedObject || (DeletedObject = {}));
    var _Error;
    (function (_Error) {
        _Error.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(_Error || (_Error = {}));
    var DeleteObjectsOutput;
    (function (DeleteObjectsOutput) {
        DeleteObjectsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteObjectsOutput || (DeleteObjectsOutput = {}));
    var ObjectIdentifier;
    (function (ObjectIdentifier) {
        ObjectIdentifier.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectIdentifier || (ObjectIdentifier = {}));
    var Delete;
    (function (Delete) {
        Delete.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Delete || (Delete = {}));
    var DeleteObjectsRequest;
    (function (DeleteObjectsRequest) {
        DeleteObjectsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteObjectsRequest || (DeleteObjectsRequest = {}));
    var DeleteObjectTaggingOutput;
    (function (DeleteObjectTaggingOutput) {
        DeleteObjectTaggingOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteObjectTaggingOutput || (DeleteObjectTaggingOutput = {}));
    var DeleteObjectTaggingRequest;
    (function (DeleteObjectTaggingRequest) {
        DeleteObjectTaggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteObjectTaggingRequest || (DeleteObjectTaggingRequest = {}));
    var DeletePublicAccessBlockRequest;
    (function (DeletePublicAccessBlockRequest) {
        DeletePublicAccessBlockRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeletePublicAccessBlockRequest || (DeletePublicAccessBlockRequest = {}));
    var GetBucketAccelerateConfigurationOutput;
    (function (GetBucketAccelerateConfigurationOutput) {
        GetBucketAccelerateConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketAccelerateConfigurationOutput || (GetBucketAccelerateConfigurationOutput = {}));
    var GetBucketAccelerateConfigurationRequest;
    (function (GetBucketAccelerateConfigurationRequest) {
        GetBucketAccelerateConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketAccelerateConfigurationRequest || (GetBucketAccelerateConfigurationRequest = {}));
    var GetBucketAclOutput;
    (function (GetBucketAclOutput) {
        GetBucketAclOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketAclOutput || (GetBucketAclOutput = {}));
    var GetBucketAclRequest;
    (function (GetBucketAclRequest) {
        GetBucketAclRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketAclRequest || (GetBucketAclRequest = {}));
    var Tag;
    (function (Tag) {
        Tag.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Tag || (Tag = {}));
    var AnalyticsAndOperator;
    (function (AnalyticsAndOperator) {
        AnalyticsAndOperator.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AnalyticsAndOperator || (AnalyticsAndOperator = {}));
    var AnalyticsFilter;
    (function (AnalyticsFilter) {
        AnalyticsFilter.visit = function (value, visitor) {
            if (value.Prefix !== undefined)
                return visitor.Prefix(value.Prefix);
            if (value.Tag !== undefined)
                return visitor.Tag(value.Tag);
            if (value.And !== undefined)
                return visitor.And(value.And);
            return visitor._(value.$unknown[0], value.$unknown[1]);
        };
        AnalyticsFilter.filterSensitiveLog = function (obj) {
            var _a;
            if (obj.Prefix !== undefined)
                return { Prefix: obj.Prefix };
            if (obj.Tag !== undefined)
                return { Tag: Tag.filterSensitiveLog(obj.Tag) };
            if (obj.And !== undefined)
                return { And: AnalyticsAndOperator.filterSensitiveLog(obj.And) };
            if (obj.$unknown !== undefined)
                return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
        };
    })(AnalyticsFilter || (AnalyticsFilter = {}));
    var AnalyticsS3BucketDestination;
    (function (AnalyticsS3BucketDestination) {
        AnalyticsS3BucketDestination.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AnalyticsS3BucketDestination || (AnalyticsS3BucketDestination = {}));
    var AnalyticsExportDestination;
    (function (AnalyticsExportDestination) {
        AnalyticsExportDestination.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(AnalyticsExportDestination || (AnalyticsExportDestination = {}));
    var StorageClassAnalysisDataExport;
    (function (StorageClassAnalysisDataExport) {
        StorageClassAnalysisDataExport.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(StorageClassAnalysisDataExport || (StorageClassAnalysisDataExport = {}));
    var StorageClassAnalysis;
    (function (StorageClassAnalysis) {
        StorageClassAnalysis.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(StorageClassAnalysis || (StorageClassAnalysis = {}));
    var AnalyticsConfiguration;
    (function (AnalyticsConfiguration) {
        AnalyticsConfiguration.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Filter && { Filter: AnalyticsFilter.filterSensitiveLog(obj.Filter) }))); };
    })(AnalyticsConfiguration || (AnalyticsConfiguration = {}));
    var GetBucketAnalyticsConfigurationOutput;
    (function (GetBucketAnalyticsConfigurationOutput) {
        GetBucketAnalyticsConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.AnalyticsConfiguration && {
            AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration),
        }))); };
    })(GetBucketAnalyticsConfigurationOutput || (GetBucketAnalyticsConfigurationOutput = {}));
    var GetBucketAnalyticsConfigurationRequest;
    (function (GetBucketAnalyticsConfigurationRequest) {
        GetBucketAnalyticsConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketAnalyticsConfigurationRequest || (GetBucketAnalyticsConfigurationRequest = {}));
    var CORSRule;
    (function (CORSRule) {
        CORSRule.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CORSRule || (CORSRule = {}));
    var GetBucketCorsOutput;
    (function (GetBucketCorsOutput) {
        GetBucketCorsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketCorsOutput || (GetBucketCorsOutput = {}));
    var GetBucketCorsRequest;
    (function (GetBucketCorsRequest) {
        GetBucketCorsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketCorsRequest || (GetBucketCorsRequest = {}));
    var ServerSideEncryptionByDefault;
    (function (ServerSideEncryptionByDefault) {
        ServerSideEncryptionByDefault.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING }))); };
    })(ServerSideEncryptionByDefault || (ServerSideEncryptionByDefault = {}));
    var ServerSideEncryptionRule;
    (function (ServerSideEncryptionRule) {
        ServerSideEncryptionRule.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.ApplyServerSideEncryptionByDefault && {
            ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault.filterSensitiveLog(obj.ApplyServerSideEncryptionByDefault),
        }))); };
    })(ServerSideEncryptionRule || (ServerSideEncryptionRule = {}));
    var ServerSideEncryptionConfiguration;
    (function (ServerSideEncryptionConfiguration) {
        ServerSideEncryptionConfiguration.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return ServerSideEncryptionRule.filterSensitiveLog(item); }) }))); };
    })(ServerSideEncryptionConfiguration || (ServerSideEncryptionConfiguration = {}));
    var GetBucketEncryptionOutput;
    (function (GetBucketEncryptionOutput) {
        GetBucketEncryptionOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.ServerSideEncryptionConfiguration && {
            ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration),
        }))); };
    })(GetBucketEncryptionOutput || (GetBucketEncryptionOutput = {}));
    var GetBucketEncryptionRequest;
    (function (GetBucketEncryptionRequest) {
        GetBucketEncryptionRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketEncryptionRequest || (GetBucketEncryptionRequest = {}));
    var IntelligentTieringAndOperator;
    (function (IntelligentTieringAndOperator) {
        IntelligentTieringAndOperator.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(IntelligentTieringAndOperator || (IntelligentTieringAndOperator = {}));
    var IntelligentTieringFilter;
    (function (IntelligentTieringFilter) {
        IntelligentTieringFilter.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(IntelligentTieringFilter || (IntelligentTieringFilter = {}));
    var Tiering;
    (function (Tiering) {
        Tiering.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Tiering || (Tiering = {}));
    var IntelligentTieringConfiguration;
    (function (IntelligentTieringConfiguration) {
        IntelligentTieringConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(IntelligentTieringConfiguration || (IntelligentTieringConfiguration = {}));
    var GetBucketIntelligentTieringConfigurationOutput;
    (function (GetBucketIntelligentTieringConfigurationOutput) {
        GetBucketIntelligentTieringConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketIntelligentTieringConfigurationOutput || (GetBucketIntelligentTieringConfigurationOutput = {}));
    var GetBucketIntelligentTieringConfigurationRequest;
    (function (GetBucketIntelligentTieringConfigurationRequest) {
        GetBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketIntelligentTieringConfigurationRequest || (GetBucketIntelligentTieringConfigurationRequest = {}));
    var SSEKMS;
    (function (SSEKMS) {
        SSEKMS.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.KeyId && { KeyId: SENSITIVE_STRING }))); };
    })(SSEKMS || (SSEKMS = {}));
    var SSES3;
    (function (SSES3) {
        SSES3.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(SSES3 || (SSES3 = {}));
    var InventoryEncryption;
    (function (InventoryEncryption) {
        InventoryEncryption.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSEKMS && { SSEKMS: SSEKMS.filterSensitiveLog(obj.SSEKMS) }))); };
    })(InventoryEncryption || (InventoryEncryption = {}));
    var InventoryS3BucketDestination;
    (function (InventoryS3BucketDestination) {
        InventoryS3BucketDestination.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Encryption && { Encryption: InventoryEncryption.filterSensitiveLog(obj.Encryption) }))); };
    })(InventoryS3BucketDestination || (InventoryS3BucketDestination = {}));
    var InventoryDestination;
    (function (InventoryDestination) {
        InventoryDestination.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.S3BucketDestination && {
            S3BucketDestination: InventoryS3BucketDestination.filterSensitiveLog(obj.S3BucketDestination),
        }))); };
    })(InventoryDestination || (InventoryDestination = {}));
    var InventoryFilter;
    (function (InventoryFilter) {
        InventoryFilter.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(InventoryFilter || (InventoryFilter = {}));
    var InventorySchedule;
    (function (InventorySchedule) {
        InventorySchedule.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(InventorySchedule || (InventorySchedule = {}));
    var InventoryConfiguration;
    (function (InventoryConfiguration) {
        InventoryConfiguration.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Destination && { Destination: InventoryDestination.filterSensitiveLog(obj.Destination) }))); };
    })(InventoryConfiguration || (InventoryConfiguration = {}));
    var GetBucketInventoryConfigurationOutput;
    (function (GetBucketInventoryConfigurationOutput) {
        GetBucketInventoryConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.InventoryConfiguration && {
            InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration),
        }))); };
    })(GetBucketInventoryConfigurationOutput || (GetBucketInventoryConfigurationOutput = {}));
    var GetBucketInventoryConfigurationRequest;
    (function (GetBucketInventoryConfigurationRequest) {
        GetBucketInventoryConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketInventoryConfigurationRequest || (GetBucketInventoryConfigurationRequest = {}));
    var LifecycleExpiration;
    (function (LifecycleExpiration) {
        LifecycleExpiration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(LifecycleExpiration || (LifecycleExpiration = {}));
    var LifecycleRuleAndOperator;
    (function (LifecycleRuleAndOperator) {
        LifecycleRuleAndOperator.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(LifecycleRuleAndOperator || (LifecycleRuleAndOperator = {}));
    var LifecycleRuleFilter;
    (function (LifecycleRuleFilter) {
        LifecycleRuleFilter.visit = function (value, visitor) {
            if (value.Prefix !== undefined)
                return visitor.Prefix(value.Prefix);
            if (value.Tag !== undefined)
                return visitor.Tag(value.Tag);
            if (value.And !== undefined)
                return visitor.And(value.And);
            return visitor._(value.$unknown[0], value.$unknown[1]);
        };
        LifecycleRuleFilter.filterSensitiveLog = function (obj) {
            var _a;
            if (obj.Prefix !== undefined)
                return { Prefix: obj.Prefix };
            if (obj.Tag !== undefined)
                return { Tag: Tag.filterSensitiveLog(obj.Tag) };
            if (obj.And !== undefined)
                return { And: LifecycleRuleAndOperator.filterSensitiveLog(obj.And) };
            if (obj.$unknown !== undefined)
                return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
        };
    })(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
    var NoncurrentVersionExpiration;
    (function (NoncurrentVersionExpiration) {
        NoncurrentVersionExpiration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NoncurrentVersionExpiration || (NoncurrentVersionExpiration = {}));
    var NoncurrentVersionTransition;
    (function (NoncurrentVersionTransition) {
        NoncurrentVersionTransition.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NoncurrentVersionTransition || (NoncurrentVersionTransition = {}));
    var Transition;
    (function (Transition) {
        Transition.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Transition || (Transition = {}));
    var LifecycleRule;
    (function (LifecycleRule) {
        LifecycleRule.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Filter && { Filter: LifecycleRuleFilter.filterSensitiveLog(obj.Filter) }))); };
    })(LifecycleRule || (LifecycleRule = {}));
    var GetBucketLifecycleConfigurationOutput;
    (function (GetBucketLifecycleConfigurationOutput) {
        GetBucketLifecycleConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return LifecycleRule.filterSensitiveLog(item); }) }))); };
    })(GetBucketLifecycleConfigurationOutput || (GetBucketLifecycleConfigurationOutput = {}));
    var GetBucketLifecycleConfigurationRequest;
    (function (GetBucketLifecycleConfigurationRequest) {
        GetBucketLifecycleConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketLifecycleConfigurationRequest || (GetBucketLifecycleConfigurationRequest = {}));
    var GetBucketLocationOutput;
    (function (GetBucketLocationOutput) {
        GetBucketLocationOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketLocationOutput || (GetBucketLocationOutput = {}));
    var GetBucketLocationRequest;
    (function (GetBucketLocationRequest) {
        GetBucketLocationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketLocationRequest || (GetBucketLocationRequest = {}));
    var TargetGrant;
    (function (TargetGrant) {
        TargetGrant.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(TargetGrant || (TargetGrant = {}));
    var LoggingEnabled;
    (function (LoggingEnabled) {
        LoggingEnabled.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(LoggingEnabled || (LoggingEnabled = {}));
    var GetBucketLoggingOutput;
    (function (GetBucketLoggingOutput) {
        GetBucketLoggingOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketLoggingOutput || (GetBucketLoggingOutput = {}));
    var GetBucketLoggingRequest;
    (function (GetBucketLoggingRequest) {
        GetBucketLoggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketLoggingRequest || (GetBucketLoggingRequest = {}));
    var MetricsAndOperator;
    (function (MetricsAndOperator) {
        MetricsAndOperator.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(MetricsAndOperator || (MetricsAndOperator = {}));
    var MetricsFilter;
    (function (MetricsFilter) {
        MetricsFilter.visit = function (value, visitor) {
            if (value.Prefix !== undefined)
                return visitor.Prefix(value.Prefix);
            if (value.Tag !== undefined)
                return visitor.Tag(value.Tag);
            if (value.And !== undefined)
                return visitor.And(value.And);
            return visitor._(value.$unknown[0], value.$unknown[1]);
        };
        MetricsFilter.filterSensitiveLog = function (obj) {
            var _a;
            if (obj.Prefix !== undefined)
                return { Prefix: obj.Prefix };
            if (obj.Tag !== undefined)
                return { Tag: Tag.filterSensitiveLog(obj.Tag) };
            if (obj.And !== undefined)
                return { And: MetricsAndOperator.filterSensitiveLog(obj.And) };
            if (obj.$unknown !== undefined)
                return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
        };
    })(MetricsFilter || (MetricsFilter = {}));
    var MetricsConfiguration;
    (function (MetricsConfiguration) {
        MetricsConfiguration.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Filter && { Filter: MetricsFilter.filterSensitiveLog(obj.Filter) }))); };
    })(MetricsConfiguration || (MetricsConfiguration = {}));
    var GetBucketMetricsConfigurationOutput;
    (function (GetBucketMetricsConfigurationOutput) {
        GetBucketMetricsConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.MetricsConfiguration && {
            MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration),
        }))); };
    })(GetBucketMetricsConfigurationOutput || (GetBucketMetricsConfigurationOutput = {}));
    var GetBucketMetricsConfigurationRequest;
    (function (GetBucketMetricsConfigurationRequest) {
        GetBucketMetricsConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketMetricsConfigurationRequest || (GetBucketMetricsConfigurationRequest = {}));
    var GetBucketNotificationConfigurationRequest;
    (function (GetBucketNotificationConfigurationRequest) {
        GetBucketNotificationConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketNotificationConfigurationRequest || (GetBucketNotificationConfigurationRequest = {}));
    var FilterRule;
    (function (FilterRule) {
        FilterRule.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(FilterRule || (FilterRule = {}));
    var S3KeyFilter;
    (function (S3KeyFilter) {
        S3KeyFilter.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(S3KeyFilter || (S3KeyFilter = {}));
    var NotificationConfigurationFilter;
    (function (NotificationConfigurationFilter) {
        NotificationConfigurationFilter.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NotificationConfigurationFilter || (NotificationConfigurationFilter = {}));
    var LambdaFunctionConfiguration;
    (function (LambdaFunctionConfiguration) {
        LambdaFunctionConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(LambdaFunctionConfiguration || (LambdaFunctionConfiguration = {}));
    var QueueConfiguration;
    (function (QueueConfiguration) {
        QueueConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(QueueConfiguration || (QueueConfiguration = {}));
    var TopicConfiguration;
    (function (TopicConfiguration) {
        TopicConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(TopicConfiguration || (TopicConfiguration = {}));
    var NotificationConfiguration;
    (function (NotificationConfiguration) {
        NotificationConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NotificationConfiguration || (NotificationConfiguration = {}));
    var OwnershipControlsRule;
    (function (OwnershipControlsRule) {
        OwnershipControlsRule.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(OwnershipControlsRule || (OwnershipControlsRule = {}));
    var OwnershipControls;
    (function (OwnershipControls) {
        OwnershipControls.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(OwnershipControls || (OwnershipControls = {}));
    var GetBucketOwnershipControlsOutput;
    (function (GetBucketOwnershipControlsOutput) {
        GetBucketOwnershipControlsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketOwnershipControlsOutput || (GetBucketOwnershipControlsOutput = {}));
    var GetBucketOwnershipControlsRequest;
    (function (GetBucketOwnershipControlsRequest) {
        GetBucketOwnershipControlsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketOwnershipControlsRequest || (GetBucketOwnershipControlsRequest = {}));
    var GetBucketPolicyOutput;
    (function (GetBucketPolicyOutput) {
        GetBucketPolicyOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketPolicyOutput || (GetBucketPolicyOutput = {}));
    var GetBucketPolicyRequest;
    (function (GetBucketPolicyRequest) {
        GetBucketPolicyRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketPolicyRequest || (GetBucketPolicyRequest = {}));
    var PolicyStatus;
    (function (PolicyStatus) {
        PolicyStatus.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PolicyStatus || (PolicyStatus = {}));
    var GetBucketPolicyStatusOutput;
    (function (GetBucketPolicyStatusOutput) {
        GetBucketPolicyStatusOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketPolicyStatusOutput || (GetBucketPolicyStatusOutput = {}));
    var GetBucketPolicyStatusRequest;
    (function (GetBucketPolicyStatusRequest) {
        GetBucketPolicyStatusRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketPolicyStatusRequest || (GetBucketPolicyStatusRequest = {}));
    var DeleteMarkerReplication;
    (function (DeleteMarkerReplication) {
        DeleteMarkerReplication.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteMarkerReplication || (DeleteMarkerReplication = {}));
    var EncryptionConfiguration;
    (function (EncryptionConfiguration) {
        EncryptionConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(EncryptionConfiguration || (EncryptionConfiguration = {}));
    var ReplicationTimeValue;
    (function (ReplicationTimeValue) {
        ReplicationTimeValue.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ReplicationTimeValue || (ReplicationTimeValue = {}));
    var Metrics;
    (function (Metrics) {
        Metrics.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Metrics || (Metrics = {}));
    var ReplicationTime;
    (function (ReplicationTime) {
        ReplicationTime.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ReplicationTime || (ReplicationTime = {}));
    var Destination;
    (function (Destination) {
        Destination.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Destination || (Destination = {}));
    var ExistingObjectReplication;
    (function (ExistingObjectReplication) {
        ExistingObjectReplication.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ExistingObjectReplication || (ExistingObjectReplication = {}));
    var ReplicationRuleAndOperator;
    (function (ReplicationRuleAndOperator) {
        ReplicationRuleAndOperator.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ReplicationRuleAndOperator || (ReplicationRuleAndOperator = {}));
    var ReplicationRuleFilter;
    (function (ReplicationRuleFilter) {
        ReplicationRuleFilter.visit = function (value, visitor) {
            if (value.Prefix !== undefined)
                return visitor.Prefix(value.Prefix);
            if (value.Tag !== undefined)
                return visitor.Tag(value.Tag);
            if (value.And !== undefined)
                return visitor.And(value.And);
            return visitor._(value.$unknown[0], value.$unknown[1]);
        };
        ReplicationRuleFilter.filterSensitiveLog = function (obj) {
            var _a;
            if (obj.Prefix !== undefined)
                return { Prefix: obj.Prefix };
            if (obj.Tag !== undefined)
                return { Tag: Tag.filterSensitiveLog(obj.Tag) };
            if (obj.And !== undefined)
                return { And: ReplicationRuleAndOperator.filterSensitiveLog(obj.And) };
            if (obj.$unknown !== undefined)
                return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
        };
    })(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
    var ReplicaModifications;
    (function (ReplicaModifications) {
        ReplicaModifications.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ReplicaModifications || (ReplicaModifications = {}));
    var SseKmsEncryptedObjects;
    (function (SseKmsEncryptedObjects) {
        SseKmsEncryptedObjects.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(SseKmsEncryptedObjects || (SseKmsEncryptedObjects = {}));
    var SourceSelectionCriteria;
    (function (SourceSelectionCriteria) {
        SourceSelectionCriteria.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(SourceSelectionCriteria || (SourceSelectionCriteria = {}));
    var ReplicationRule;
    (function (ReplicationRule) {
        ReplicationRule.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Filter && { Filter: ReplicationRuleFilter.filterSensitiveLog(obj.Filter) }))); };
    })(ReplicationRule || (ReplicationRule = {}));
    var ReplicationConfiguration;
    (function (ReplicationConfiguration) {
        ReplicationConfiguration.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return ReplicationRule.filterSensitiveLog(item); }) }))); };
    })(ReplicationConfiguration || (ReplicationConfiguration = {}));
    var GetBucketReplicationOutput;
    (function (GetBucketReplicationOutput) {
        GetBucketReplicationOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.ReplicationConfiguration && {
            ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration),
        }))); };
    })(GetBucketReplicationOutput || (GetBucketReplicationOutput = {}));
    var GetBucketReplicationRequest;
    (function (GetBucketReplicationRequest) {
        GetBucketReplicationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketReplicationRequest || (GetBucketReplicationRequest = {}));
    var GetBucketRequestPaymentOutput;
    (function (GetBucketRequestPaymentOutput) {
        GetBucketRequestPaymentOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketRequestPaymentOutput || (GetBucketRequestPaymentOutput = {}));
    var GetBucketRequestPaymentRequest;
    (function (GetBucketRequestPaymentRequest) {
        GetBucketRequestPaymentRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketRequestPaymentRequest || (GetBucketRequestPaymentRequest = {}));
    var GetBucketTaggingOutput;
    (function (GetBucketTaggingOutput) {
        GetBucketTaggingOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketTaggingOutput || (GetBucketTaggingOutput = {}));
    var GetBucketTaggingRequest;
    (function (GetBucketTaggingRequest) {
        GetBucketTaggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketTaggingRequest || (GetBucketTaggingRequest = {}));
    var GetBucketVersioningOutput;
    (function (GetBucketVersioningOutput) {
        GetBucketVersioningOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketVersioningOutput || (GetBucketVersioningOutput = {}));
    var GetBucketVersioningRequest;
    (function (GetBucketVersioningRequest) {
        GetBucketVersioningRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketVersioningRequest || (GetBucketVersioningRequest = {}));
    var ErrorDocument;
    (function (ErrorDocument) {
        ErrorDocument.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ErrorDocument || (ErrorDocument = {}));
    var IndexDocument;
    (function (IndexDocument) {
        IndexDocument.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(IndexDocument || (IndexDocument = {}));
    var RedirectAllRequestsTo;
    (function (RedirectAllRequestsTo) {
        RedirectAllRequestsTo.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(RedirectAllRequestsTo || (RedirectAllRequestsTo = {}));
    var Condition;
    (function (Condition) {
        Condition.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Condition || (Condition = {}));
    var Redirect;
    (function (Redirect) {
        Redirect.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Redirect || (Redirect = {}));
    var RoutingRule;
    (function (RoutingRule) {
        RoutingRule.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(RoutingRule || (RoutingRule = {}));
    var GetBucketWebsiteOutput;
    (function (GetBucketWebsiteOutput) {
        GetBucketWebsiteOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketWebsiteOutput || (GetBucketWebsiteOutput = {}));
    var GetBucketWebsiteRequest;
    (function (GetBucketWebsiteRequest) {
        GetBucketWebsiteRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetBucketWebsiteRequest || (GetBucketWebsiteRequest = {}));
    var GetObjectOutput;
    (function (GetObjectOutput) {
        GetObjectOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
    })(GetObjectOutput || (GetObjectOutput = {}));
    var GetObjectRequest;
    (function (GetObjectRequest) {
        GetObjectRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
    })(GetObjectRequest || (GetObjectRequest = {}));
    var InvalidObjectState;
    (function (InvalidObjectState) {
        InvalidObjectState.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(InvalidObjectState || (InvalidObjectState = {}));
    var NoSuchKey;
    (function (NoSuchKey) {
        NoSuchKey.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NoSuchKey || (NoSuchKey = {}));
    var GetObjectAclOutput;
    (function (GetObjectAclOutput) {
        GetObjectAclOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectAclOutput || (GetObjectAclOutput = {}));
    var GetObjectAclRequest;
    (function (GetObjectAclRequest) {
        GetObjectAclRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectAclRequest || (GetObjectAclRequest = {}));
    var ObjectLockLegalHold;
    (function (ObjectLockLegalHold) {
        ObjectLockLegalHold.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectLockLegalHold || (ObjectLockLegalHold = {}));
    var GetObjectLegalHoldOutput;
    (function (GetObjectLegalHoldOutput) {
        GetObjectLegalHoldOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectLegalHoldOutput || (GetObjectLegalHoldOutput = {}));
    var GetObjectLegalHoldRequest;
    (function (GetObjectLegalHoldRequest) {
        GetObjectLegalHoldRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectLegalHoldRequest || (GetObjectLegalHoldRequest = {}));
    var DefaultRetention;
    (function (DefaultRetention) {
        DefaultRetention.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DefaultRetention || (DefaultRetention = {}));
    var ObjectLockRule;
    (function (ObjectLockRule) {
        ObjectLockRule.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectLockRule || (ObjectLockRule = {}));
    var ObjectLockConfiguration;
    (function (ObjectLockConfiguration) {
        ObjectLockConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectLockConfiguration || (ObjectLockConfiguration = {}));
    var GetObjectLockConfigurationOutput;
    (function (GetObjectLockConfigurationOutput) {
        GetObjectLockConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectLockConfigurationOutput || (GetObjectLockConfigurationOutput = {}));
    var GetObjectLockConfigurationRequest;
    (function (GetObjectLockConfigurationRequest) {
        GetObjectLockConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectLockConfigurationRequest || (GetObjectLockConfigurationRequest = {}));
    var ObjectLockRetention;
    (function (ObjectLockRetention) {
        ObjectLockRetention.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectLockRetention || (ObjectLockRetention = {}));
    var GetObjectRetentionOutput;
    (function (GetObjectRetentionOutput) {
        GetObjectRetentionOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectRetentionOutput || (GetObjectRetentionOutput = {}));
    var GetObjectRetentionRequest;
    (function (GetObjectRetentionRequest) {
        GetObjectRetentionRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectRetentionRequest || (GetObjectRetentionRequest = {}));
    var GetObjectTaggingOutput;
    (function (GetObjectTaggingOutput) {
        GetObjectTaggingOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectTaggingOutput || (GetObjectTaggingOutput = {}));
    var GetObjectTaggingRequest;
    (function (GetObjectTaggingRequest) {
        GetObjectTaggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectTaggingRequest || (GetObjectTaggingRequest = {}));
    var GetObjectTorrentOutput;
    (function (GetObjectTorrentOutput) {
        GetObjectTorrentOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectTorrentOutput || (GetObjectTorrentOutput = {}));
    var GetObjectTorrentRequest;
    (function (GetObjectTorrentRequest) {
        GetObjectTorrentRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetObjectTorrentRequest || (GetObjectTorrentRequest = {}));
    var PublicAccessBlockConfiguration;
    (function (PublicAccessBlockConfiguration) {
        PublicAccessBlockConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PublicAccessBlockConfiguration || (PublicAccessBlockConfiguration = {}));
    var GetPublicAccessBlockOutput;
    (function (GetPublicAccessBlockOutput) {
        GetPublicAccessBlockOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetPublicAccessBlockOutput || (GetPublicAccessBlockOutput = {}));
    var GetPublicAccessBlockRequest;
    (function (GetPublicAccessBlockRequest) {
        GetPublicAccessBlockRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GetPublicAccessBlockRequest || (GetPublicAccessBlockRequest = {}));
    var HeadBucketRequest;
    (function (HeadBucketRequest) {
        HeadBucketRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(HeadBucketRequest || (HeadBucketRequest = {}));
    var NoSuchBucket;
    (function (NoSuchBucket) {
        NoSuchBucket.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(NoSuchBucket || (NoSuchBucket = {}));
    var HeadObjectOutput;
    (function (HeadObjectOutput) {
        HeadObjectOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
    })(HeadObjectOutput || (HeadObjectOutput = {}));
    var HeadObjectRequest;
    (function (HeadObjectRequest) {
        HeadObjectRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
    })(HeadObjectRequest || (HeadObjectRequest = {}));
    var ListBucketAnalyticsConfigurationsOutput;
    (function (ListBucketAnalyticsConfigurationsOutput) {
        ListBucketAnalyticsConfigurationsOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.AnalyticsConfigurationList && {
            AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map(function (item) {
                return AnalyticsConfiguration.filterSensitiveLog(item);
            }),
        }))); };
    })(ListBucketAnalyticsConfigurationsOutput || (ListBucketAnalyticsConfigurationsOutput = {}));
    var ListBucketAnalyticsConfigurationsRequest;
    (function (ListBucketAnalyticsConfigurationsRequest) {
        ListBucketAnalyticsConfigurationsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListBucketAnalyticsConfigurationsRequest || (ListBucketAnalyticsConfigurationsRequest = {}));
    var ListBucketIntelligentTieringConfigurationsOutput;
    (function (ListBucketIntelligentTieringConfigurationsOutput) {
        ListBucketIntelligentTieringConfigurationsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListBucketIntelligentTieringConfigurationsOutput || (ListBucketIntelligentTieringConfigurationsOutput = {}));
    var ListBucketIntelligentTieringConfigurationsRequest;
    (function (ListBucketIntelligentTieringConfigurationsRequest) {
        ListBucketIntelligentTieringConfigurationsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListBucketIntelligentTieringConfigurationsRequest || (ListBucketIntelligentTieringConfigurationsRequest = {}));
    var ListBucketInventoryConfigurationsOutput;
    (function (ListBucketInventoryConfigurationsOutput) {
        ListBucketInventoryConfigurationsOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.InventoryConfigurationList && {
            InventoryConfigurationList: obj.InventoryConfigurationList.map(function (item) {
                return InventoryConfiguration.filterSensitiveLog(item);
            }),
        }))); };
    })(ListBucketInventoryConfigurationsOutput || (ListBucketInventoryConfigurationsOutput = {}));
    var ListBucketInventoryConfigurationsRequest;
    (function (ListBucketInventoryConfigurationsRequest) {
        ListBucketInventoryConfigurationsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListBucketInventoryConfigurationsRequest || (ListBucketInventoryConfigurationsRequest = {}));
    var ListBucketMetricsConfigurationsOutput;
    (function (ListBucketMetricsConfigurationsOutput) {
        ListBucketMetricsConfigurationsOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.MetricsConfigurationList && {
            MetricsConfigurationList: obj.MetricsConfigurationList.map(function (item) {
                return MetricsConfiguration.filterSensitiveLog(item);
            }),
        }))); };
    })(ListBucketMetricsConfigurationsOutput || (ListBucketMetricsConfigurationsOutput = {}));
    var ListBucketMetricsConfigurationsRequest;
    (function (ListBucketMetricsConfigurationsRequest) {
        ListBucketMetricsConfigurationsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListBucketMetricsConfigurationsRequest || (ListBucketMetricsConfigurationsRequest = {}));
    var Bucket;
    (function (Bucket) {
        Bucket.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Bucket || (Bucket = {}));
    var ListBucketsOutput;
    (function (ListBucketsOutput) {
        ListBucketsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListBucketsOutput || (ListBucketsOutput = {}));
    var CommonPrefix;
    (function (CommonPrefix) {
        CommonPrefix.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CommonPrefix || (CommonPrefix = {}));
    var Initiator;
    (function (Initiator) {
        Initiator.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Initiator || (Initiator = {}));
    var MultipartUpload;
    (function (MultipartUpload) {
        MultipartUpload.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(MultipartUpload || (MultipartUpload = {}));
    var ListMultipartUploadsOutput;
    (function (ListMultipartUploadsOutput) {
        ListMultipartUploadsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListMultipartUploadsOutput || (ListMultipartUploadsOutput = {}));
    var ListMultipartUploadsRequest;
    (function (ListMultipartUploadsRequest) {
        ListMultipartUploadsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListMultipartUploadsRequest || (ListMultipartUploadsRequest = {}));
    var _Object;
    (function (_Object) {
        _Object.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(_Object || (_Object = {}));
    var ListObjectsOutput;
    (function (ListObjectsOutput) {
        ListObjectsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListObjectsOutput || (ListObjectsOutput = {}));
    var ListObjectsRequest;
    (function (ListObjectsRequest) {
        ListObjectsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListObjectsRequest || (ListObjectsRequest = {}));
    var ListObjectsV2Output;
    (function (ListObjectsV2Output) {
        ListObjectsV2Output.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListObjectsV2Output || (ListObjectsV2Output = {}));
    var ListObjectsV2Request;
    (function (ListObjectsV2Request) {
        ListObjectsV2Request.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListObjectsV2Request || (ListObjectsV2Request = {}));
    var DeleteMarkerEntry;
    (function (DeleteMarkerEntry) {
        DeleteMarkerEntry.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(DeleteMarkerEntry || (DeleteMarkerEntry = {}));
    var ObjectVersion;
    (function (ObjectVersion) {
        ObjectVersion.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectVersion || (ObjectVersion = {}));
    var ListObjectVersionsOutput;
    (function (ListObjectVersionsOutput) {
        ListObjectVersionsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListObjectVersionsOutput || (ListObjectVersionsOutput = {}));
    var ListObjectVersionsRequest;
    (function (ListObjectVersionsRequest) {
        ListObjectVersionsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListObjectVersionsRequest || (ListObjectVersionsRequest = {}));
    var Part;
    (function (Part) {
        Part.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Part || (Part = {}));
    var ListPartsOutput;
    (function (ListPartsOutput) {
        ListPartsOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListPartsOutput || (ListPartsOutput = {}));
    var ListPartsRequest;
    (function (ListPartsRequest) {
        ListPartsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ListPartsRequest || (ListPartsRequest = {}));
    var PutBucketAccelerateConfigurationRequest;
    (function (PutBucketAccelerateConfigurationRequest) {
        PutBucketAccelerateConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketAccelerateConfigurationRequest || (PutBucketAccelerateConfigurationRequest = {}));
    var PutBucketAclRequest;
    (function (PutBucketAclRequest) {
        PutBucketAclRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketAclRequest || (PutBucketAclRequest = {}));
    var PutBucketAnalyticsConfigurationRequest;
    (function (PutBucketAnalyticsConfigurationRequest) {
        PutBucketAnalyticsConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.AnalyticsConfiguration && {
            AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration),
        }))); };
    })(PutBucketAnalyticsConfigurationRequest || (PutBucketAnalyticsConfigurationRequest = {}));
    var CORSConfiguration;
    (function (CORSConfiguration) {
        CORSConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CORSConfiguration || (CORSConfiguration = {}));
    var PutBucketCorsRequest;
    (function (PutBucketCorsRequest) {
        PutBucketCorsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketCorsRequest || (PutBucketCorsRequest = {}));
    var PutBucketEncryptionRequest;
    (function (PutBucketEncryptionRequest) {
        PutBucketEncryptionRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.ServerSideEncryptionConfiguration && {
            ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration),
        }))); };
    })(PutBucketEncryptionRequest || (PutBucketEncryptionRequest = {}));
    var PutBucketIntelligentTieringConfigurationRequest;
    (function (PutBucketIntelligentTieringConfigurationRequest) {
        PutBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketIntelligentTieringConfigurationRequest || (PutBucketIntelligentTieringConfigurationRequest = {}));
    var PutBucketInventoryConfigurationRequest;
    (function (PutBucketInventoryConfigurationRequest) {
        PutBucketInventoryConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.InventoryConfiguration && {
            InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration),
        }))); };
    })(PutBucketInventoryConfigurationRequest || (PutBucketInventoryConfigurationRequest = {}));
    var BucketLifecycleConfiguration;
    (function (BucketLifecycleConfiguration) {
        BucketLifecycleConfiguration.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return LifecycleRule.filterSensitiveLog(item); }) }))); };
    })(BucketLifecycleConfiguration || (BucketLifecycleConfiguration = {}));
    var PutBucketLifecycleConfigurationRequest;
    (function (PutBucketLifecycleConfigurationRequest) {
        PutBucketLifecycleConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.LifecycleConfiguration && {
            LifecycleConfiguration: BucketLifecycleConfiguration.filterSensitiveLog(obj.LifecycleConfiguration),
        }))); };
    })(PutBucketLifecycleConfigurationRequest || (PutBucketLifecycleConfigurationRequest = {}));
    var BucketLoggingStatus;
    (function (BucketLoggingStatus) {
        BucketLoggingStatus.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(BucketLoggingStatus || (BucketLoggingStatus = {}));
    var PutBucketLoggingRequest;
    (function (PutBucketLoggingRequest) {
        PutBucketLoggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketLoggingRequest || (PutBucketLoggingRequest = {}));
    var PutBucketMetricsConfigurationRequest;
    (function (PutBucketMetricsConfigurationRequest) {
        PutBucketMetricsConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.MetricsConfiguration && {
            MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration),
        }))); };
    })(PutBucketMetricsConfigurationRequest || (PutBucketMetricsConfigurationRequest = {}));
    var PutBucketNotificationConfigurationRequest;
    (function (PutBucketNotificationConfigurationRequest) {
        PutBucketNotificationConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketNotificationConfigurationRequest || (PutBucketNotificationConfigurationRequest = {}));
    var PutBucketOwnershipControlsRequest;
    (function (PutBucketOwnershipControlsRequest) {
        PutBucketOwnershipControlsRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketOwnershipControlsRequest || (PutBucketOwnershipControlsRequest = {}));
    var PutBucketPolicyRequest;
    (function (PutBucketPolicyRequest) {
        PutBucketPolicyRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketPolicyRequest || (PutBucketPolicyRequest = {}));
    var PutBucketReplicationRequest;
    (function (PutBucketReplicationRequest) {
        PutBucketReplicationRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.ReplicationConfiguration && {
            ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration),
        }))); };
    })(PutBucketReplicationRequest || (PutBucketReplicationRequest = {}));
    var RequestPaymentConfiguration;
    (function (RequestPaymentConfiguration) {
        RequestPaymentConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(RequestPaymentConfiguration || (RequestPaymentConfiguration = {}));
    var PutBucketRequestPaymentRequest;
    (function (PutBucketRequestPaymentRequest) {
        PutBucketRequestPaymentRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketRequestPaymentRequest || (PutBucketRequestPaymentRequest = {}));
    var Tagging;
    (function (Tagging) {
        Tagging.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Tagging || (Tagging = {}));
    var PutBucketTaggingRequest;
    (function (PutBucketTaggingRequest) {
        PutBucketTaggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketTaggingRequest || (PutBucketTaggingRequest = {}));
    var VersioningConfiguration;
    (function (VersioningConfiguration) {
        VersioningConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(VersioningConfiguration || (VersioningConfiguration = {}));
    var PutBucketVersioningRequest;
    (function (PutBucketVersioningRequest) {
        PutBucketVersioningRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketVersioningRequest || (PutBucketVersioningRequest = {}));
    var WebsiteConfiguration;
    (function (WebsiteConfiguration) {
        WebsiteConfiguration.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(WebsiteConfiguration || (WebsiteConfiguration = {}));
    var PutBucketWebsiteRequest;
    (function (PutBucketWebsiteRequest) {
        PutBucketWebsiteRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutBucketWebsiteRequest || (PutBucketWebsiteRequest = {}));
    var PutObjectOutput;
    (function (PutObjectOutput) {
        PutObjectOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
    })(PutObjectOutput || (PutObjectOutput = {}));
    var PutObjectRequest;
    (function (PutObjectRequest) {
        PutObjectRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
    })(PutObjectRequest || (PutObjectRequest = {}));
    var PutObjectAclOutput;
    (function (PutObjectAclOutput) {
        PutObjectAclOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectAclOutput || (PutObjectAclOutput = {}));
    var PutObjectAclRequest;
    (function (PutObjectAclRequest) {
        PutObjectAclRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectAclRequest || (PutObjectAclRequest = {}));
    var PutObjectLegalHoldOutput;
    (function (PutObjectLegalHoldOutput) {
        PutObjectLegalHoldOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectLegalHoldOutput || (PutObjectLegalHoldOutput = {}));
    var PutObjectLegalHoldRequest;
    (function (PutObjectLegalHoldRequest) {
        PutObjectLegalHoldRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectLegalHoldRequest || (PutObjectLegalHoldRequest = {}));
    var PutObjectLockConfigurationOutput;
    (function (PutObjectLockConfigurationOutput) {
        PutObjectLockConfigurationOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectLockConfigurationOutput || (PutObjectLockConfigurationOutput = {}));
    var PutObjectLockConfigurationRequest;
    (function (PutObjectLockConfigurationRequest) {
        PutObjectLockConfigurationRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectLockConfigurationRequest || (PutObjectLockConfigurationRequest = {}));
    var PutObjectRetentionOutput;
    (function (PutObjectRetentionOutput) {
        PutObjectRetentionOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectRetentionOutput || (PutObjectRetentionOutput = {}));
    var PutObjectRetentionRequest;
    (function (PutObjectRetentionRequest) {
        PutObjectRetentionRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectRetentionRequest || (PutObjectRetentionRequest = {}));
    var PutObjectTaggingOutput;
    (function (PutObjectTaggingOutput) {
        PutObjectTaggingOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectTaggingOutput || (PutObjectTaggingOutput = {}));
    var PutObjectTaggingRequest;
    (function (PutObjectTaggingRequest) {
        PutObjectTaggingRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutObjectTaggingRequest || (PutObjectTaggingRequest = {}));
    var PutPublicAccessBlockRequest;
    (function (PutPublicAccessBlockRequest) {
        PutPublicAccessBlockRequest.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(PutPublicAccessBlockRequest || (PutPublicAccessBlockRequest = {}));
    var ObjectAlreadyInActiveTierError;
    (function (ObjectAlreadyInActiveTierError) {
        ObjectAlreadyInActiveTierError.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ObjectAlreadyInActiveTierError || (ObjectAlreadyInActiveTierError = {}));
    var RestoreObjectOutput;
    (function (RestoreObjectOutput) {
        RestoreObjectOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(RestoreObjectOutput || (RestoreObjectOutput = {}));
    var GlacierJobParameters;
    (function (GlacierJobParameters) {
        GlacierJobParameters.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(GlacierJobParameters || (GlacierJobParameters = {}));
    var Encryption;
    (function (Encryption) {
        Encryption.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING }))); };
    })(Encryption || (Encryption = {}));

    /**
     * Escapes characters that can not be in an XML attribute.
     */
    function escapeAttribute(value) {
        return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    }

    /**
     * Represents an XML node.
     */
    var XmlNode = /** @class */ (function () {
        function XmlNode(name, children) {
            if (children === void 0) { children = []; }
            this.name = name;
            this.children = children;
            this.attributes = {};
        }
        XmlNode.prototype.withName = function (name) {
            this.name = name;
            return this;
        };
        XmlNode.prototype.addAttribute = function (name, value) {
            this.attributes[name] = value;
            return this;
        };
        XmlNode.prototype.addChildNode = function (child) {
            this.children.push(child);
            return this;
        };
        XmlNode.prototype.removeAttribute = function (name) {
            delete this.attributes[name];
            return this;
        };
        XmlNode.prototype.toString = function () {
            var e_1, _a;
            var hasChildren = Boolean(this.children.length);
            var xmlText = "<" + this.name;
            // add attributes
            var attributes = this.attributes;
            try {
                for (var _b = __values$1(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var attributeName = _c.value;
                    var attribute = attributes[attributeName];
                    if (typeof attribute !== "undefined" && attribute !== null) {
                        xmlText += " " + attributeName + "=\"" + escapeAttribute("" + attribute) + "\"";
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return (xmlText += !hasChildren ? "/>" : ">" + this.children.map(function (c) { return c.toString(); }).join("") + "</" + this.name + ">");
        };
        return XmlNode;
    }());

    /**
     * Escapes characters that can not be in an XML element.
     */
    function escapeElement(value) {
        return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }

    /**
     * Represents an XML text value.
     */
    var XmlText = /** @class */ (function () {
        function XmlText(value) {
            this.value = value;
        }
        XmlText.prototype.toString = function () {
            return escapeElement("" + this.value);
        };
        return XmlText;
    }());

    var util = createCommonjsModule(function (module, exports) {

    const nameStartChar = ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    const nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';
    const regexName = new RegExp('^' + nameRegexp + '$');

    const getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };

    const isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === 'undefined');
    };

    exports.isExist = function(v) {
      return typeof v !== 'undefined';
    };

    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };

    /**
     * Copy all the properties of a into b.
     * @param {*} target
     * @param {*} a
     */
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a); // will return an array of own properties
        const len = keys.length; //don't make it inline
        for (let i = 0; i < len; i++) {
          if (arrayMode === 'strict') {
            target[keys[i]] = [ a[keys[i]] ];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    /* exports.merge =function (b,a){
      return Object.assign(b,a);
    } */

    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return '';
      }
    };

    // const fakeCall = function(a) {return a;};
    // const fakeCallNoReturn = function() {};

    exports.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions; //if there are not options
      }

      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== undefined) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };

    /**
     * Check if a tag name should be treated as array
     *
     * @param tagName the node tagname
     * @param arrayMode the array mode option
     * @param parentTagName the parent tag name
     * @returns {boolean} true if node should be parsed as array
     */
    exports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === 'function') {
        return !!arrayMode(tagName, parentTagName);
      }

      return arrayMode === "strict";
    };

    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
    });

    const convertToJson = function(node, options, parentTagName) {
      const jObj = {};

      // when no child node or attr is present
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : '';
      }

      // otherwise create a textnode if node has some text
      if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }

      util.merge(jObj, node.attrsMap, options.arrayMode);

      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }

      //add value
      return jObj;
    };

    var convertToJson_1 = convertToJson;

    var node2json = {
    	convertToJson: convertToJson_1
    };

    var xmlNode = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {}; //child tags
      this.attrsMap = {}; //attributes map
      this.val = val; //text only
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          //already presents
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };

    const buildOptions$3 = util.buildOptions;

    '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'
      .replace(/NAME/g, util.nameRegexp);

    //const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
    //const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");

    //polyfill
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }

    const defaultOptions$2 = {
      attributeNamePrefix: '@_',
      attrNodeName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false, //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true, //Trim string values of tag and attributes
      cdataTagName: false,
      cdataPositionChar: '\\c',
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
      //decodeStrict: false,
    };

    var defaultOptions_1 = defaultOptions$2;

    const props$2 = [
      'attributeNamePrefix',
      'attrNodeName',
      'textNodeName',
      'ignoreAttributes',
      'ignoreNameSpace',
      'allowBooleanAttributes',
      'parseNodeValue',
      'parseAttributeValue',
      'arrayMode',
      'trimValues',
      'cdataTagName',
      'cdataPositionChar',
      'tagValueProcessor',
      'attrValueProcessor',
      'parseTrueNumberOnly',
      'stopNodes'
    ];
    var props_1 = props$2;

    /**
     * Trim -> valueProcessor -> parse value
     * @param {string} tagName
     * @param {string} val
     * @param {object} options
     */
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }

      return val;
    }

    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(':');
        const prefix = tagname.charAt(0) === '/' ? '/' : '';
        if (tags[0] === 'xmlns') {
          return '';
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }

    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === 'string') {
        let parsed;
        if (val.trim() === '' || isNaN(val)) {
          parsed = val === 'true' ? true : val === 'false' ? false : val;
        } else {
          if (val.indexOf('0x') !== -1) {
            //support hexa decimal
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf('.') !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, "");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return '';
        }
      }
    }

    //TODO: change regex to capture NS
    //const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
    const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])(.*?)\\3)?', 'g');

    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === 'string') {
        attrStr = attrStr.replace(/\r?\n/g, ' ');
        //attrStr = attrStr || attrStr.trim();

        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length; //don't make it inline
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== undefined) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(
                matches[i][4],
                options.parseAttributeValue,
                options.parseTrueNumberOnly
              );
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }

    const getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      options = buildOptions$3(options, defaultOptions$2, props$2);
      const xmlObj = new xmlNode('!xml');
      let currentNode = xmlObj;
      let textData = "";

    //function match(xmlData){
      for(let i=0; i< xmlData.length; i++){
        const ch = xmlData[i];
        if(ch === '<'){
          if( xmlData[i+1] === '/') {//Closing Tag
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i+2,closeIndex).trim();

            if(options.ignoreNameSpace){
              const colonIndex = tagName.indexOf(":");
              if(colonIndex !== -1){
                tagName = tagName.substr(colonIndex+1);
              }
            }

            /* if (currentNode.parent) {
              currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);
            } */
            if(currentNode){
              if(currentNode.val){
                currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);
              }else {
                currentNode.val = processTagValue(tagName, textData , options);
              }
            }

            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {};}
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = "";
            i = closeIndex;
          } else if( xmlData[i+1] === '?') {
            i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
          } else if(xmlData.substr(i + 1, 3) === '!--') {
            i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
          } else if( xmlData.substr(i + 1, 2) === '!D') {
            const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
            const tagExp = xmlData.substring(i, closeIndex);
            if(tagExp.indexOf("[") >= 0){
              i = xmlData.indexOf("]>", i) + 1;
            }else {
              i = closeIndex;
            }
          }else if(xmlData.substr(i + 1, 2) === '![') {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9,closeIndex);

            //considerations
            //1. CDATA will always have parent node
            //2. A tag with CDATA is not a leaf node so it's value would be string type.
            if(textData){
              currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);
              textData = "";
            }

            if (options.cdataTagName) {
              //add cdata node
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              //for backtracking
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              //add rest value to parent node
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || '') + (tagExp || '');
            }

            i = closeIndex + 2;
          }else {//Opening tag
            const result = closingIndexForOpeningTag(xmlData, i+1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(" ");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if(separatorIndex !== -1){
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
              tagExp = tagExp.substr(separatorIndex + 1);
            }

            if(options.ignoreNameSpace){
              const colonIndex = tagName.indexOf(":");
              if(colonIndex !== -1){
                tagName = tagName.substr(colonIndex+1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }

            //save text to parent node
            if (currentNode && textData) {
              if(currentNode.tagname !== '!xml'){
                currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);
              }
            }

            if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){//selfClosing tag

              if(tagName[tagName.length - 1] === "/"){ //remove trailing '/'
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              }else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }

              const childNode = new xmlNode(tagName, currentNode, '');
              if(tagName !== tagExp){
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            }else {//opening tag

              const childNode = new xmlNode( tagName, currentNode );
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex=closeIndex;
              }
              if(tagName !== tagExp && shouldBuildAttributesMap){
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        }else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };

    function closingIndexForOpeningTag(data, i){
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
            if (ch === attrBoundary) attrBoundary = "";//reset
        } else if (ch === '"' || ch === "'") {
            attrBoundary = ch;
        } else if (ch === '>') {
            return {
              data: tagExp,
              index: index
            }
        } else if (ch === '\t') {
          ch = " ";
        }
        tagExp += ch;
      }
    }

    function findClosingIndex(xmlData, str, i, errMsg){
      const closingIndex = xmlData.indexOf(str, i);
      if(closingIndex === -1){
        throw new Error(errMsg)
      }else {
        return closingIndex + str.length - 1;
      }
    }

    var getTraversalObj_1 = getTraversalObj;

    var xmlstr2xmlnode = {
    	defaultOptions: defaultOptions_1,
    	props: props_1,
    	getTraversalObj: getTraversalObj_1
    };

    const defaultOptions$1 = {
      allowBooleanAttributes: false, //A tag can have attributes without any value
    };

    const props$1 = ['allowBooleanAttributes'];

    //const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
    var validate = function (xmlData, options) {
      options = util.buildOptions(options, defaultOptions$1, props$1);

      //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
      //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
      //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
      const tags = [];
      let tagFound = false;

      //indicates that the root tag has been closed (aka. depth 0 has been reached)
      let reachedRoot = false;

      if (xmlData[0] === '\ufeff') {
        // check for byte order mark (BOM)
        xmlData = xmlData.substr(1);
      }

      for (let i = 0; i < xmlData.length; i++) {

        if (xmlData[i] === '<' && xmlData[i+1] === '?') {
          i+=2;
          i = readPI(xmlData,i);
          if (i.err) return i;
        }else if (xmlData[i] === '<') {
          //starting of tag
          //read until you reach to '>' avoiding any '>' in attribute value

          i++;
          
          if (xmlData[i] === '!') {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === '/') {
              //closing tag
              closingTag = true;
              i++;
            }
            //read tagname
            let tagName = '';
            for (; i < xmlData.length &&
              xmlData[i] !== '>' &&
              xmlData[i] !== ' ' &&
              xmlData[i] !== '\t' &&
              xmlData[i] !== '\n' &&
              xmlData[i] !== '\r'; i++
            ) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            //console.log(tagName);

            if (tagName[tagName.length - 1] === '/') {
              //self closing tag without attributes
              tagName = tagName.substring(0, tagName.length - 1);
              //continue;
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '"+tagName+"' is an invalid name.";
              }
              return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
            }

            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject('InvalidAttr', "Attributes for '"+tagName+"' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;

            if (attrStr[attrStr.length - 1] === '/') {
              //self closing tag
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
                //continue; //text may presents after self closing tag
              } else {
                //the result from the nested function returns the position of the error within the attribute
                //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                //this gives us the absolute index in the entire xml, which we can use to find the line at last
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject('InvalidTag', "Closing tag '"+otg+"' is expected inplace of '"+tagName+"'.", getLineNumberForPosition(xmlData, i));
                }

                //when there are no more tags, we reached the root level.
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                //the result from the nested function returns the position of the error within the attribute
                //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                //this gives us the absolute index in the entire xml, which we can use to find the line at last
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }

              //if the root level has been reached before ...
              if (reachedRoot === true) {
                return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }

            //skip tag text value
            //It may include comments and CDATA value
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === '<') {
                if (xmlData[i + 1] === '!') {
                  //comment or CADATA
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i+1] === '?') {
                  i = readPI(xmlData, ++i);
                  if (i.err) return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === '&') {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject('InvalidChar', "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            } //end of reading tag text value
            if (xmlData[i] === '<') {
              i--;
            }
          }
        } else {
          if (xmlData[i] === ' ' || xmlData[i] === '\t' || xmlData[i] === '\n' || xmlData[i] === '\r') {
            continue;
          }
          return getErrorObject('InvalidChar', "char '"+xmlData[i]+"' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }

      if (!tagFound) {
        return getErrorObject('InvalidXml', 'Start tag expected.', 1);
      } else if (tags.length > 0) {
        return getErrorObject('InvalidXml', "Invalid '"+JSON.stringify(tags, null, 4).replace(/\r?\n/g, '')+"' found.", 1);
      }

      return true;
    };

    /**
     * Read Processing insstructions and skip
     * @param {*} xmlData
     * @param {*} i
     */
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == '?' || xmlData[i] == ' ') {
          //tagname
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === 'xml') {
            return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
            //check if valid attribut string
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }

    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
        //comment
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
            i += 2;
            break;
          }
        }
      } else if (
        xmlData.length > i + 8 &&
        xmlData[i + 1] === 'D' &&
        xmlData[i + 2] === 'O' &&
        xmlData[i + 3] === 'C' &&
        xmlData[i + 4] === 'T' &&
        xmlData[i + 5] === 'Y' &&
        xmlData[i + 6] === 'P' &&
        xmlData[i + 7] === 'E'
      ) {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            angleBracketsCount++;
          } else if (xmlData[i] === '>') {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (
        xmlData.length > i + 9 &&
        xmlData[i + 1] === '[' &&
        xmlData[i + 2] === 'C' &&
        xmlData[i + 3] === 'D' &&
        xmlData[i + 4] === 'A' &&
        xmlData[i + 5] === 'T' &&
        xmlData[i + 6] === 'A' &&
        xmlData[i + 7] === '['
      ) {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
            i += 2;
            break;
          }
        }
      }

      return i;
    }

    var doubleQuote = '"';
    var singleQuote = "'";

    /**
     * Keep reading xmlData until '<' is found outside the attribute value.
     * @param {string} xmlData
     * @param {number} i
     */
    function readAttributeStr(xmlData, i) {
      let attrStr = '';
      let startChar = '';
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === '') {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa
            continue;
          } else {
            startChar = '';
          }
        } else if (xmlData[i] === '>') {
          if (startChar === '') {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== '') {
        return false;
      }

      return {
        value: attrStr,
        index: i,
        tagClosed: tagClosed
      };
    }

    /**
     * Select all the attributes whether valid or invalid.
     */
    const validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', 'g');

    //attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""

    function validateAttributeString(attrStr, options) {
      //console.log("start:"+attrStr+":end");

      //if(attrStr.trim().length === 0) return true; //empty string

      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};

      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          //nospace before attribute name: a="sd"b="saf"
          return getErrorObject('InvalidAttr', "Attribute '"+matches[i][2]+"' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]))
        } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
          //independent attribute: ab
          return getErrorObject('InvalidAttr', "boolean attribute '"+matches[i][2]+"' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        /* else if(matches[i][6] === undefined){//attribute without value: ab=
                        return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                    } */
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          //check for duplicate attribute.
          attrNames[attrName] = 1;
        } else {
          return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }

      return true;
    }

    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === 'x') {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ';')
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }

    function validateAmpersand(xmlData, i) {
      // https://www.w3.org/TR/xml/#dt-charref
      i++;
      if (xmlData[i] === ';')
        return -1;
      if (xmlData[i] === '#') {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ';')
          break;
        return -1;
      }
      return i;
    }

    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code: code,
          msg: message,
          line: lineNumber,
        },
      };
    }

    function validateAttrName(attrName) {
      return util.isName(attrName);
    }

    // const startsWithXML = /^xml/i;

    function validateTagName(tagname) {
      return util.isName(tagname) /* && !tagname.match(startsWithXML) */;
    }

    //this function returns the line number for the character at the given index
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }

    //this function returns the position of the last character of match within attrStr
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }

    var validator = {
    	validate: validate
    };

    const char = function(a) {
      return String.fromCharCode(a);
    };

    const chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),

      emptyChar: char(178),
      emptyValue: char(177), //empty Premitive

      boundryChar: char(179),

      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185),
    };

    const charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart,
    ];

    const _e$1 = function(node, e_schema, options) {
      if (typeof e_schema === 'string') {
        //premitive
        if (node && node[0] && node[0].val !== undefined) {
          return getValue(node[0].val);
        } else {
          return getValue(node);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = '';
          if (Array.isArray(e_schema)) {
            //attributes can't be repeated. hence check in children tags only
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            //var itemSchemaType = itemSchema;
            const arr_len = node.length;

            if (typeof itemSchema === 'string') {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e$1(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd; //indicates that next item is not array item
          } else {
            //object
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              //a property defined in schema can be present either in attrsMap or children tags
              //options.textNodeName will not present in both maps, take it's value from val
              //options.attrNodeName will be present in attrsMap
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e$1(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e$1(node.val, e_schema[key], options);
              } else {
                r = _e$1(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };

    const getValue = function(a /*, type*/) {
      switch (a) {
        case undefined:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case '':
          return chars.emptyValue;
        default:
          return a;
      }
    };

    const processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };

    const isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };

    function hasData(jObj) {
      if (jObj === undefined) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (
        jObj.child &&
        Object.keys(jObj.child).length === 0 &&
        (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)
      ) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }


    const buildOptions$2 = util.buildOptions;

    const convert2nimn = function(node, e_schema, options) {
      options = buildOptions$2(options, xmlstr2xmlnode.defaultOptions, xmlstr2xmlnode.props);
      return _e$1(node, e_schema, options);
    };

    var convert2nimn_1 = convert2nimn;

    var nimndata = {
    	convert2nimn: convert2nimn_1
    };

    const buildOptions$1 = util.buildOptions;


    //TODO: do it later
    const convertToJsonString = function(node, options) {
      options = buildOptions$1(options, xmlstr2xmlnode.defaultOptions, xmlstr2xmlnode.props);

      options.indentBy = options.indentBy || '';
      return _cToJsonStr(node, options);
    };

    const _cToJsonStr = function(node, options, level) {
      let jObj = '{';

      //traver through all the children
      const keys = Object.keys(node.child);

      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';
          }
          jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';
        }
      }
      util.merge(jObj, node.attrsMap);
      //add attrsMap as new children
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : '';
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      //add value
      if (jObj[jObj.length - 1] === ',') {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + '}';
    };

    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }

    var convertToJsonString_1 = convertToJsonString;

    var node2json_str = {
    	convertToJsonString: convertToJsonString_1
    };

    //parse Empty Node as self closing node
    const buildOptions = util.buildOptions;

    const defaultOptions = {
      attributeNamePrefix: '@_',
      attrNodeName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: '\\c',
      format: false,
      indentBy: '  ',
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      },
    };

    const props = [
      'attributeNamePrefix',
      'attrNodeName',
      'textNodeName',
      'ignoreAttributes',
      'cdataTagName',
      'cdataPositionChar',
      'format',
      'indentBy',
      'supressEmptyNode',
      'tagValueProcessor',
      'attrValueProcessor',
    ];

    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function(/*a*/) {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function(/*a*/) {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;

      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = '>\n';
        this.newLine = '\n';
      } else {
        this.indentate = function() {
          return '';
        };
        this.tagEndChar = '>';
        this.newLine = '';
      }

      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }

      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }

    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };

    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = '';
      let val = '';
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === 'undefined') ; else if (jObj[key] === null) {
          val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, '', level);
        } else if (typeof jObj[key] !== 'object') {
          //premitive type
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += ' ' + attr + '="' + this.options.attrValueProcessor('' + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr('', jObj[key]);
            }
          } else {
            //tag value
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) ; else {
                val += this.options.tagValueProcessor('' + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, '', level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          //repeated nodes
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr('', jObj[key]);
            }
          } else {
            //nested nodes
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === 'undefined') ; else if (item === null) {
                val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
              } else if (typeof item === 'object') {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, '', level);
              }
            }
          }
        } else {
          //nested node
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += ' ' + Ks[j] + '="' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return {attrStr: attrStr, val: val};
    };

    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor('' + str);
      if (this.options.cdataPositionChar === '' || str === '') {
        return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);
      }
    }

    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor('' + str);
      if (this.options.cdataPositionChar === '' || str === '') {
        return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');
        }
        return str + this.newLine;
      }
    }

    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes('<')) {
        return (
          this.indentate(level) +
          '<' +
          key +
          attrStr +
          '>' +
          val +
          //+ this.newLine
          // + this.indentate(level)
          '</' +
          key +
          this.tagEndChar
        );
      } else {
        return (
          this.indentate(level) +
          '<' +
          key +
          attrStr +
          this.tagEndChar +
          val +
          //+ this.newLine
          this.indentate(level) +
          '</' +
          key +
          this.tagEndChar
        );
      }
    }

    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== '') {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
        //+ this.newLine
      }
    }

    function buildTextValNode(val, key, attrStr, level) {
      return (
        this.indentate(level) +
        '<' +
        key +
        attrStr +
        '>' +
        this.options.tagValueProcessor(val) +
        '</' +
        key +
        this.tagEndChar
      );
    }

    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== '') {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
      }
    }

    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }

    function isAttribute(name /*, options*/) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }

    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }

    //formatting
    //indentation
    //\n after each closing or self closing tag

    var json2xml = Parser;

    var parser = createCommonjsModule(function (module, exports) {



    const x2xmlnode = xmlstr2xmlnode;
    const buildOptions = util.buildOptions;


    exports.parse = function(xmlData, options, validationOption) {
      if( validationOption){
        if(validationOption === true) validationOption = {};
        
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error( result.err.msg)
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlstr2xmlnode.getTraversalObj(xmlData, options);
      //print(traversableObj, "  ");
      return node2json.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = nimndata.convert2nimn;
    exports.getTraversalObj = xmlstr2xmlnode.getTraversalObj;
    exports.convertToJson = node2json.convertToJson;
    exports.convertToJsonString = node2json_str.convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = json2xml;
    exports.parseToNimn = function(xmlData, schema, options) {
      return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
    });

    var serializeAws_restXmlAbortMultipartUploadCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b({}, (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = __assign$b({ "x-id": "AbortMultipartUpload" }, (input.UploadId !== undefined && { uploadId: input.UploadId }));
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlCompleteMultipartUploadCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b({ "content-type": "application/xml" }, (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = __assign$b({}, (input.UploadId !== undefined && { uploadId: input.UploadId }));
                    if (input.MultipartUpload !== undefined) {
                        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlCreateMultipartUploadCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b({}, (isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL })), (isSerializableHeaderValue(input.CacheControl) && { "cache-control": input.CacheControl })), (isSerializableHeaderValue(input.ContentDisposition) && { "content-disposition": input.ContentDisposition })), (isSerializableHeaderValue(input.ContentEncoding) && { "content-encoding": input.ContentEncoding })), (isSerializableHeaderValue(input.ContentLanguage) && { "content-language": input.ContentLanguage })), (isSerializableHeaderValue(input.ContentType) && { "content-type": input.ContentType })), (isSerializableHeaderValue(input.Expires) && { expires: dateToUtcString(input.Expires).toString() })), (isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl })), (isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead })), (isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP })), (isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP })), (isSerializableHeaderValue(input.ServerSideEncryption) && {
                        "x-amz-server-side-encryption": input.ServerSideEncryption,
                    })), (isSerializableHeaderValue(input.StorageClass) && { "x-amz-storage-class": input.StorageClass })), (isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
                        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
                    })), (isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    })), (isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    })), (isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    })), (isSerializableHeaderValue(input.SSEKMSKeyId) && {
                        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
                    })), (isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
                        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
                    })), (isSerializableHeaderValue(input.BucketKeyEnabled) && {
                        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString(),
                    })), (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.Tagging) && { "x-amz-tagging": input.Tagging })), (isSerializableHeaderValue(input.ObjectLockMode) && { "x-amz-object-lock-mode": input.ObjectLockMode })), (isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
                        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(),
                    })), (isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
                        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
                    })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    })), (input.Metadata !== undefined &&
                        Object.keys(input.Metadata).reduce(function (acc, suffix) {
                            var _a;
                            return (__assign$b(__assign$b({}, acc), (_a = {}, _a["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a)));
                        }, {})));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = {
                        uploads: "",
                    };
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlDeleteObjectCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b(__assign$b(__assign$b({}, (isSerializableHeaderValue(input.MFA) && { "x-amz-mfa": input.MFA })), (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.BypassGovernanceRetention) && {
                        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString(),
                    })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = __assign$b({ "x-id": "DeleteObject" }, (input.VersionId !== undefined && { versionId: input.VersionId }));
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlGetObjectCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b({}, (isSerializableHeaderValue(input.IfMatch) && { "if-match": input.IfMatch })), (isSerializableHeaderValue(input.IfModifiedSince) && {
                        "if-modified-since": dateToUtcString(input.IfModifiedSince).toString(),
                    })), (isSerializableHeaderValue(input.IfNoneMatch) && { "if-none-match": input.IfNoneMatch })), (isSerializableHeaderValue(input.IfUnmodifiedSince) && {
                        "if-unmodified-since": dateToUtcString(input.IfUnmodifiedSince).toString(),
                    })), (isSerializableHeaderValue(input.Range) && { range: input.Range })), (isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    })), (isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    })), (isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    })), (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = __assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b({ "x-id": "GetObject" }, (input.ResponseCacheControl !== undefined && { "response-cache-control": input.ResponseCacheControl })), (input.ResponseContentDisposition !== undefined && {
                        "response-content-disposition": input.ResponseContentDisposition,
                    })), (input.ResponseContentEncoding !== undefined && { "response-content-encoding": input.ResponseContentEncoding })), (input.ResponseContentLanguage !== undefined && { "response-content-language": input.ResponseContentLanguage })), (input.ResponseContentType !== undefined && { "response-content-type": input.ResponseContentType })), (input.ResponseExpires !== undefined && {
                        "response-expires": (input.ResponseExpires.toISOString().split(".")[0] + "Z").toString(),
                    })), (input.VersionId !== undefined && { versionId: input.VersionId })), (input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }));
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlListObjectsCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b({}, (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    query = __assign$b(__assign$b(__assign$b(__assign$b(__assign$b({}, (input.Delimiter !== undefined && { delimiter: input.Delimiter })), (input.EncodingType !== undefined && { "encoding-type": input.EncodingType })), (input.Marker !== undefined && { marker: input.Marker })), (input.MaxKeys !== undefined && { "max-keys": input.MaxKeys.toString() })), (input.Prefix !== undefined && { prefix: input.Prefix }));
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlListPartsCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b({}, (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = __assign$b(__assign$b(__assign$b({ "x-id": "ListParts" }, (input.MaxParts !== undefined && { "max-parts": input.MaxParts.toString() })), (input.PartNumberMarker !== undefined && { "part-number-marker": input.PartNumberMarker })), (input.UploadId !== undefined && { uploadId: input.UploadId }));
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlPutObjectCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b({ "content-type": "application/octet-stream" }, (isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL })), (isSerializableHeaderValue(input.CacheControl) && { "cache-control": input.CacheControl })), (isSerializableHeaderValue(input.ContentDisposition) && { "content-disposition": input.ContentDisposition })), (isSerializableHeaderValue(input.ContentEncoding) && { "content-encoding": input.ContentEncoding })), (isSerializableHeaderValue(input.ContentLanguage) && { "content-language": input.ContentLanguage })), (isSerializableHeaderValue(input.ContentLength) && { "content-length": input.ContentLength.toString() })), (isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 })), (isSerializableHeaderValue(input.ContentType) && { "content-type": input.ContentType })), (isSerializableHeaderValue(input.Expires) && { expires: dateToUtcString(input.Expires).toString() })), (isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl })), (isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead })), (isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP })), (isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP })), (isSerializableHeaderValue(input.ServerSideEncryption) && {
                        "x-amz-server-side-encryption": input.ServerSideEncryption,
                    })), (isSerializableHeaderValue(input.StorageClass) && { "x-amz-storage-class": input.StorageClass })), (isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
                        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
                    })), (isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    })), (isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    })), (isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    })), (isSerializableHeaderValue(input.SSEKMSKeyId) && {
                        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
                    })), (isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
                        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
                    })), (isSerializableHeaderValue(input.BucketKeyEnabled) && {
                        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString(),
                    })), (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.Tagging) && { "x-amz-tagging": input.Tagging })), (isSerializableHeaderValue(input.ObjectLockMode) && { "x-amz-object-lock-mode": input.ObjectLockMode })), (isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
                        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(),
                    })), (isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
                        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
                    })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    })), (input.Metadata !== undefined &&
                        Object.keys(input.Metadata).reduce(function (acc, suffix) {
                            var _a;
                            return (__assign$b(__assign$b({}, acc), (_a = {}, _a["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a)));
                        }, {})));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = {
                        "x-id": "PutObject",
                    };
                    if (input.Body !== undefined) {
                        contents = input.Body;
                        body = contents;
                    }
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var serializeAws_restXmlUploadPartCommand = function (input, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = __assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b(__assign$b({ "content-type": "application/octet-stream" }, (isSerializableHeaderValue(input.ContentLength) && { "content-length": input.ContentLength.toString() })), (isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 })), (isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    })), (isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    })), (isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    })), (isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer })), (isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    }));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Bucket.");
                        }
                        resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Bucket.");
                    }
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) {
                            throw new Error("Empty value provided for input HTTP label: Key.");
                        }
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue
                            .split("/")
                            .map(function (segment) { return extendedEncodeURIComponent(segment); })
                            .join("/"));
                    }
                    else {
                        throw new Error("No value provided for input HTTP label: Key.");
                    }
                    query = __assign$b(__assign$b({ "x-id": "UploadPart" }, (input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() })), (input.UploadId !== undefined && { uploadId: input.UploadId }));
                    if (input.Body !== undefined) {
                        contents = input.Body;
                        body = contents;
                    }
                    return [4 /*yield*/, context.endpoint()];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [2 /*return*/, new HttpRequest({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body,
                        })];
            }
        });
    }); };
    var deserializeAws_restXmlAbortMultipartUploadCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlAbortMultipartUploadCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined,
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlAbortMultipartUploadCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return __generator$b(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _d = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch (_b) {
                        case "NoSuchUpload": return [3 /*break*/, 2];
                        case "com.amazonaws.s3#NoSuchUpload": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 2:
                    _c = [{}];
                    return [4 /*yield*/, deserializeAws_restXmlNoSuchUploadResponse(parsedOutput)];
                case 3:
                    response = __assign$b.apply(void 0, [__assign$b.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 5];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlCompleteMultipartUploadCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents, data;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Bucket: undefined,
                        BucketKeyEnabled: undefined,
                        ETag: undefined,
                        Expiration: undefined,
                        Key: undefined,
                        Location: undefined,
                        RequestCharged: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        VersionId: undefined,
                    };
                    if (output.headers["x-amz-expiration"] !== undefined) {
                        contents.Expiration = output.headers["x-amz-expiration"];
                    }
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) {
                        contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    }
                    if (output.headers["x-amz-version-id"] !== undefined) {
                        contents.VersionId = output.headers["x-amz-version-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) {
                        contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) {
                        contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    }
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) {
                        contents.Bucket = data["Bucket"];
                    }
                    if (data["ETag"] !== undefined) {
                        contents.ETag = data["ETag"];
                    }
                    if (data["Key"] !== undefined) {
                        contents.Key = data["Key"];
                    }
                    if (data["Location"] !== undefined) {
                        contents.Location = data["Location"];
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlCompleteMultipartUploadCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlCreateMultipartUploadCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents, data;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlCreateMultipartUploadCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AbortDate: undefined,
                        AbortRuleId: undefined,
                        Bucket: undefined,
                        BucketKeyEnabled: undefined,
                        Key: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSEncryptionContext: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        UploadId: undefined,
                    };
                    if (output.headers["x-amz-abort-date"] !== undefined) {
                        contents.AbortDate = new Date(output.headers["x-amz-abort-date"]);
                    }
                    if (output.headers["x-amz-abort-rule-id"] !== undefined) {
                        contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) {
                        contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    }
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) {
                        contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    }
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) {
                        contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    }
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) {
                        contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption-context"] !== undefined) {
                        contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
                    }
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) {
                        contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    }
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) {
                        contents.Bucket = data["Bucket"];
                    }
                    if (data["Key"] !== undefined) {
                        contents.Key = data["Key"];
                    }
                    if (data["UploadId"] !== undefined) {
                        contents.UploadId = data["UploadId"];
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlCreateMultipartUploadCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlDeleteObjectCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlDeleteObjectCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        DeleteMarker: undefined,
                        RequestCharged: undefined,
                        VersionId: undefined,
                    };
                    if (output.headers["x-amz-delete-marker"] !== undefined) {
                        contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
                    }
                    if (output.headers["x-amz-version-id"] !== undefined) {
                        contents.VersionId = output.headers["x-amz-version-id"];
                    }
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlDeleteObjectCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlGetObjectCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents, data;
        return __generator$b(this, function (_a) {
            if (output.statusCode !== 200 && output.statusCode >= 300) {
                return [2 /*return*/, deserializeAws_restXmlGetObjectCommandError(output, context)];
            }
            contents = {
                $metadata: deserializeMetadata(output),
                AcceptRanges: undefined,
                Body: undefined,
                BucketKeyEnabled: undefined,
                CacheControl: undefined,
                ContentDisposition: undefined,
                ContentEncoding: undefined,
                ContentLanguage: undefined,
                ContentLength: undefined,
                ContentRange: undefined,
                ContentType: undefined,
                DeleteMarker: undefined,
                ETag: undefined,
                Expiration: undefined,
                Expires: undefined,
                LastModified: undefined,
                Metadata: undefined,
                MissingMeta: undefined,
                ObjectLockLegalHoldStatus: undefined,
                ObjectLockMode: undefined,
                ObjectLockRetainUntilDate: undefined,
                PartsCount: undefined,
                ReplicationStatus: undefined,
                RequestCharged: undefined,
                Restore: undefined,
                SSECustomerAlgorithm: undefined,
                SSECustomerKeyMD5: undefined,
                SSEKMSKeyId: undefined,
                ServerSideEncryption: undefined,
                StorageClass: undefined,
                TagCount: undefined,
                VersionId: undefined,
                WebsiteRedirectLocation: undefined,
            };
            if (output.headers["x-amz-delete-marker"] !== undefined) {
                contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
            }
            if (output.headers["accept-ranges"] !== undefined) {
                contents.AcceptRanges = output.headers["accept-ranges"];
            }
            if (output.headers["x-amz-expiration"] !== undefined) {
                contents.Expiration = output.headers["x-amz-expiration"];
            }
            if (output.headers["x-amz-restore"] !== undefined) {
                contents.Restore = output.headers["x-amz-restore"];
            }
            if (output.headers["last-modified"] !== undefined) {
                contents.LastModified = new Date(output.headers["last-modified"]);
            }
            if (output.headers["content-length"] !== undefined) {
                contents.ContentLength = parseInt(output.headers["content-length"], 10);
            }
            if (output.headers["etag"] !== undefined) {
                contents.ETag = output.headers["etag"];
            }
            if (output.headers["x-amz-missing-meta"] !== undefined) {
                contents.MissingMeta = parseInt(output.headers["x-amz-missing-meta"], 10);
            }
            if (output.headers["x-amz-version-id"] !== undefined) {
                contents.VersionId = output.headers["x-amz-version-id"];
            }
            if (output.headers["cache-control"] !== undefined) {
                contents.CacheControl = output.headers["cache-control"];
            }
            if (output.headers["content-disposition"] !== undefined) {
                contents.ContentDisposition = output.headers["content-disposition"];
            }
            if (output.headers["content-encoding"] !== undefined) {
                contents.ContentEncoding = output.headers["content-encoding"];
            }
            if (output.headers["content-language"] !== undefined) {
                contents.ContentLanguage = output.headers["content-language"];
            }
            if (output.headers["content-range"] !== undefined) {
                contents.ContentRange = output.headers["content-range"];
            }
            if (output.headers["content-type"] !== undefined) {
                contents.ContentType = output.headers["content-type"];
            }
            if (output.headers["expires"] !== undefined) {
                contents.Expires = new Date(output.headers["expires"]);
            }
            if (output.headers["x-amz-website-redirect-location"] !== undefined) {
                contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
            }
            if (output.headers["x-amz-server-side-encryption"] !== undefined) {
                contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
            }
            if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) {
                contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
            }
            if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) {
                contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
            }
            if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) {
                contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
            }
            if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) {
                contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
            }
            if (output.headers["x-amz-storage-class"] !== undefined) {
                contents.StorageClass = output.headers["x-amz-storage-class"];
            }
            if (output.headers["x-amz-request-charged"] !== undefined) {
                contents.RequestCharged = output.headers["x-amz-request-charged"];
            }
            if (output.headers["x-amz-replication-status"] !== undefined) {
                contents.ReplicationStatus = output.headers["x-amz-replication-status"];
            }
            if (output.headers["x-amz-mp-parts-count"] !== undefined) {
                contents.PartsCount = parseInt(output.headers["x-amz-mp-parts-count"], 10);
            }
            if (output.headers["x-amz-tagging-count"] !== undefined) {
                contents.TagCount = parseInt(output.headers["x-amz-tagging-count"], 10);
            }
            if (output.headers["x-amz-object-lock-mode"] !== undefined) {
                contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
            }
            if (output.headers["x-amz-object-lock-retain-until-date"] !== undefined) {
                contents.ObjectLockRetainUntilDate = new Date(output.headers["x-amz-object-lock-retain-until-date"]);
            }
            if (output.headers["x-amz-object-lock-legal-hold"] !== undefined) {
                contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
            }
            Object.keys(output.headers).forEach(function (header) {
                if (contents.Metadata === undefined) {
                    contents.Metadata = {};
                }
                if (header.startsWith("x-amz-meta-")) {
                    contents.Metadata[header.substring(11)] = output.headers[header];
                }
            });
            data = output.body;
            contents.Body = data;
            return [2 /*return*/, Promise.resolve(contents)];
        });
    }); };
    var deserializeAws_restXmlGetObjectCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return __generator$b(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _e = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch (_b) {
                        case "InvalidObjectState": return [3 /*break*/, 2];
                        case "com.amazonaws.s3#InvalidObjectState": return [3 /*break*/, 2];
                        case "NoSuchKey": return [3 /*break*/, 4];
                        case "com.amazonaws.s3#NoSuchKey": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _c = [{}];
                    return [4 /*yield*/, deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput)];
                case 3:
                    response = __assign$b.apply(void 0, [__assign$b.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput)];
                case 5:
                    response = __assign$b.apply(void 0, [__assign$b.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlListObjectsCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents, data;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlListObjectsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        CommonPrefixes: undefined,
                        Contents: undefined,
                        Delimiter: undefined,
                        EncodingType: undefined,
                        IsTruncated: undefined,
                        Marker: undefined,
                        MaxKeys: undefined,
                        Name: undefined,
                        NextMarker: undefined,
                        Prefix: undefined,
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.CommonPrefixes === "") {
                        contents.CommonPrefixes = [];
                    }
                    if (data["CommonPrefixes"] !== undefined) {
                        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
                    }
                    if (data.Contents === "") {
                        contents.Contents = [];
                    }
                    if (data["Contents"] !== undefined) {
                        contents.Contents = deserializeAws_restXmlObjectList(getArrayIfSingleItem(data["Contents"]));
                    }
                    if (data["Delimiter"] !== undefined) {
                        contents.Delimiter = data["Delimiter"];
                    }
                    if (data["EncodingType"] !== undefined) {
                        contents.EncodingType = data["EncodingType"];
                    }
                    if (data["IsTruncated"] !== undefined) {
                        contents.IsTruncated = data["IsTruncated"] == "true";
                    }
                    if (data["Marker"] !== undefined) {
                        contents.Marker = data["Marker"];
                    }
                    if (data["MaxKeys"] !== undefined) {
                        contents.MaxKeys = parseInt(data["MaxKeys"]);
                    }
                    if (data["Name"] !== undefined) {
                        contents.Name = data["Name"];
                    }
                    if (data["NextMarker"] !== undefined) {
                        contents.NextMarker = data["NextMarker"];
                    }
                    if (data["Prefix"] !== undefined) {
                        contents.Prefix = data["Prefix"];
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlListObjectsCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return __generator$b(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _d = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch (_b) {
                        case "NoSuchBucket": return [3 /*break*/, 2];
                        case "com.amazonaws.s3#NoSuchBucket": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 2:
                    _c = [{}];
                    return [4 /*yield*/, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput)];
                case 3:
                    response = __assign$b.apply(void 0, [__assign$b.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 5];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlListPartsCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents, data;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlListPartsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AbortDate: undefined,
                        AbortRuleId: undefined,
                        Bucket: undefined,
                        Initiator: undefined,
                        IsTruncated: undefined,
                        Key: undefined,
                        MaxParts: undefined,
                        NextPartNumberMarker: undefined,
                        Owner: undefined,
                        PartNumberMarker: undefined,
                        Parts: undefined,
                        RequestCharged: undefined,
                        StorageClass: undefined,
                        UploadId: undefined,
                    };
                    if (output.headers["x-amz-abort-date"] !== undefined) {
                        contents.AbortDate = new Date(output.headers["x-amz-abort-date"]);
                    }
                    if (output.headers["x-amz-abort-rule-id"] !== undefined) {
                        contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
                    }
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) {
                        contents.Bucket = data["Bucket"];
                    }
                    if (data["Initiator"] !== undefined) {
                        contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"]);
                    }
                    if (data["IsTruncated"] !== undefined) {
                        contents.IsTruncated = data["IsTruncated"] == "true";
                    }
                    if (data["Key"] !== undefined) {
                        contents.Key = data["Key"];
                    }
                    if (data["MaxParts"] !== undefined) {
                        contents.MaxParts = parseInt(data["MaxParts"]);
                    }
                    if (data["NextPartNumberMarker"] !== undefined) {
                        contents.NextPartNumberMarker = data["NextPartNumberMarker"];
                    }
                    if (data["Owner"] !== undefined) {
                        contents.Owner = deserializeAws_restXmlOwner(data["Owner"]);
                    }
                    if (data["PartNumberMarker"] !== undefined) {
                        contents.PartNumberMarker = data["PartNumberMarker"];
                    }
                    if (data.Part === "") {
                        contents.Parts = [];
                    }
                    if (data["Part"] !== undefined) {
                        contents.Parts = deserializeAws_restXmlParts(getArrayIfSingleItem(data["Part"]));
                    }
                    if (data["StorageClass"] !== undefined) {
                        contents.StorageClass = data["StorageClass"];
                    }
                    if (data["UploadId"] !== undefined) {
                        contents.UploadId = data["UploadId"];
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlListPartsCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlPutObjectCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlPutObjectCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        BucketKeyEnabled: undefined,
                        ETag: undefined,
                        Expiration: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSEncryptionContext: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        VersionId: undefined,
                    };
                    if (output.headers["x-amz-expiration"] !== undefined) {
                        contents.Expiration = output.headers["x-amz-expiration"];
                    }
                    if (output.headers["etag"] !== undefined) {
                        contents.ETag = output.headers["etag"];
                    }
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) {
                        contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    }
                    if (output.headers["x-amz-version-id"] !== undefined) {
                        contents.VersionId = output.headers["x-amz-version-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) {
                        contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    }
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) {
                        contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    }
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) {
                        contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption-context"] !== undefined) {
                        contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
                    }
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) {
                        contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    }
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlPutObjectCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlUploadPartCommand = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) {
                        return [2 /*return*/, deserializeAws_restXmlUploadPartCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        BucketKeyEnabled: undefined,
                        ETag: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                    };
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) {
                        contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    }
                    if (output.headers["etag"] !== undefined) {
                        contents.ETag = output.headers["etag"];
                    }
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) {
                        contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    }
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) {
                        contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    }
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) {
                        contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    }
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) {
                        contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    }
                    if (output.headers["x-amz-request-charged"] !== undefined) {
                        contents.RequestCharged = output.headers["x-amz-request-charged"];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    }); };
    var deserializeAws_restXmlUploadPartCommandError = function (output, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return __generator$b(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign$b({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign$b.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign$b(__assign$b({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    }); };
    var deserializeAws_restXmlInvalidObjectStateResponse = function (parsedOutput, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents, data;
        return __generator$b(this, function (_a) {
            contents = {
                name: "InvalidObjectState",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput),
                AccessTier: undefined,
                StorageClass: undefined,
            };
            data = parsedOutput.body;
            if (data["AccessTier"] !== undefined) {
                contents.AccessTier = data["AccessTier"];
            }
            if (data["StorageClass"] !== undefined) {
                contents.StorageClass = data["StorageClass"];
            }
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_restXmlNoSuchBucketResponse = function (parsedOutput, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            contents = {
                name: "NoSuchBucket",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput),
            };
            parsedOutput.body;
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_restXmlNoSuchKeyResponse = function (parsedOutput, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            contents = {
                name: "NoSuchKey",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput),
            };
            parsedOutput.body;
            return [2 /*return*/, contents];
        });
    }); };
    var deserializeAws_restXmlNoSuchUploadResponse = function (parsedOutput, context) { return __awaiter$b(void 0, void 0, void 0, function () {
        var contents;
        return __generator$b(this, function (_a) {
            contents = {
                name: "NoSuchUpload",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput),
            };
            parsedOutput.body;
            return [2 /*return*/, contents];
        });
    }); };
    var serializeAws_restXmlCompletedMultipartUpload = function (input, context) {
        var bodyNode = new XmlNode("CompletedMultipartUpload");
        if (input.Parts !== undefined && input.Parts !== null) {
            var nodes = serializeAws_restXmlCompletedPartList(input.Parts);
            nodes.map(function (node) {
                node = node.withName("Part");
                bodyNode.addChildNode(node);
            });
        }
        return bodyNode;
    };
    var serializeAws_restXmlCompletedPart = function (input, context) {
        var bodyNode = new XmlNode("CompletedPart");
        if (input.ETag !== undefined && input.ETag !== null) {
            var node = new XmlNode("ETag").addChildNode(new XmlText(input.ETag)).withName("ETag");
            bodyNode.addChildNode(node);
        }
        if (input.PartNumber !== undefined && input.PartNumber !== null) {
            var node = new XmlNode("PartNumber")
                .addChildNode(new XmlText(String(input.PartNumber)))
                .withName("PartNumber");
            bodyNode.addChildNode(node);
        }
        return bodyNode;
    };
    var serializeAws_restXmlCompletedPartList = function (input, context) {
        return input
            .filter(function (e) { return e != null; })
            .map(function (entry) {
            if (entry === null) {
                return null;
            }
            var node = serializeAws_restXmlCompletedPart(entry);
            return node.withName("member");
        });
    };
    var deserializeAws_restXmlCommonPrefix = function (output, context) {
        var contents = {
            Prefix: undefined,
        };
        if (output["Prefix"] !== undefined) {
            contents.Prefix = output["Prefix"];
        }
        return contents;
    };
    var deserializeAws_restXmlCommonPrefixList = function (output, context) {
        return (output || [])
            .filter(function (e) { return e != null; })
            .map(function (entry) {
            if (entry === null) {
                return null;
            }
            return deserializeAws_restXmlCommonPrefix(entry);
        });
    };
    var deserializeAws_restXmlInitiator = function (output, context) {
        var contents = {
            ID: undefined,
            DisplayName: undefined,
        };
        if (output["ID"] !== undefined) {
            contents.ID = output["ID"];
        }
        if (output["DisplayName"] !== undefined) {
            contents.DisplayName = output["DisplayName"];
        }
        return contents;
    };
    var deserializeAws_restXml_Object = function (output, context) {
        var contents = {
            Key: undefined,
            LastModified: undefined,
            ETag: undefined,
            Size: undefined,
            StorageClass: undefined,
            Owner: undefined,
        };
        if (output["Key"] !== undefined) {
            contents.Key = output["Key"];
        }
        if (output["LastModified"] !== undefined) {
            contents.LastModified = new Date(output["LastModified"]);
        }
        if (output["ETag"] !== undefined) {
            contents.ETag = output["ETag"];
        }
        if (output["Size"] !== undefined) {
            contents.Size = parseInt(output["Size"]);
        }
        if (output["StorageClass"] !== undefined) {
            contents.StorageClass = output["StorageClass"];
        }
        if (output["Owner"] !== undefined) {
            contents.Owner = deserializeAws_restXmlOwner(output["Owner"]);
        }
        return contents;
    };
    var deserializeAws_restXmlObjectList = function (output, context) {
        return (output || [])
            .filter(function (e) { return e != null; })
            .map(function (entry) {
            if (entry === null) {
                return null;
            }
            return deserializeAws_restXml_Object(entry);
        });
    };
    var deserializeAws_restXmlOwner = function (output, context) {
        var contents = {
            DisplayName: undefined,
            ID: undefined,
        };
        if (output["DisplayName"] !== undefined) {
            contents.DisplayName = output["DisplayName"];
        }
        if (output["ID"] !== undefined) {
            contents.ID = output["ID"];
        }
        return contents;
    };
    var deserializeAws_restXmlPart = function (output, context) {
        var contents = {
            PartNumber: undefined,
            LastModified: undefined,
            ETag: undefined,
            Size: undefined,
        };
        if (output["PartNumber"] !== undefined) {
            contents.PartNumber = parseInt(output["PartNumber"]);
        }
        if (output["LastModified"] !== undefined) {
            contents.LastModified = new Date(output["LastModified"]);
        }
        if (output["ETag"] !== undefined) {
            contents.ETag = output["ETag"];
        }
        if (output["Size"] !== undefined) {
            contents.Size = parseInt(output["Size"]);
        }
        return contents;
    };
    var deserializeAws_restXmlParts = function (output, context) {
        return (output || [])
            .filter(function (e) { return e != null; })
            .map(function (entry) {
            if (entry === null) {
                return null;
            }
            return deserializeAws_restXmlPart(entry);
        });
    };
    var deserializeMetadata = function (output) {
        var _a;
        return ({
            httpStatusCode: output.statusCode,
            requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
            extendedRequestId: output.headers["x-amz-id-2"],
            cfId: output.headers["x-amz-cf-id"],
        });
    };
    // Collect low-level response body stream to Uint8Array.
    var collectBody = function (streamBody, context) {
        if (streamBody === void 0) { streamBody = new Uint8Array(); }
        if (streamBody instanceof Uint8Array) {
            return Promise.resolve(streamBody);
        }
        return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    // Encode Uint8Array data into string with utf-8.
    var collectBodyString = function (streamBody, context) {
        return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
    };
    var isSerializableHeaderValue = function (value) {
        return value !== undefined &&
            value !== null &&
            value !== "" &&
            (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
            (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    };
    var decodeEscapedXML = function (str) {
        return str
            .replace(/&amp;/g, "&")
            .replace(/&apos;/g, "'")
            .replace(/&quot;/g, '"')
            .replace(/&gt;/g, ">")
            .replace(/&lt;/g, "<");
    };
    var parseBody = function (streamBody, context) {
        return collectBodyString(streamBody, context).then(function (encoded) {
            if (encoded.length) {
                var parsedObj = parser.parse(encoded, {
                    attributeNamePrefix: "",
                    ignoreAttributes: false,
                    parseNodeValue: false,
                    tagValueProcessor: function (val, tagName) { return decodeEscapedXML(val); },
                });
                var textNodeName = "#text";
                var key = Object.keys(parsedObj)[0];
                var parsedObjToReturn = parsedObj[key];
                if (parsedObjToReturn[textNodeName]) {
                    parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                    delete parsedObjToReturn[textNodeName];
                }
                return getValueFromTextNode(parsedObjToReturn);
            }
            return {};
        });
    };
    var loadRestXmlErrorCode = function (output, data) {
        if (data.Code !== undefined) {
            return data.Code;
        }
        if (output.statusCode == 404) {
            return "NotFound";
        }
        return "";
    };

    /**
     * <p>This operation aborts a multipart upload. After a multipart upload is aborted, no
     *          additional parts can be uploaded using that upload ID. The storage consumed by any
     *          previously uploaded parts will be freed. However, if any part uploads are currently in
     *          progress, those part uploads might or might not succeed. As a result, it might be necessary
     *          to abort a given multipart upload multiple times in order to completely free all storage
     *          consumed by all parts. </p>
     *          <p>To verify that all parts have been removed, so you don't get charged for the part
     *          storage, you should call the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a> operation and ensure that
     *          the parts list is empty.</p>
     *          <p>For information about permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
     *          Permissions</a>.</p>
     *          <p>The following operations are related to <code>AbortMultipartUpload</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var AbortMultipartUploadCommand = /** @class */ (function (_super) {
        __extends$3(AbortMultipartUploadCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function AbortMultipartUploadCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        AbortMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "AbortMultipartUploadCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: AbortMultipartUploadRequest.filterSensitiveLog,
                outputFilterSensitiveLog: AbortMultipartUploadOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        AbortMultipartUploadCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlAbortMultipartUploadCommand(input, context);
        };
        AbortMultipartUploadCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlAbortMultipartUploadCommand(output, context);
        };
        return AbortMultipartUploadCommand;
    }(Command));

    /**
     * <p>Completes a multipart upload by assembling previously uploaded parts.</p>
     *          <p>You first initiate the multipart upload and then upload all parts using the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
     *          operation. After successfully uploading all relevant parts of an upload, you call this
     *          operation to complete the upload. Upon receiving this request, Amazon S3 concatenates all
     *          the parts in ascending order by part number to create a new object. In the Complete
     *          Multipart Upload request, you must provide the parts list. You must ensure that the parts
     *          list is complete. This operation concatenates the parts that you provide in the list. For
     *          each part in the list, you must provide the part number and the <code>ETag</code> value,
     *          returned after that part was uploaded.</p>
     *          <p>Processing of a Complete Multipart Upload request could take several minutes to
     *          complete. After Amazon S3 begins processing the request, it sends an HTTP response header that
     *          specifies a 200 OK response. While processing is in progress, Amazon S3 periodically sends white
     *          space characters to keep the connection from timing out. Because a request could fail after
     *          the initial 200 OK response has been sent, it is important that you check the response body
     *          to determine whether the request succeeded.</p>
     *          <p>Note that if <code>CompleteMultipartUpload</code> fails, applications should be prepared
     *          to retry the failed requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html">Amazon S3 Error Best Practices</a>.</p>
     *          <p>For more information about multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart
     *             Upload</a>.</p>
     *          <p>For information about permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
     *          Permissions</a>.</p>
     *
     *
     *          <p>
     *             <code>CompleteMultipartUpload</code> has the following special errors:</p>
     *          <ul>
     *             <li>
     *                <p>Error code: <code>EntityTooSmall</code>
     *                </p>
     *                <ul>
     *                   <li>
     *                      <p>Description: Your proposed upload is smaller than the minimum allowed object
     *                      size. Each part must be at least 5 MB in size, except the last part.</p>
     *                   </li>
     *                   <li>
     *                      <p>400 Bad Request</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>Error code: <code>InvalidPart</code>
     *                </p>
     *                <ul>
     *                   <li>
     *                      <p>Description: One or more of the specified parts could not be found. The part
     *                      might not have been uploaded, or the specified entity tag might not have
     *                      matched the part's entity tag.</p>
     *                   </li>
     *                   <li>
     *                      <p>400 Bad Request</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>Error code: <code>InvalidPartOrder</code>
     *                </p>
     *                <ul>
     *                   <li>
     *                      <p>Description: The list of parts was not in ascending order. The parts list
     *                      must be specified in order by part number.</p>
     *                   </li>
     *                   <li>
     *                      <p>400 Bad Request</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>Error code: <code>NoSuchUpload</code>
     *                </p>
     *                <ul>
     *                   <li>
     *                      <p>Description: The specified multipart upload does not exist. The upload ID
     *                      might be invalid, or the multipart upload might have been aborted or
     *                      completed.</p>
     *                   </li>
     *                   <li>
     *                      <p>404 Not Found</p>
     *                   </li>
     *                </ul>
     *             </li>
     *          </ul>
     *
     *          <p>The following operations are related to <code>CompleteMultipartUpload</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var CompleteMultipartUploadCommand = /** @class */ (function (_super) {
        __extends$3(CompleteMultipartUploadCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function CompleteMultipartUploadCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        CompleteMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "CompleteMultipartUploadCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: CompleteMultipartUploadRequest.filterSensitiveLog,
                outputFilterSensitiveLog: CompleteMultipartUploadOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        CompleteMultipartUploadCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlCompleteMultipartUploadCommand(input, context);
        };
        CompleteMultipartUploadCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlCompleteMultipartUploadCommand(output, context);
        };
        return CompleteMultipartUploadCommand;
    }(Command));

    function ssecMiddleware(options) {
        var _this = this;
        return function (next) { return function (args) { return __awaiter$j(_this, void 0, void 0, function () {
            var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;
            var e_1, _e, _f;
            return __generator$j(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        input = __assign$i({}, args.input);
                        properties = [
                            {
                                target: "SSECustomerKey",
                                hash: "SSECustomerKeyMD5",
                            },
                            {
                                target: "CopySourceSSECustomerKey",
                                hash: "CopySourceSSECustomerKeyMD5",
                            },
                        ];
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 6, 7, 8]);
                        properties_1 = __values$1(properties), properties_1_1 = properties_1.next();
                        _g.label = 2;
                    case 2:
                        if (!!properties_1_1.done) return [3 /*break*/, 5];
                        prop = properties_1_1.value;
                        value = input[prop.target];
                        if (!value) return [3 /*break*/, 4];
                        valueView = ArrayBuffer.isView(value)
                            ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)
                            : typeof value === "string"
                                ? options.utf8Decoder(value)
                                : new Uint8Array(value);
                        encoded = options.base64Encoder(valueView);
                        hash = new options.md5();
                        hash.update(valueView);
                        _a = [__assign$i({}, input)];
                        _f = {}, _f[prop.target] = encoded;
                        _b = prop.hash;
                        _d = (_c = options).base64Encoder;
                        return [4 /*yield*/, hash.digest()];
                    case 3:
                        input = __assign$i.apply(void 0, _a.concat([(_f[_b] = _d.apply(_c, [_g.sent()]), _f)]));
                        _g.label = 4;
                    case 4:
                        properties_1_1 = properties_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _g.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return)) _e.call(properties_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, next(__assign$i(__assign$i({}, args), { input: input }))];
                }
            });
        }); }; };
    }
    var ssecMiddlewareOptions = {
        name: "ssecMiddleware",
        step: "initialize",
        tags: ["SSE"],
        override: true,
    };
    var getSsecPlugin = function (config) { return ({
        applyToStack: function (clientStack) {
            clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
        },
    }); };

    /**
     * <p>This operation initiates a multipart upload and returns an upload ID. This upload ID is
     *          used to associate all of the parts in the specific multipart upload. You specify this
     *          upload ID in each of your subsequent upload part requests (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>). You also include this
     *          upload ID in the final request to either complete or abort the multipart upload
     *          request.</p>
     *
     *          <p>For more information about multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart Upload Overview</a>.</p>
     *
     *          <p>If you have configured a lifecycle rule to abort incomplete multipart uploads, the
     *          upload must complete within the number of days specified in the bucket lifecycle
     *          configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort
     *          operation and Amazon S3 aborts the multipart upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
     *             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>
     *
     *          <p>For information about the permissions required to use the multipart upload API, see
     *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
     *             Permissions</a>.</p>
     *
     *          <p>For request signing, multipart upload is just a series of regular requests. You initiate
     *          a multipart upload, send one or more requests to upload parts, and then complete the
     *          multipart upload process. You sign each request individually. There is nothing special
     *          about signing multipart upload requests. For more information about signing, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
     *             Requests (AWS Signature Version 4)</a>.</p>
     *
     *          <note>
     *             <p> After you initiate a multipart upload and upload one or more parts, to stop being
     *             charged for storing the uploaded parts, you must either complete or abort the multipart
     *             upload. Amazon S3 frees up the space used to store the parts and stop charging you for
     *             storing them only after you either complete or abort a multipart upload. </p>
     *          </note>
     *
     *          <p>You can optionally request server-side encryption. For server-side encryption, Amazon S3
     *          encrypts your data as it writes it to disks in its data centers and decrypts it when you
     *          access it. You can provide your own encryption key, or use AWS Key Management Service (AWS
     *          KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide
     *          your own encryption key, the request headers you provide in <a href="AmazonS3/latest/API/API_UploadPart.html">UploadPart</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a> requests must match the headers you used in the request to
     *          initiate the upload by using <code>CreateMultipartUpload</code>. </p>
     *          <p>To perform a multipart upload with encryption using an AWS KMS CMK, the requester must
     *          have permission to the <code>kms:Encrypt</code>, <code>kms:Decrypt</code>,
     *             <code>kms:ReEncrypt*</code>, <code>kms:GenerateDataKey*</code>, and
     *             <code>kms:DescribeKey</code> actions on the key. These permissions are required because
     *          Amazon S3 must decrypt and read data from the encrypted file parts before it completes the
     *          multipart upload.</p>
     *
     *          <p>If your AWS Identity and Access Management (IAM) user or role is in the same AWS account
     *          as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM
     *          user or role belongs to a different account than the key, then you must have the
     *          permissions on both the key policy and your IAM user or role.</p>
     *
     *
     *          <p> For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Protecting
     *             Data Using Server-Side Encryption</a>.</p>
     *
     *          <dl>
     *             <dt>Access Permissions</dt>
     *             <dd>
     *                <p>When copying an object, you can optionally specify the accounts or groups that
     *                   should be granted specific permissions on the new object. There are two ways to
     *                   grant the permissions using the request headers:</p>
     *                <ul>
     *                   <li>
     *                      <p>Specify a canned ACL with the <code>x-amz-acl</code> request header. For
     *                         more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned ACL</a>.</p>
     *                   </li>
     *                   <li>
     *                      <p>Specify access permissions explicitly with the
     *                            <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,
     *                            <code>x-amz-grant-write-acp</code>, and
     *                            <code>x-amz-grant-full-control</code> headers. These parameters map to
     *                         the set of permissions that Amazon S3 supports in an ACL. For more information,
     *                         see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access Control List (ACL)
     *                            Overview</a>.</p>
     *                   </li>
     *                </ul>
     *                <p>You can use either a canned ACL or specify access permissions explicitly. You
     *                   cannot do both.</p>
     *             </dd>
     *             <dt>Server-Side- Encryption-Specific Request Headers</dt>
     *             <dd>
     *                <p>You can optionally tell Amazon S3 to encrypt data at rest using server-side
     *                   encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts
     *                   your data as it writes it to disks in its data centers and decrypts it when you
     *                   access it. The option you use depends on whether you want to use AWS managed
     *                   encryption keys or provide your own encryption key. </p>
     *                <ul>
     *                   <li>
     *                      <p>Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored
     *                         in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys
     *                         used to encrypt data, specify the following headers in the request.</p>
     *                      <ul>
     *                         <li>
     *                            <p>x-amz-server-side-encryption</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-server-side-encryption-aws-kms-key-id</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-server-side-encryption-context</p>
     *                         </li>
     *                      </ul>
     *                      <note>
     *                         <p>If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but
     *                            don't provide <code>x-amz-server-side-encryption-aws-kms-key-id</code>,
     *                            Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.</p>
     *                      </note>
     *                      <important>
     *                         <p>All GET and PUT requests for an object protected by AWS KMS fail if
     *                            you don't make them with SSL or by using SigV4.</p>
     *                      </important>
     *                      <p>For more information about server-side encryption with CMKs stored in AWS
     *                         KMS (SSE-KMS), see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">Protecting Data Using Server-Side Encryption with CMKs stored in AWS
     *                            KMS</a>.</p>
     *                   </li>
     *                   <li>
     *                      <p>Use customer-provided encryption keys – If you want to manage your own
     *                         encryption keys, provide all the following headers in the request.</p>
     *                      <ul>
     *                         <li>
     *                            <p>x-amz-server-side-encryption-customer-algorithm</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-server-side-encryption-customer-key</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-server-side-encryption-customer-key-MD5</p>
     *                         </li>
     *                      </ul>
     *                      <p>For more information about server-side encryption with CMKs stored in AWS
     *                         KMS (SSE-KMS), see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">Protecting Data Using Server-Side Encryption with CMKs stored in AWS
     *                            KMS</a>.</p>
     *                   </li>
     *                </ul>
     *             </dd>
     *             <dt>Access-Control-List (ACL)-Specific Request Headers</dt>
     *             <dd>
     *                <p>You also can use the following access control–related headers with this
     *                   operation. By default, all objects are private. Only the owner has full access
     *                   control. When adding a new object, you can grant permissions to individual AWS
     *                   accounts or to predefined groups defined by Amazon S3. These permissions are then added
     *                   to the access control list (ACL) on the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Using ACLs</a>. With this
     *                   operation, you can grant access permissions using one of the following two
     *                   methods:</p>
     *                <ul>
     *                   <li>
     *                      <p>Specify a canned ACL (<code>x-amz-acl</code>) — Amazon S3 supports a set of
     *                         predefined ACLs, known as <i>canned ACLs</i>. Each canned ACL
     *                         has a predefined set of grantees and permissions. For more information, see
     *                            <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
     *                         ACL</a>.</p>
     *                   </li>
     *                   <li>
     *                      <p>Specify access permissions explicitly — To explicitly grant access
     *                         permissions to specific AWS accounts or groups, use the following headers.
     *                         Each header maps to specific permissions that Amazon S3 supports in an ACL. For
     *                         more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
     *                            Control List (ACL) Overview</a>. In the header, you specify a list of
     *                         grantees who get the specific permission. To grant permissions explicitly,
     *                         use:</p>
     *                      <ul>
     *                         <li>
     *                            <p>x-amz-grant-read</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-grant-write</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-grant-read-acp</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-grant-write-acp</p>
     *                         </li>
     *                         <li>
     *                            <p>x-amz-grant-full-control</p>
     *                         </li>
     *                      </ul>
     *                      <p>You specify each grantee as a type=value pair, where the type is one of
     *                         the following:</p>
     *                      <ul>
     *                         <li>
     *                            <p>
     *                               <code>id</code> – if the value specified is the canonical user ID
     *                               of an AWS account</p>
     *                         </li>
     *                         <li>
     *                            <p>
     *                               <code>uri</code> – if you are granting permissions to a predefined
     *                               group</p>
     *                         </li>
     *                         <li>
     *                            <p>
     *                               <code>emailAddress</code> – if the value specified is the email
     *                               address of an AWS account</p>
     *                            <note>
     *                               <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>
     *                               <ul>
     *                                  <li>
     *                                     <p>US East (N. Virginia)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p>US West (N. California)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p> US West (Oregon)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p> Asia Pacific (Singapore)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p>Asia Pacific (Sydney)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p>Asia Pacific (Tokyo)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p>Europe (Ireland)</p>
     *                                  </li>
     *                                  <li>
     *                                     <p>South America (São Paulo)</p>
     *                                  </li>
     *                               </ul>
     *                               <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints</a> in the AWS General Reference.</p>
     *                            </note>
     *                         </li>
     *                      </ul>
     *                      <p>For example, the following <code>x-amz-grant-read</code> header grants the AWS accounts identified by account IDs permissions to read object data and its metadata:</p>
     *                      <p>
     *                         <code>x-amz-grant-read: id="11112222333", id="444455556666" </code>
     *                      </p>
     *                   </li>
     *                </ul>
     *
     *             </dd>
     *          </dl>
     *
     *          <p>The following operations are related to <code>CreateMultipartUpload</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var CreateMultipartUploadCommand = /** @class */ (function (_super) {
        __extends$3(CreateMultipartUploadCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function CreateMultipartUploadCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        CreateMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getSsecPlugin(configuration));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "CreateMultipartUploadCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: CreateMultipartUploadRequest.filterSensitiveLog,
                outputFilterSensitiveLog: CreateMultipartUploadOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        CreateMultipartUploadCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlCreateMultipartUploadCommand(input, context);
        };
        CreateMultipartUploadCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlCreateMultipartUploadCommand(output, context);
        };
        return CreateMultipartUploadCommand;
    }(Command));

    /**
     * <p>Removes the null version (if there is one) of an object and inserts a delete marker,
     *          which becomes the latest version of the object. If there isn't a null version, Amazon S3 does
     *          not remove any objects.</p>
     *
     *          <p>To remove a specific version, you must be the bucket owner and you must use the version
     *          Id subresource. Using this subresource permanently deletes the version. If the object
     *          deleted is a delete marker, Amazon S3 sets the response header,
     *          <code>x-amz-delete-marker</code>, to true. </p>
     *
     *          <p>If the object you want to delete is in a bucket where the bucket versioning
     *          configuration is MFA Delete enabled, you must include the <code>x-amz-mfa</code> request
     *          header in the DELETE <code>versionId</code> request. Requests that include
     *             <code>x-amz-mfa</code> must use HTTPS. </p>
     *
     *          <p> For more information about MFA Delete, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html">Using MFA Delete</a>. To see sample requests that use versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete">Sample Request</a>. </p>
     *
     *          <p>You can delete objects by explicitly calling the DELETE Object API or configure its
     *          lifecycle (<a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html">PutBucketLifecycle</a>) to
     *          enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or
     *          deleting objects from your bucket, you must deny them the <code>s3:DeleteObject</code>,
     *             <code>s3:DeleteObjectVersion</code>, and <code>s3:PutLifeCycleConfiguration</code>
     *          actions. </p>
     *
     *          <p>The following operation is related to <code>DeleteObject</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var DeleteObjectCommand = /** @class */ (function (_super) {
        __extends$3(DeleteObjectCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function DeleteObjectCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        DeleteObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "DeleteObjectCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: DeleteObjectRequest.filterSensitiveLog,
                outputFilterSensitiveLog: DeleteObjectOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        DeleteObjectCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlDeleteObjectCommand(input, context);
        };
        DeleteObjectCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlDeleteObjectCommand(output, context);
        };
        return DeleteObjectCommand;
    }(Command));

    /**
     * <p>Retrieves objects from Amazon S3. To use <code>GET</code>, you must have <code>READ</code>
     *          access to the object. If you grant <code>READ</code> access to the anonymous user, you can
     *          return the object without using an authorization header.</p>
     *
     *          <p>An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer
     *          file system. You can, however, create a logical hierarchy by using object key names that
     *          imply a folder structure. For example, instead of naming an object <code>sample.jpg</code>,
     *          you can name it <code>photos/2006/February/sample.jpg</code>.</p>
     *
     *          <p>To get an object from such a logical hierarchy, specify the full key name for the object
     *          in the <code>GET</code> operation. For a virtual hosted-style request example, if you have
     *          the object <code>photos/2006/February/sample.jpg</code>, specify the resource as
     *             <code>/photos/2006/February/sample.jpg</code>. For a path-style request example, if you
     *          have the object <code>photos/2006/February/sample.jpg</code> in the bucket named
     *             <code>examplebucket</code>, specify the resource as
     *             <code>/examplebucket/photos/2006/February/sample.jpg</code>. For more information about
     *          request types, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket">HTTP Host Header Bucket Specification</a>.</p>
     *
     *          <p>To distribute large files to many people, you can save bandwidth costs by using
     *          BitTorrent. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html">Amazon S3
     *             Torrent</a>. For more information about returning the ACL of an object, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>.</p>
     *
     *          <p>If the object you are retrieving is stored in the S3 Glacier or
     *          S3 Glacier Deep Archive storage class, or S3 Intelligent-Tiering Archive or
     *          S3 Intelligent-Tiering Deep Archive tiers, before you can retrieve the object you must first restore a
     *          copy using <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>. Otherwise, this operation returns an
     *             <code>InvalidObjectStateError</code> error. For information about restoring archived
     *          objects, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html">Restoring Archived
     *             Objects</a>.</p>
     *
     *          <p>Encryption request headers, like <code>x-amz-server-side-encryption</code>, should not
     *          be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS
     *          KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your
     *          object does use these types of keys, you’ll get an HTTP 400 BadRequest error.</p>
     *          <p>If you encrypt an object by using server-side encryption with customer-provided
     *          encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object,
     *          you must use the following headers:</p>
     *          <ul>
     *             <li>
     *                <p>x-amz-server-side-encryption-customer-algorithm</p>
     *             </li>
     *             <li>
     *                <p>x-amz-server-side-encryption-customer-key</p>
     *             </li>
     *             <li>
     *                <p>x-amz-server-side-encryption-customer-key-MD5</p>
     *             </li>
     *          </ul>
     *          <p>For more information about SSE-C, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using
     *             Customer-Provided Encryption Keys)</a>.</p>
     *
     *          <p>Assuming you have permission to read object tags (permission for the
     *             <code>s3:GetObjectVersionTagging</code> action), the response also returns the
     *             <code>x-amz-tagging-count</code> header that provides the count of number of tags
     *          associated with the object. You can use <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a> to retrieve
     *          the tag set associated with an object.</p>
     *
     *          <p>
     *             <b>Permissions</b>
     *          </p>
     *          <p>You need the <code>s3:GetObject</code> permission for this operation. For more
     *          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying Permissions
     *             in a Policy</a>. If the object you request does not exist, the error Amazon S3 returns
     *          depends on whether you also have the <code>s3:ListBucket</code> permission.</p>
     *          <ul>
     *             <li>
     *                <p>If you have the <code>s3:ListBucket</code> permission on the bucket, Amazon S3 will
     *                return an HTTP status code 404 ("no such key") error.</p>
     *             </li>
     *             <li>
     *                <p>If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3 will return an
     *                HTTP status code 403 ("access denied") error.</p>
     *             </li>
     *          </ul>
     *
     *
     *          <p>
     *             <b>Versioning</b>
     *          </p>
     *          <p>By default, the GET operation returns the current version of an object. To return a
     *          different version, use the <code>versionId</code> subresource.</p>
     *
     *          <note>
     *             <p>If the current version of the object is a delete marker, Amazon S3 behaves as if the
     *             object was deleted and includes <code>x-amz-delete-marker: true</code> in the
     *             response.</p>
     *          </note>
     *
     *
     *          <p>For more information about versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketVersioning.html">PutBucketVersioning</a>. </p>
     *
     *          <p>
     *             <b>Overriding Response Header Values</b>
     *          </p>
     *          <p>There are times when you want to override certain response header values in a GET
     *          response. For example, you might override the Content-Disposition response header value in
     *          your GET request.</p>
     *
     *          <p>You can override values for a set of response headers using the following query
     *          parameters. These response header values are sent only on a successful request, that is,
     *          when status code 200 OK is returned. The set of headers you can override using these
     *          parameters is a subset of the headers that Amazon S3 accepts when you create an object. The
     *          response headers that you can override for the GET response are <code>Content-Type</code>,
     *             <code>Content-Language</code>, <code>Expires</code>, <code>Cache-Control</code>,
     *             <code>Content-Disposition</code>, and <code>Content-Encoding</code>. To override these
     *          header values in the GET response, you use the following request parameters.</p>
     *
     *          <note>
     *             <p>You must sign the request, either using an Authorization header or a presigned URL,
     *             when using these parameters. They cannot be used with an unsigned (anonymous)
     *             request.</p>
     *          </note>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>response-content-type</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>response-content-language</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>response-expires</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>response-cache-control</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>response-content-disposition</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>response-content-encoding</code>
     *                </p>
     *             </li>
     *          </ul>
     *
     *          <p>
     *             <b>Additional Considerations about Request Headers</b>
     *          </p>
     *
     *          <p>If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code> headers are
     *          present in the request as follows: <code>If-Match</code> condition evaluates to
     *             <code>true</code>, and; <code>If-Unmodified-Since</code> condition evaluates to
     *             <code>false</code>; then, S3 returns 200 OK and the data requested. </p>
     *
     *          <p>If both of the <code>If-None-Match</code> and <code>If-Modified-Since</code> headers are
     *          present in the request as follows:<code> If-None-Match</code> condition evaluates to
     *             <code>false</code>, and; <code>If-Modified-Since</code> condition evaluates to
     *             <code>true</code>; then, S3 returns 304 Not Modified response code.</p>
     *
     *          <p>For more information about conditional requests, see <a href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.</p>
     *
     *          <p>The following operations are related to <code>GetObject</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var GetObjectCommand = /** @class */ (function (_super) {
        __extends$3(GetObjectCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function GetObjectCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        GetObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getSsecPlugin(configuration));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "GetObjectCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: GetObjectRequest.filterSensitiveLog,
                outputFilterSensitiveLog: GetObjectOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        GetObjectCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlGetObjectCommand(input, context);
        };
        GetObjectCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlGetObjectCommand(output, context);
        };
        return GetObjectCommand;
    }(Command));

    /**
     * <p>Returns some or all (up to 1,000) of the objects in a bucket. You can use the request
     *          parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
     *          response can contain valid or invalid XML. Be sure to design your application to parse the
     *          contents of the response and handle it appropriately.</p>
     *          <important>
     *             <p>This API has been revised. We recommend that you use the newer version, <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>, when developing applications. For backward compatibility,
     *             Amazon S3 continues to support <code>ListObjects</code>.</p>
     *          </important>
     *
     *
     *          <p>The following operations are related to <code>ListObjects</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var ListObjectsCommand = /** @class */ (function (_super) {
        __extends$3(ListObjectsCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function ListObjectsCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        ListObjectsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "ListObjectsCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: ListObjectsRequest.filterSensitiveLog,
                outputFilterSensitiveLog: ListObjectsOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        ListObjectsCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlListObjectsCommand(input, context);
        };
        ListObjectsCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlListObjectsCommand(output, context);
        };
        return ListObjectsCommand;
    }(Command));

    /**
     * <p>Lists the parts that have been uploaded for a specific multipart upload. This operation
     *          must include the upload ID, which you obtain by sending the initiate multipart upload
     *          request (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>).
     *          This request returns a maximum of 1,000 uploaded parts. The default number of parts
     *          returned is 1,000 parts. You can restrict the number of parts returned by specifying the
     *             <code>max-parts</code> request parameter. If your multipart upload consists of more than
     *          1,000 parts, the response returns an <code>IsTruncated</code> field with the value of true,
     *          and a <code>NextPartNumberMarker</code> element. In subsequent <code>ListParts</code>
     *          requests you can include the part-number-marker query string parameter and set its value to
     *          the <code>NextPartNumberMarker</code> field value from the previous response.</p>
     *
     *          <p>For more information on multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart
     *             Upload</a>.</p>
     *
     *          <p>For information on permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
     *          Permissions</a>.</p>
     *
     *          <p>The following operations are related to <code>ListParts</code>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var ListPartsCommand = /** @class */ (function (_super) {
        __extends$3(ListPartsCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function ListPartsCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        ListPartsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "ListPartsCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: ListPartsRequest.filterSensitiveLog,
                outputFilterSensitiveLog: ListPartsOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        ListPartsCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlListPartsCommand(input, context);
        };
        ListPartsCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlListPartsCommand(output, context);
        };
        return ListPartsCommand;
    }(Command));

    /**
     * <p>Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object
     *          to it.</p>
     *
     *
     *          <p>Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the
     *          entire object to the bucket.</p>
     *
     *          <p>Amazon S3 is a distributed system. If it receives multiple write requests for the same object
     *          simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object
     *          locking; if you need this, make sure to build it into your application layer or use
     *          versioning instead.</p>
     *
     *          <p>To ensure that data is not corrupted traversing the network, use the
     *             <code>Content-MD5</code> header. When you use this header, Amazon S3 checks the object
     *          against the provided MD5 value and, if they do not match, returns an error. Additionally,
     *          you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to
     *          the calculated MD5 value.</p>
     *          <note>
     *             <p> The <code>Content-MD5</code> header is required for any request to upload an object
     *             with a retention period configured using Amazon S3 Object Lock. For more information about
     *             Amazon S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html">Amazon S3 Object Lock Overview</a>
     *             in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>
     *          </note>
     *
     *
     *          <p>
     *             <b>Server-side Encryption</b>
     *          </p>
     *          <p>You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data
     *          when you access it. You have the option to provide your own encryption key or use AWS
     *          managed encryption keys (SSE-S3 or SSE-KMS). For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using Server-Side
     *             Encryption</a>.</p>
     *          <p>If you request server-side encryption using AWS Key Management Service (SSE-KMS), you can enable an S3 Bucket Key at the object-level. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon S3 Bucket Keys</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
     *          <p>
     *             <b>Access Control List (ACL)-Specific Request
     *          Headers</b>
     *          </p>
     *          <p>You can use headers to grant ACL- based permissions. By default, all objects are
     *          private. Only the owner has full access control. When adding a new object, you can grant
     *          permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These
     *          permissions are then added to the ACL on the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access Control List
     *             (ACL) Overview</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html">Managing ACLs Using the REST
     *             API</a>. </p>
     *
     *          <p>
     *             <b>Storage Class Options</b>
     *          </p>
     *          <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
     *          STANDARD storage class provides high durability and high availability. Depending on
     *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
     *          the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes</a> in the <i>Amazon S3
     *             Service Developer Guide</i>.</p>
     *
     *
     *          <p>
     *             <b>Versioning</b>
     *          </p>
     *          <p>If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID
     *          for the object being stored. Amazon S3 returns this ID in the response. When you enable
     *          versioning for a bucket, if Amazon S3 receives multiple write requests for the same object
     *          simultaneously, it stores all of the objects.</p>
     *          <p>For more information about versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html">Adding Objects to
     *             Versioning Enabled Buckets</a>. For information about returning the versioning state
     *          of a bucket, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html">GetBucketVersioning</a>. </p>
     *
     *
     *          <p class="title">
     *             <b>Related Resources</b>
     *          </p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html">CopyObject</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var PutObjectCommand = /** @class */ (function (_super) {
        __extends$3(PutObjectCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function PutObjectCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        PutObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getSsecPlugin(configuration));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "PutObjectCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: PutObjectRequest.filterSensitiveLog,
                outputFilterSensitiveLog: PutObjectOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        PutObjectCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlPutObjectCommand(input, context);
        };
        PutObjectCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlPutObjectCommand(output, context);
        };
        return PutObjectCommand;
    }(Command));

    var MetadataEntry;
    (function (MetadataEntry) {
        MetadataEntry.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(MetadataEntry || (MetadataEntry = {}));
    var S3Location;
    (function (S3Location) {
        S3Location.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Encryption && { Encryption: Encryption.filterSensitiveLog(obj.Encryption) }))); };
    })(S3Location || (S3Location = {}));
    var OutputLocation;
    (function (OutputLocation) {
        OutputLocation.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.S3 && { S3: S3Location.filterSensitiveLog(obj.S3) }))); };
    })(OutputLocation || (OutputLocation = {}));
    var FileHeaderInfo;
    (function (FileHeaderInfo) {
        FileHeaderInfo["IGNORE"] = "IGNORE";
        FileHeaderInfo["NONE"] = "NONE";
        FileHeaderInfo["USE"] = "USE";
    })(FileHeaderInfo || (FileHeaderInfo = {}));
    var CSVInput;
    (function (CSVInput) {
        CSVInput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CSVInput || (CSVInput = {}));
    var JSONType;
    (function (JSONType) {
        JSONType["DOCUMENT"] = "DOCUMENT";
        JSONType["LINES"] = "LINES";
    })(JSONType || (JSONType = {}));
    var JSONInput;
    (function (JSONInput) {
        JSONInput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(JSONInput || (JSONInput = {}));
    var ParquetInput;
    (function (ParquetInput) {
        ParquetInput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ParquetInput || (ParquetInput = {}));
    var InputSerialization;
    (function (InputSerialization) {
        InputSerialization.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(InputSerialization || (InputSerialization = {}));
    var QuoteFields;
    (function (QuoteFields) {
        QuoteFields["ALWAYS"] = "ALWAYS";
        QuoteFields["ASNEEDED"] = "ASNEEDED";
    })(QuoteFields || (QuoteFields = {}));
    var CSVOutput;
    (function (CSVOutput) {
        CSVOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CSVOutput || (CSVOutput = {}));
    var JSONOutput;
    (function (JSONOutput) {
        JSONOutput.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(JSONOutput || (JSONOutput = {}));
    var OutputSerialization;
    (function (OutputSerialization) {
        OutputSerialization.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(OutputSerialization || (OutputSerialization = {}));
    var SelectParameters;
    (function (SelectParameters) {
        SelectParameters.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(SelectParameters || (SelectParameters = {}));
    var RestoreRequestType;
    (function (RestoreRequestType) {
        RestoreRequestType["SELECT"] = "SELECT";
    })(RestoreRequestType || (RestoreRequestType = {}));
    var RestoreRequest;
    (function (RestoreRequest) {
        RestoreRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.OutputLocation && { OutputLocation: OutputLocation.filterSensitiveLog(obj.OutputLocation) }))); };
    })(RestoreRequest || (RestoreRequest = {}));
    var RestoreObjectRequest;
    (function (RestoreObjectRequest) {
        RestoreObjectRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.RestoreRequest && { RestoreRequest: RestoreRequest.filterSensitiveLog(obj.RestoreRequest) }))); };
    })(RestoreObjectRequest || (RestoreObjectRequest = {}));
    var ContinuationEvent;
    (function (ContinuationEvent) {
        ContinuationEvent.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ContinuationEvent || (ContinuationEvent = {}));
    var EndEvent;
    (function (EndEvent) {
        EndEvent.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(EndEvent || (EndEvent = {}));
    var Progress;
    (function (Progress) {
        Progress.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Progress || (Progress = {}));
    var ProgressEvent;
    (function (ProgressEvent) {
        ProgressEvent.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ProgressEvent || (ProgressEvent = {}));
    var RecordsEvent;
    (function (RecordsEvent) {
        RecordsEvent.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(RecordsEvent || (RecordsEvent = {}));
    var Stats;
    (function (Stats) {
        Stats.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(Stats || (Stats = {}));
    var StatsEvent;
    (function (StatsEvent) {
        StatsEvent.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(StatsEvent || (StatsEvent = {}));
    var SelectObjectContentEventStream;
    (function (SelectObjectContentEventStream) {
        SelectObjectContentEventStream.visit = function (value, visitor) {
            if (value.Records !== undefined)
                return visitor.Records(value.Records);
            if (value.Stats !== undefined)
                return visitor.Stats(value.Stats);
            if (value.Progress !== undefined)
                return visitor.Progress(value.Progress);
            if (value.Cont !== undefined)
                return visitor.Cont(value.Cont);
            if (value.End !== undefined)
                return visitor.End(value.End);
            return visitor._(value.$unknown[0], value.$unknown[1]);
        };
        SelectObjectContentEventStream.filterSensitiveLog = function (obj) {
            var _a;
            if (obj.Records !== undefined)
                return { Records: RecordsEvent.filterSensitiveLog(obj.Records) };
            if (obj.Stats !== undefined)
                return { Stats: StatsEvent.filterSensitiveLog(obj.Stats) };
            if (obj.Progress !== undefined)
                return { Progress: ProgressEvent.filterSensitiveLog(obj.Progress) };
            if (obj.Cont !== undefined)
                return { Cont: ContinuationEvent.filterSensitiveLog(obj.Cont) };
            if (obj.End !== undefined)
                return { End: EndEvent.filterSensitiveLog(obj.End) };
            if (obj.$unknown !== undefined)
                return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
        };
    })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
    var SelectObjectContentOutput;
    (function (SelectObjectContentOutput) {
        SelectObjectContentOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.Payload && { Payload: "STREAMING_CONTENT" }))); };
    })(SelectObjectContentOutput || (SelectObjectContentOutput = {}));
    var RequestProgress;
    (function (RequestProgress) {
        RequestProgress.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(RequestProgress || (RequestProgress = {}));
    var ScanRange;
    (function (ScanRange) {
        ScanRange.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(ScanRange || (ScanRange = {}));
    var SelectObjectContentRequest;
    (function (SelectObjectContentRequest) {
        SelectObjectContentRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
    })(SelectObjectContentRequest || (SelectObjectContentRequest = {}));
    var UploadPartOutput;
    (function (UploadPartOutput) {
        UploadPartOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
    })(UploadPartOutput || (UploadPartOutput = {}));
    var UploadPartRequest;
    (function (UploadPartRequest) {
        UploadPartRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
    })(UploadPartRequest || (UploadPartRequest = {}));
    var CopyPartResult;
    (function (CopyPartResult) {
        CopyPartResult.filterSensitiveLog = function (obj) { return (__assign$b({}, obj)); };
    })(CopyPartResult || (CopyPartResult = {}));
    var UploadPartCopyOutput;
    (function (UploadPartCopyOutput) {
        UploadPartCopyOutput.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
    })(UploadPartCopyOutput || (UploadPartCopyOutput = {}));
    var UploadPartCopyRequest;
    (function (UploadPartCopyRequest) {
        UploadPartCopyRequest.filterSensitiveLog = function (obj) { return (__assign$b(__assign$b(__assign$b({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING }))); };
    })(UploadPartCopyRequest || (UploadPartCopyRequest = {}));

    /**
     * <p>Uploads a part in a multipart upload.</p>
     *          <note>
     *             <p>In this operation, you provide part data in your request. However, you have an option
     *             to specify your existing Amazon S3 object as a data source for the part you are uploading. To
     *             upload a part from an existing object, you use the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a> operation.
     *          </p>
     *          </note>
     *
     *          <p>You must initiate a multipart upload (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>)
     *          before you can upload any part. In response to your initiate request, Amazon S3 returns an
     *          upload ID, a unique identifier, that you must include in your upload part request.</p>
     *          <p>Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely
     *          identifies a part and also defines its position within the object being created. If you
     *          upload a new part using the same part number that was used with a previous part, the
     *          previously uploaded part is overwritten. Each part must be at least 5 MB in size, except
     *          the last part. There is no size limit on the last part of your multipart upload.</p>
     *          <p>To ensure that data is not corrupted when traversing the network, specify the
     *             <code>Content-MD5</code> header in the upload part request. Amazon S3 checks the part data
     *          against the provided MD5 value. If they do not match, Amazon S3 returns an error. </p>
     *
     *          <p>If the upload request is signed with Signature Version 4, then AWS S3 uses the
     *             <code>x-amz-content-sha256</code> header as a checksum instead of
     *             <code>Content-MD5</code>. For more information see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html">Authenticating Requests: Using the Authorization Header (AWS Signature Version
     *             4)</a>. </p>
     *
     *
     *
     *          <p>
     *             <b>Note:</b> After you initiate multipart upload and upload
     *          one or more parts, you must either complete or abort multipart upload in order to stop
     *          getting charged for storage of the uploaded parts. Only after you either complete or abort
     *          multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts
     *          storage.</p>
     *
     *          <p>For more information on multipart uploads, go to <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart Upload Overview</a> in the
     *             <i>Amazon Simple Storage Service Developer Guide </i>.</p>
     *          <p>For information on the permissions required to use the multipart upload API, go to
     *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
     *             Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
     *
     *          <p>You can optionally request server-side encryption where Amazon S3 encrypts your data as it
     *          writes it to disks in its data centers and decrypts it for you when you access it. You have
     *          the option of providing your own encryption key, or you can use the AWS managed encryption
     *          keys. If you choose to provide your own encryption key, the request headers you provide in
     *          the request must match the headers you used in the request to initiate the upload by using
     *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>. For more information, go to <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using Server-Side Encryption</a> in
     *          the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
     *
     *          <p>Server-side encryption is supported by the S3 Multipart Upload actions. Unless you are
     *          using a customer-provided encryption key, you don't need to specify the encryption
     *          parameters in each UploadPart request. Instead, you only need to specify the server-side
     *          encryption parameters in the initial Initiate Multipart request. For more information, see
     *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>.</p>
     *
     *          <p>If you requested server-side encryption using a customer-provided encryption key in your
     *          initiate multipart upload request, you must provide identical encryption information in
     *          each part upload using the following headers.</p>
     *
     *
     *          <ul>
     *             <li>
     *                <p>x-amz-server-side-encryption-customer-algorithm</p>
     *             </li>
     *             <li>
     *                <p>x-amz-server-side-encryption-customer-key</p>
     *             </li>
     *             <li>
     *                <p>x-amz-server-side-encryption-customer-key-MD5</p>
     *             </li>
     *          </ul>
     *
     *          <p class="title">
     *             <b>Special Errors</b>
     *          </p>
     *          <ul>
     *             <li>
     *                <ul>
     *                   <li>
     *                      <p>
     *                         <i>Code: NoSuchUpload</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>
     *                         <i>Cause: The specified multipart upload does not exist. The upload
     *                         ID might be invalid, or the multipart upload might have been aborted or
     *                         completed.</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>
     *                         <i> HTTP Status Code: 404 Not Found </i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>
     *                         <i>SOAP Fault Code Prefix: Client</i>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *          </ul>
     *
     *
     *
     *
     *
     *
     *          <p class="title">
     *             <b>Related Resources</b>
     *          </p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
     *                </p>
     *             </li>
     *          </ul>
     */
    var UploadPartCommand = /** @class */ (function (_super) {
        __extends$3(UploadPartCommand, _super);
        // Start section: command_properties
        // End section: command_properties
        function UploadPartCommand(input) {
            var _this = 
            // Start section: command_constructor
            _super.call(this) || this;
            _this.input = input;
            return _this;
            // End section: command_constructor
        }
        /**
         * @internal
         */
        UploadPartCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.middlewareStack.use(getSsecPlugin(configuration));
            this.middlewareStack.use(getBucketEndpointPlugin(configuration));
            var stack = clientStack.concat(this.middlewareStack);
            var logger = configuration.logger;
            var clientName = "S3Client";
            var commandName = "UploadPartCommand";
            var handlerExecutionContext = {
                logger: logger,
                clientName: clientName,
                commandName: commandName,
                inputFilterSensitiveLog: UploadPartRequest.filterSensitiveLog,
                outputFilterSensitiveLog: UploadPartOutput.filterSensitiveLog,
            };
            var requestHandler = configuration.requestHandler;
            return stack.resolve(function (request) {
                return requestHandler.handle(request.request, options || {});
            }, handlerExecutionContext);
        };
        UploadPartCommand.prototype.serialize = function (input, context) {
            return serializeAws_restXmlUploadPartCommand(input, context);
        };
        UploadPartCommand.prototype.deserialize = function (output, context) {
            return deserializeAws_restXmlUploadPartCommand(output, context);
        };
        return UploadPartCommand;
    }(Command));

    function formatUrl(request) {
        var port = request.port, query = request.query;
        var protocol = request.protocol, path = request.path, hostname = request.hostname;
        if (protocol && protocol.substr(-1) !== ":") {
            protocol += ":";
        }
        if (port) {
            hostname += ":" + port;
        }
        if (path && path.charAt(0) !== "/") {
            path = "/" + path;
        }
        var queryString = query ? buildQueryString(query) : "";
        if (queryString && queryString[0] !== "?") {
            queryString = "?" + queryString;
        }
        return protocol + "//" + hostname + path + queryString;
    }

    function createRequest(client, command) {
        return __awaiter$j(this, void 0, void 0, function () {
            var interceptMiddleware, clientStack, handler;
            var _this = this;
            return __generator$j(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        interceptMiddleware = function (next) { return function (args) { return __awaiter$j(_this, void 0, void 0, function () {
                            return __generator$j(this, function (_a) {
                                return [2 /*return*/, { output: { request: args.request }, response: undefined }];
                            });
                        }); }; };
                        clientStack = client.middlewareStack.clone();
                        // @ts-ignore: add middleware to the last of 'build' step
                        clientStack.add(interceptMiddleware, {
                            step: "build",
                            priority: "low",
                        });
                        handler = command.resolveMiddleware(clientStack, client.config, undefined);
                        return [4 /*yield*/, handler(command).then(function (output) { return output.output.request; })];
                    case 1: 
                    // @ts-ignore
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    }

    var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    var SHA256_HEADER = "X-Amz-Content-Sha256";

    var S3RequestPresigner = /** @class */ (function () {
        function S3RequestPresigner(options) {
            var resolvedOptions = __assign$i({ 
                // Allow `signingName` because we want to support usecase of supply client's resolved config
                // directly. Where service equals signingName.
                service: options.signingName || options.service || "s3", uriEscapePath: options.uriEscapePath || false }, options);
            this.signer = new SignatureV4(resolvedOptions);
        }
        S3RequestPresigner.prototype.presign = function (requestToSign, _a) {
            if (_a === void 0) { _a = {}; }
            var _b = _a.unsignableHeaders, unsignableHeaders = _b === void 0 ? new Set() : _b, _c = _a.unhoistableHeaders, unhoistableHeaders = _c === void 0 ? new Set() : _c, options = __rest$6(_a, ["unsignableHeaders", "unhoistableHeaders"]);
            return __awaiter$j(this, void 0, void 0, function () {
                return __generator$j(this, function (_d) {
                    unsignableHeaders.add("content-type");
                    // S3 requires SSE headers to be signed in headers instead of query
                    // See: https://github.com/aws/aws-sdk-js-v3/issues/1576
                    Object.keys(requestToSign.headers)
                        .map(function (header) { return header.toLowerCase(); })
                        .filter(function (header) { return header.startsWith("x-amz-server-side-encryption"); })
                        .forEach(function (header) {
                        unhoistableHeaders.add(header);
                    });
                    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;
                    if (!requestToSign.headers["host"]) {
                        requestToSign.headers.host = requestToSign.hostname;
                    }
                    return [2 /*return*/, this.signer.presign(requestToSign, __assign$i({ expiresIn: 900, unsignableHeaders: unsignableHeaders,
                            unhoistableHeaders: unhoistableHeaders }, options))];
                });
            });
        };
        return S3RequestPresigner;
    }());

    var bind = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    /*global toString:true*/

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return toString.call(val) === '[object Array]';
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer(val) {
      return toString.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(val) {
      return (typeof FormData !== 'undefined') && (val instanceof FormData);
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (toString.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate(val) {
      return toString.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile(val) {
      return toString.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob(val) {
      return toString.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.replace(/^\s*/, '').replace(/\s*$/, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };
      return error;
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;

        if (utils.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }

          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(resolve, reject, response);

          // Clean up request
          request = null;
        };

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') {
              throw e;
            }
          }
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }

            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
          });
        }

        if (!requestData) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    var defaults = {
      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');
        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
          return JSON.stringify(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        /*eslint no-param-reassign:0*/
        if (typeof data === 'string') {
          try {
            data = JSON.parse(data);
          } catch (e) { /* Ignore */ }
        }
        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };

    defaults.headers = {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData(
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData(
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData(
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      var valueFromConfig2Keys = ['url', 'method', 'data'];
      var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
      var defaultToConfig2Keys = [
        'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
        'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
        'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
        'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
      ];
      var directMergeKeys = ['validateStatus'];

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      }

      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        }
      });

      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });

      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });

      var axiosKeys = valueFromConfig2Keys
        .concat(mergeDeepPropertiesKeys)
        .concat(defaultToConfig2Keys)
        .concat(directMergeKeys);

      var otherKeys = Object
        .keys(config1)
        .concat(Object.keys(config2))
        .filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });

      utils.forEach(otherKeys, mergeDeepProperties);

      return config;
    };

    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      // Hook up interceptors middleware
      var chain = [dispatchRequest, undefined];
      var promise = Promise.resolve(config);

      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });

      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios;

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel(message) {
      this.message = message;
    }

    Cancel.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel.prototype.__CANCEL__ = true;

    var Cancel_1 = Cancel;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return (typeof payload === 'object') && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios_1;

    // Factory for creating new instances
    axios$1.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
    };

    // Expose Cancel & CancelToken
    axios$1.Cancel = Cancel_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    var axios_1 = axios$1;

    // Allow use of default import syntax in TypeScript
    var _default = axios$1;
    axios_1.default = _default;

    var axios = axios_1;

    /*
     * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var logger$d = new ConsoleLogger('axios-http-handler');
    var SEND_PROGRESS_EVENT = 'sendProgress';
    var AxiosHttpHandler = /** @class */ (function () {
        function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {
            if (httpOptions === void 0) { httpOptions = {}; }
            this.httpOptions = httpOptions;
            this.emitter = emitter;
            this.cancelTokenSource = cancelTokenSource;
        }
        AxiosHttpHandler.prototype.destroy = function () {
            // Do nothing. TLS and HTTP/2 connection pooling is handled by the
            // browser.
        };
        AxiosHttpHandler.prototype.handle = function (request, options) {
            var requestTimeoutInMs = this.httpOptions.requestTimeout;
            var emitter = this.emitter;
            var path = request.path;
            if (request.query) {
                var queryString = buildQueryString(request.query);
                if (queryString) {
                    path += "?" + queryString;
                }
            }
            var port = request.port;
            var url = request.protocol + "//" + request.hostname + (port ? ":" + port : '') + path;
            var axiosRequest = {};
            axiosRequest.url = url;
            axiosRequest.method = request.method;
            axiosRequest.headers = request.headers;
            // The host header is automatically added by the browser and adding it explicitly in the
            // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376
            // This is because the host header is a forbidden header for the http client to set
            // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and
            // https://fetch.spec.whatwg.org/#forbidden-header-name
            // The reason we are removing this header here instead of in the aws-sdk's client
            // middleware is that the host header is required to be in the request signature and if
            // we remove it from the middlewares, then the request fails because the header is added
            // by the browser but is absent from the signature.
            delete axiosRequest.headers['host'];
            if (request.body) {
                axiosRequest.data = request.body;
            }
            else {
                // Fix for https://github.com/aws-amplify/amplify-js/issues/5432
                // If the POST request body is empty but content-type header is set, axios is forcibly removing it
                // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755
                // This change is a workaround to set the data as null (instead of undefined) to prevent axios from
                // removing the content-type header. Link for the source code
                // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123
                if (axiosRequest.headers['Content-Type']) {
                    axiosRequest.data = null;
                }
            }
            if (emitter) {
                axiosRequest.onUploadProgress = function (event) {
                    emitter.emit(SEND_PROGRESS_EVENT, event);
                    logger$d.debug(event);
                };
            }
            // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests
            if (this.cancelTokenSource) {
                axiosRequest.cancelToken = this.cancelTokenSource.token;
            }
            // From gamma release, aws-sdk now expects all response type to be of blob or streams
            axiosRequest.responseType = 'blob';
            var raceOfPromises = [
                axios
                    .request(axiosRequest)
                    .then(function (response) {
                    return {
                        response: new HttpResponse({
                            headers: response.headers,
                            statusCode: response.status,
                            body: response.data,
                        }),
                    };
                })
                    .catch(function (error) {
                    // Error
                    logger$d.error(error);
                    throw error;
                }),
                requestTimeout(requestTimeoutInMs),
            ];
            return Promise.race(raceOfPromises);
        };
        return AxiosHttpHandler;
    }());
    function requestTimeout(timeoutInMs) {
        if (timeoutInMs === void 0) { timeoutInMs = 0; }
        return new Promise(function (resolve, reject) {
            if (timeoutInMs) {
                setTimeout(function () {
                    var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
                    timeoutError.name = 'TimeoutError';
                    reject(timeoutError);
                }, timeoutInMs);
            }
        });
    }

    /*
     * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$a = (undefined && undefined.__assign) || function () {
        __assign$a = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$a.apply(this, arguments);
    };
    var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$a = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var logger$c = new ConsoleLogger('AWSS3ProviderManagedUpload');
    var localTestingStorageEndpoint$1 = 'http://localhost:20005';
    var SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';
    var AWSS3ProviderManagedUpload = /** @class */ (function () {
        function AWSS3ProviderManagedUpload(params, opts, emitter) {
            // Defaults
            this.minPartSize = 5 * 1024 * 1024; // in MB
            this.queueSize = 4;
            // Data for current upload
            this.body = null;
            this.params = null;
            this.opts = null;
            this.multiPartMap = [];
            this.cancel = false;
            // Progress reporting
            this.bytesUploaded = 0;
            this.totalBytesToUpload = 0;
            this.emitter = null;
            this.params = params;
            this.opts = opts;
            this.emitter = emitter;
        }
        AWSS3ProviderManagedUpload.prototype.upload = function () {
            return __awaiter$a(this, void 0, void 0, function () {
                var _a, putObjectCommand, s3, uploadId, numberOfPartsToUpload, start, parts;
                return __generator$a(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];
                        case 1:
                            _a.body = _b.sent();
                            this.totalBytesToUpload = this.byteLength(this.body);
                            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 3];
                            // Multipart upload is not required. Upload the sanitized body as is
                            this.params.Body = this.body;
                            putObjectCommand = new PutObjectCommand(this.params);
                            return [4 /*yield*/, this._createNewS3Client(this.opts, this.emitter)];
                        case 2:
                            s3 = _b.sent();
                            return [2 /*return*/, s3.send(putObjectCommand)];
                        case 3: return [4 /*yield*/, this.createMultiPartUpload()];
                        case 4:
                            uploadId = _b.sent();
                            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);
                            start = 0;
                            _b.label = 5;
                        case 5:
                            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 10];
                            /** This first block will try to cancel the upload if the cancel
                             *	request came before any parts uploads have started.
                             **/
                            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];
                        case 6:
                            /** This first block will try to cancel the upload if the cancel
                             *	request came before any parts uploads have started.
                             **/
                            _b.sent();
                            parts = this.createParts(start);
                            return [4 /*yield*/, this.uploadParts(uploadId, parts)];
                        case 7:
                            _b.sent();
                            /** Call cleanup a second time in case there were part upload requests
                             *  in flight. This is to ensure that all parts are cleaned up.
                             */
                            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];
                        case 8:
                            /** Call cleanup a second time in case there were part upload requests
                             *  in flight. This is to ensure that all parts are cleaned up.
                             */
                            _b.sent();
                            _b.label = 9;
                        case 9:
                            start += this.queueSize;
                            return [3 /*break*/, 5];
                        case 10: return [4 /*yield*/, this.finishMultiPartUpload(uploadId)];
                        case 11: 
                        // Step 3: Finalize the upload such that S3 can recreate the file
                        return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        AWSS3ProviderManagedUpload.prototype.createParts = function (startPartNumber) {
            var parts = [];
            var partNumber = startPartNumber;
            for (var bodyStart = startPartNumber * this.minPartSize; bodyStart < this.totalBytesToUpload && parts.length < this.queueSize;) {
                var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);
                parts.push({
                    bodyPart: this.body.slice(bodyStart, bodyEnd),
                    partNumber: ++partNumber,
                    emitter: new events__namespace.EventEmitter(),
                    _lastUploadedBytes: 0,
                });
                bodyStart += this.minPartSize;
            }
            return parts;
        };
        AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {
            return __awaiter$a(this, void 0, void 0, function () {
                var createMultiPartUploadCommand, s3, response;
                var _this = this;
                return __generator$a(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);
                            return [4 /*yield*/, this._createNewS3Client(this.opts)];
                        case 1:
                            s3 = _a.sent();
                            // @aws-sdk/client-s3 seems to be ignoring the `ContentType` parameter, so we
                            // are explicitly adding it via middleware.
                            // https://github.com/aws/aws-sdk-js-v3/issues/2000
                            s3.middlewareStack.add(function (next) { return function (args) {
                                if (_this.params.ContentType &&
                                    args &&
                                    args.request &&
                                    args.request.headers) {
                                    args.request.headers['Content-Type'] = _this.params.ContentType;
                                }
                                return next(args);
                            }; }, {
                                step: 'build',
                            });
                            return [4 /*yield*/, s3.send(createMultiPartUploadCommand)];
                        case 2:
                            response = _a.sent();
                            logger$c.debug(response.UploadId);
                            return [2 /*return*/, response.UploadId];
                    }
                });
            });
        };
        /**
         * @private Not to be extended outside of tests
         * @VisibleFotTesting
         */
        AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {
            return __awaiter$a(this, void 0, void 0, function () {
                var promises, parts_1, parts_1_1, part, uploadPartCommandInput, uploadPartCommand, s3, e_1_1, allResults, i, error_1;
                var e_1, _a;
                return __generator$a(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            promises = [];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 8]);
                            parts_1 = __values(parts), parts_1_1 = parts_1.next();
                            _b.label = 2;
                        case 2:
                            if (!!parts_1_1.done) return [3 /*break*/, 5];
                            part = parts_1_1.value;
                            this.setupEventListener(part);
                            uploadPartCommandInput = {
                                PartNumber: part.partNumber,
                                Body: part.bodyPart,
                                UploadId: uploadId,
                                Key: this.params.Key,
                                Bucket: this.params.Bucket,
                            };
                            uploadPartCommand = new UploadPartCommand(uploadPartCommandInput);
                            return [4 /*yield*/, this._createNewS3Client(this.opts, part.emitter)];
                        case 3:
                            s3 = _b.sent();
                            promises.push(s3.send(uploadPartCommand));
                            _b.label = 4;
                        case 4:
                            parts_1_1 = parts_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _b.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8:
                            _b.trys.push([8, 10, , 11]);
                            return [4 /*yield*/, Promise.all(promises)];
                        case 9:
                            allResults = _b.sent();
                            // The order of resolved promises is the same as input promise order.
                            for (i = 0; i < allResults.length; i++) {
                                this.multiPartMap.push({
                                    PartNumber: parts[i].partNumber,
                                    ETag: allResults[i].ETag,
                                });
                            }
                            return [3 /*break*/, 11];
                        case 10:
                            error_1 = _b.sent();
                            logger$c.error('error happened while uploading a part. Cancelling the multipart upload', error_1);
                            this.cancelUpload();
                            return [2 /*return*/];
                        case 11: return [2 /*return*/];
                    }
                });
            });
        };
        AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {
            return __awaiter$a(this, void 0, void 0, function () {
                var input, completeUploadCommand, s3, data, error_2;
                return __generator$a(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            input = {
                                Bucket: this.params.Bucket,
                                Key: this.params.Key,
                                UploadId: uploadId,
                                MultipartUpload: { Parts: this.multiPartMap },
                            };
                            completeUploadCommand = new CompleteMultipartUploadCommand(input);
                            return [4 /*yield*/, this._createNewS3Client(this.opts)];
                        case 1:
                            s3 = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, s3.send(completeUploadCommand)];
                        case 3:
                            data = _a.sent();
                            return [2 /*return*/, data.Key];
                        case 4:
                            error_2 = _a.sent();
                            logger$c.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);
                            this.cancelUpload();
                            return [2 /*return*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {
            return __awaiter$a(this, void 0, void 0, function () {
                var errorMessage, error_3;
                return __generator$a(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.cancel) return [3 /*break*/, 5];
                            errorMessage = 'Upload was cancelled.';
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.cleanup(uploadId)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_3 = _a.sent();
                            errorMessage += error_3.errorMessage;
                            return [3 /*break*/, 4];
                        case 4: throw new Error(errorMessage);
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {
            this.cancel = true;
        };
        AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {
            return __awaiter$a(this, void 0, void 0, function () {
                var input, s3, data;
                return __generator$a(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Reset this's state
                            this.body = null;
                            this.multiPartMap = [];
                            this.bytesUploaded = 0;
                            this.totalBytesToUpload = 0;
                            input = {
                                Bucket: this.params.Bucket,
                                Key: this.params.Key,
                                UploadId: uploadId,
                            };
                            return [4 /*yield*/, this._createNewS3Client(this.opts)];
                        case 1:
                            s3 = _a.sent();
                            return [4 /*yield*/, s3.send(new AbortMultipartUploadCommand(input))];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, s3.send(new ListPartsCommand(input))];
                        case 3:
                            data = _a.sent();
                            if (data && data.Parts && data.Parts.length > 0) {
                                throw new Error('Multi Part upload clean up failed');
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {
            var _this = this;
            part.emitter.on(SEND_PROGRESS_EVENT, function (progress) {
                _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);
                part._lastUploadedBytes = progress.loaded;
            });
        };
        AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {
            this.bytesUploaded += incrementalUpdate;
            this.emitter.emit(SEND_PROGRESS_EVENT, {
                loaded: this.bytesUploaded,
                total: this.totalBytesToUpload,
                part: partNumber,
                key: this.params.Key,
            });
        };
        AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {
            if (input === null || input === undefined)
                return 0;
            if (typeof input.byteLength === 'number') {
                return input.byteLength;
            }
            else if (typeof input.length === 'number') {
                return input.length;
            }
            else if (typeof input.size === 'number') {
                return input.size;
            }
            else if (typeof input.path === 'string') ;
            else {
                throw new Error('Cannot determine length of ' + input);
            }
        };
        AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {
            return __awaiter$a(this, void 0, void 0, function () {
                return __generator$a(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.isGenericObject(body)) return [3 /*break*/, 1];
                            // Any javascript object
                            return [2 /*return*/, JSON.stringify(body)];
                        case 1:
                            if (!this.isBlob(body)) return [3 /*break*/, 4];
                            if (!Platform.isReactNative) return [3 /*break*/, 3];
                            return [4 /*yield*/, streamCollector(body)];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3: return [2 /*return*/, body];
                        case 4: 
                        // Files, arrayBuffer etc
                        return [2 /*return*/, body];
                    }
                });
            });
        };
        AWSS3ProviderManagedUpload.prototype.isBlob = function (body) {
            return typeof Blob !== 'undefined' && body instanceof Blob;
        };
        AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {
            if (body !== null && typeof body === 'object') {
                try {
                    return !(this.byteLength(body) >= 0);
                }
                catch (error) {
                    // If we cannot determine the length of the body, consider it
                    // as a generic object and upload a stringified version of it
                    return true;
                }
            }
            return false;
        };
        /**
         * @private
         * creates an S3 client with new V3 aws sdk
         */
        AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {
            return __awaiter$a(this, void 0, void 0, function () {
                var credentials, region, dangerouslyConnectToHttpEndpointForTesting, cancelTokenSource, localTestingConfig, client;
                return __generator$a(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._getCredentials()];
                        case 1:
                            credentials = _a.sent();
                            region = config.region, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting, cancelTokenSource = config.cancelTokenSource;
                            localTestingConfig = {};
                            if (dangerouslyConnectToHttpEndpointForTesting) {
                                localTestingConfig = {
                                    endpoint: localTestingStorageEndpoint$1,
                                    tls: false,
                                    bucketEndpoint: false,
                                    forcePathStyle: true,
                                };
                            }
                            client = new S3Client(__assign$a(__assign$a({ region: region,
                                credentials: credentials }, localTestingConfig), { requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource), customUserAgent: getAmplifyUserAgent() }));
                            client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);
                            return [2 /*return*/, client];
                    }
                });
            });
        };
        /**
         * @private
         */
        AWSS3ProviderManagedUpload.prototype._getCredentials = function () {
            return Credentials.get()
                .then(function (credentials) {
                if (!credentials)
                    return false;
                var cred = Credentials.shear(credentials);
                logger$c.debug('set credentials for storage', cred);
                return cred;
            })
                .catch(function (error) {
                logger$c.warn('ensure credentials error', error);
                return false;
            });
        };
        return AWSS3ProviderManagedUpload;
    }());

    var __assign$9 = (undefined && undefined.__assign) || function () {
        __assign$9 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$9.apply(this, arguments);
    };
    var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$9 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var logger$b = new ConsoleLogger('AWSS3Provider');
    var AMPLIFY_SYMBOL$1 = (typeof Symbol !== 'undefined' &&
        typeof Symbol.for === 'function'
        ? Symbol.for('amplify_default')
        : '@@amplify_default');
    var dispatchStorageEvent = function (track, event, attrs, metrics, message) {
        if (track) {
            var data = { attrs: attrs };
            if (metrics) {
                data['metrics'] = metrics;
            }
            Hub.dispatch('storage', {
                event: event,
                data: data,
                message: message,
            }, 'Storage', AMPLIFY_SYMBOL$1);
        }
    };
    var localTestingStorageEndpoint = 'http://localhost:20005';
    /**
     * Provide storage methods to use AWS S3
     */
    var AWSS3Provider = /** @class */ (function () {
        /**
         * Initialize Storage with AWS configurations
         * @param {Object} config - Configuration object for storage
         */
        function AWSS3Provider(config) {
            this._config = config ? config : {};
            logger$b.debug('Storage Options', this._config);
        }
        /**
         * get the category of the plugin
         */
        AWSS3Provider.prototype.getCategory = function () {
            return AWSS3Provider.CATEGORY;
        };
        /**
         * get provider name of the plugin
         */
        AWSS3Provider.prototype.getProviderName = function () {
            return AWSS3Provider.PROVIDER_NAME;
        };
        /**
         * Configure Storage part with aws configuration
         * @param {Object} config - Configuration of the Storage
         * @return {Object} - Current configuration
         */
        AWSS3Provider.prototype.configure = function (config) {
            logger$b.debug('configure Storage', config);
            if (!config)
                return this._config;
            var amplifyConfig = Parser$1.parseMobilehubConfig(config);
            this._config = Object.assign({}, this._config, amplifyConfig.Storage);
            if (!this._config.bucket) {
                logger$b.debug('Do not have bucket yet');
            }
            return this._config;
        };
        /**
         * Get a presigned URL of the file or the object data when download:true
         *
         * @param {string} key - key of the object
         * @param {Object} [config] - { level : private|protected|public, download: true|false }
         * @return - A promise resolves to Amazon S3 presigned URL on success
         */
        AWSS3Provider.prototype.get = function (key, config) {
            return __awaiter$9(this, void 0, void 0, function () {
                var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, prefix, final_key, s3, params, getObjectCommand, response, error_1, signer, request, url, _a, error_2;
                return __generator$9(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this._ensureCredentials()];
                        case 1:
                            credentialsOK = _b.sent();
                            if (!credentialsOK) {
                                return [2 /*return*/, Promise.reject('No credentials')];
                            }
                            opt = Object.assign({}, this._config, config);
                            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track;
                            prefix = this._prefix(opt);
                            final_key = prefix + key;
                            s3 = this._createNewS3Client(opt);
                            logger$b.debug('get ' + key + ' from ' + final_key);
                            params = {
                                Bucket: bucket,
                                Key: final_key,
                            };
                            // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property
                            if (cacheControl)
                                params.ResponseCacheControl = cacheControl;
                            if (contentDisposition)
                                params.ResponseContentDisposition = contentDisposition;
                            if (contentEncoding)
                                params.ResponseContentEncoding = contentEncoding;
                            if (contentLanguage)
                                params.ResponseContentLanguage = contentLanguage;
                            if (contentType)
                                params.ResponseContentType = contentType;
                            if (!(download === true)) return [3 /*break*/, 5];
                            getObjectCommand = new GetObjectCommand(params);
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, s3.send(getObjectCommand)];
                        case 3:
                            response = _b.sent();
                            dispatchStorageEvent(track, 'download', { method: 'get', result: 'success' }, {
                                fileSize: Number(response.Body['size'] || response.Body['length']),
                            }, "Download success for " + key);
                            return [2 /*return*/, response];
                        case 4:
                            error_1 = _b.sent();
                            dispatchStorageEvent(track, 'download', {
                                method: 'get',
                                result: 'failed',
                            }, null, "Download failed with " + error_1.message);
                            throw error_1;
                        case 5:
                            params.Expires = expires || 900; // Default is 15 mins as defined in V2 AWS SDK
                            _b.label = 6;
                        case 6:
                            _b.trys.push([6, 9, , 10]);
                            signer = new S3RequestPresigner(__assign$9({}, s3.config));
                            return [4 /*yield*/, createRequest(s3, new GetObjectCommand(params))];
                        case 7:
                            request = _b.sent();
                            _a = formatUrl;
                            return [4 /*yield*/, signer.presign(request, { expiresIn: params.Expires })];
                        case 8:
                            url = _a.apply(void 0, [(_b.sent())]);
                            dispatchStorageEvent(track, 'getSignedUrl', { method: 'get', result: 'success' }, null, "Signed URL: " + url);
                            return [2 /*return*/, url];
                        case 9:
                            error_2 = _b.sent();
                            logger$b.warn('get signed url error', error_2);
                            dispatchStorageEvent(track, 'getSignedUrl', { method: 'get', result: 'failed' }, null, "Could not get a signed URL for " + key);
                            throw error_2;
                        case 10: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Put a file in S3 bucket specified to configure method
         * @param {string} key - key of the object
         * @param {Object} object - File to be put in Amazon S3 bucket
         * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,
         *  progressCallback: function }
         * @return - promise resolves to object on success
         */
        AWSS3Provider.prototype.put = function (key, object, config) {
            return __awaiter$9(this, void 0, void 0, function () {
                var credentialsOK, opt, bucket, track, progressCallback, contentType, contentDisposition, cacheControl, expires, metadata, tagging, acl, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, type, prefix, final_key, params, emitter, uploader, response, error_3;
                return __generator$9(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ensureCredentials()];
                        case 1:
                            credentialsOK = _a.sent();
                            if (!credentialsOK) {
                                return [2 /*return*/, Promise.reject('No credentials')];
                            }
                            opt = Object.assign({}, this._config, config);
                            bucket = opt.bucket, track = opt.track, progressCallback = opt.progressCallback;
                            contentType = opt.contentType, contentDisposition = opt.contentDisposition, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging, acl = opt.acl;
                            serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;
                            type = contentType ? contentType : 'binary/octet-stream';
                            prefix = this._prefix(opt);
                            final_key = prefix + key;
                            logger$b.debug('put ' + key + ' to ' + final_key);
                            params = {
                                Bucket: bucket,
                                Key: final_key,
                                Body: object,
                                ContentType: type,
                            };
                            if (cacheControl) {
                                params.CacheControl = cacheControl;
                            }
                            if (contentDisposition) {
                                params.ContentDisposition = contentDisposition;
                            }
                            if (expires) {
                                params.Expires = expires;
                            }
                            if (metadata) {
                                params.Metadata = metadata;
                            }
                            if (tagging) {
                                params.Tagging = tagging;
                            }
                            if (serverSideEncryption) {
                                params.ServerSideEncryption = serverSideEncryption;
                                if (SSECustomerAlgorithm) {
                                    params.SSECustomerAlgorithm = SSECustomerAlgorithm;
                                }
                                if (SSECustomerKey) {
                                    params.SSECustomerKey = SSECustomerKey;
                                }
                                if (SSECustomerKeyMD5) {
                                    params.SSECustomerKeyMD5 = SSECustomerKeyMD5;
                                }
                                if (SSEKMSKeyId) {
                                    params.SSEKMSKeyId = SSEKMSKeyId;
                                }
                            }
                            emitter = new events__namespace.EventEmitter();
                            uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);
                            if (acl) {
                                params.ACL = acl;
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            emitter.on('sendProgress', function (progress) {
                                if (progressCallback) {
                                    if (typeof progressCallback === 'function') {
                                        progressCallback(progress);
                                    }
                                    else {
                                        logger$b.warn('progressCallback should be a function, not a ' +
                                            typeof progressCallback);
                                    }
                                }
                            });
                            return [4 /*yield*/, uploader.upload()];
                        case 3:
                            response = _a.sent();
                            logger$b.debug('upload result', response);
                            dispatchStorageEvent(track, 'upload', { method: 'put', result: 'success' }, null, "Upload success for " + key);
                            return [2 /*return*/, {
                                    key: key,
                                }];
                        case 4:
                            error_3 = _a.sent();
                            logger$b.warn('error uploading', error_3);
                            dispatchStorageEvent(track, 'upload', { method: 'put', result: 'failed' }, null, "Error uploading " + key);
                            throw error_3;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Remove the object for specified key
         * @param {string} key - key of the object
         * @param {Object} [config] - { level : private|protected|public }
         * @return - Promise resolves upon successful removal of the object
         */
        AWSS3Provider.prototype.remove = function (key, config) {
            return __awaiter$9(this, void 0, void 0, function () {
                var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_4;
                return __generator$9(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ensureCredentials()];
                        case 1:
                            credentialsOK = _a.sent();
                            if (!credentialsOK) {
                                return [2 /*return*/, Promise.reject('No credentials')];
                            }
                            opt = Object.assign({}, this._config, config);
                            bucket = opt.bucket, track = opt.track;
                            prefix = this._prefix(opt);
                            final_key = prefix + key;
                            s3 = this._createNewS3Client(opt);
                            logger$b.debug('remove ' + key + ' from ' + final_key);
                            params = {
                                Bucket: bucket,
                                Key: final_key,
                            };
                            deleteObjectCommand = new DeleteObjectCommand(params);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, s3.send(deleteObjectCommand)];
                        case 3:
                            response = _a.sent();
                            dispatchStorageEvent(track, 'delete', { method: 'remove', result: 'success' }, null, "Deleted " + key + " successfully");
                            return [2 /*return*/, response];
                        case 4:
                            error_4 = _a.sent();
                            dispatchStorageEvent(track, 'delete', { method: 'remove', result: 'failed' }, null, "Deletion of " + key + " failed with " + error_4);
                            throw error_4;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * List bucket objects relative to the level and prefix specified
         * @param {string} path - the path that contains objects
         * @param {Object} [config] - { level : private|protected|public }
         * @return - Promise resolves to list of keys for all objects in path
         */
        AWSS3Provider.prototype.list = function (path, config) {
            return __awaiter$9(this, void 0, void 0, function () {
                var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params, listObjectsCommand, response, list, error_5;
                return __generator$9(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ensureCredentials()];
                        case 1:
                            credentialsOK = _a.sent();
                            if (!credentialsOK) {
                                return [2 /*return*/, Promise.reject('No credentials')];
                            }
                            opt = Object.assign({}, this._config, config);
                            bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;
                            prefix = this._prefix(opt);
                            final_path = prefix + path;
                            s3 = this._createNewS3Client(opt);
                            logger$b.debug('list ' + path + ' from ' + final_path);
                            params = {
                                Bucket: bucket,
                                Prefix: final_path,
                                MaxKeys: maxKeys,
                            };
                            listObjectsCommand = new ListObjectsCommand(params);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, s3.send(listObjectsCommand)];
                        case 3:
                            response = _a.sent();
                            list = [];
                            if (response && response.Contents) {
                                list = response.Contents.map(function (item) {
                                    return {
                                        key: item.Key.substr(prefix.length),
                                        eTag: item.ETag,
                                        lastModified: item.LastModified,
                                        size: item.Size,
                                    };
                                });
                            }
                            dispatchStorageEvent(track, 'list', { method: 'list', result: 'success' }, null, list.length + " items returned from list operation");
                            logger$b.debug('list', list);
                            return [2 /*return*/, list];
                        case 4:
                            error_5 = _a.sent();
                            logger$b.warn('list error', error_5);
                            dispatchStorageEvent(track, 'list', { method: 'list', result: 'failed' }, null, "Listing items failed: " + error_5.message);
                            throw error_5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @private
         */
        AWSS3Provider.prototype._ensureCredentials = function () {
            var _this = this;
            return Credentials.get()
                .then(function (credentials) {
                if (!credentials)
                    return false;
                var cred = Credentials.shear(credentials);
                logger$b.debug('set credentials for storage', cred);
                _this._config.credentials = cred;
                return true;
            })
                .catch(function (error) {
                logger$b.warn('ensure credentials error', error);
                return false;
            });
        };
        /**
         * @private
         */
        AWSS3Provider.prototype._prefix = function (config) {
            var credentials = config.credentials, level = config.level;
            var customPrefix = config.customPrefix || {};
            var identityId = config.identityId || credentials.identityId;
            var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') +
                identityId +
                '/';
            var protectedPath = (customPrefix.protected !== undefined
                ? customPrefix.protected
                : 'protected/') +
                identityId +
                '/';
            var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';
            switch (level) {
                case 'private':
                    return privatePath;
                case 'protected':
                    return protectedPath;
                default:
                    return publicPath;
            }
        };
        /**
         * @private creates an S3 client with new V3 aws sdk
         */
        AWSS3Provider.prototype._createNewS3Client = function (config, emitter) {
            var region = config.region, credentials = config.credentials, cancelTokenSource = config.cancelTokenSource, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;
            var localTestingConfig = {};
            if (dangerouslyConnectToHttpEndpointForTesting) {
                localTestingConfig = {
                    endpoint: localTestingStorageEndpoint,
                    tls: false,
                    bucketEndpoint: false,
                    forcePathStyle: true,
                };
            }
            var s3client = new S3Client(__assign$9(__assign$9({ region: region,
                credentials: credentials, customUserAgent: getAmplifyUserAgent() }, localTestingConfig), { requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource) }));
            return s3client;
        };
        AWSS3Provider.CATEGORY = 'Storage';
        AWSS3Provider.PROVIDER_NAME = 'AWSS3';
        return AWSS3Provider;
    }());

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$8 = (undefined && undefined.__assign) || function () {
        __assign$8 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$8.apply(this, arguments);
    };
    var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$8 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$3 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var logger$a = new ConsoleLogger('StorageClass');
    var DEFAULT_PROVIDER = 'AWSS3';
    /**
     * Provide storage methods to use AWS S3
     */
    var Storage$1 = /** @class */ (function () {
        /**
         * Initialize Storage
         * @param {Object} config - Configuration object for storage
         */
        function Storage() {
            this._config = {};
            this._pluggables = [];
            this._cancelTokenSourceMap = new WeakMap();
            logger$a.debug('Storage Options', this._config);
            this.get = this.get.bind(this);
            this.put = this.put.bind(this);
            this.remove = this.remove.bind(this);
            this.list = this.list.bind(this);
        }
        Storage.prototype.getModuleName = function () {
            return 'Storage';
        };
        /**
         * add plugin into Storage category
         * @param {Object} pluggable - an instance of the plugin
         */
        Storage.prototype.addPluggable = function (pluggable) {
            if (pluggable && pluggable.getCategory() === 'Storage') {
                this._pluggables.push(pluggable);
                var config = {};
                config = pluggable.configure(this._config[pluggable.getProviderName()]);
                return config;
            }
        };
        /**
         * Get the plugin object
         * @param providerName - the name of the plugin
         */
        Storage.prototype.getPluggable = function (providerName) {
            var pluggable = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === providerName; });
            if (pluggable === undefined) {
                logger$a.debug('No plugin found with providerName', providerName);
                return null;
            }
            else
                return pluggable;
        };
        /**
         * Remove the plugin object
         * @param providerName - the name of the plugin
         */
        Storage.prototype.removePluggable = function (providerName) {
            this._pluggables = this._pluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });
            return;
        };
        /**
         * Configure Storage
         * @param {Object} config - Configuration object for storage
         * @return {Object} - Current configuration
         */
        Storage.prototype.configure = function (config) {
            var _this = this;
            logger$a.debug('configure Storage');
            if (!config)
                return this._config;
            var amplifyConfig = Parser$1.parseMobilehubConfig(config);
            var storageKeysFromConfig = Object.keys(amplifyConfig.Storage);
            var storageArrayKeys = [
                'bucket',
                'region',
                'level',
                'track',
                'customPrefix',
                'serverSideEncryption',
                'SSECustomerAlgorithm',
                'SSECustomerKey',
                'SSECustomerKeyMD5',
                'SSEKMSKeyId',
            ];
            var isInStorageArrayKeys = function (k) {
                return storageArrayKeys.some(function (x) { return x === k; });
            };
            var checkConfigKeysFromArray = function (k) {
                return k.find(function (k) { return isInStorageArrayKeys(k); });
            };
            if (storageKeysFromConfig &&
                checkConfigKeysFromArray(storageKeysFromConfig) &&
                !amplifyConfig.Storage[DEFAULT_PROVIDER]) {
                amplifyConfig.Storage[DEFAULT_PROVIDER] = {};
            }
            Object.entries(amplifyConfig.Storage).map(function (_a) {
                var _b = __read$3(_a, 2), key = _b[0], value = _b[1];
                if (key && isInStorageArrayKeys(key) && value !== undefined) {
                    amplifyConfig.Storage[DEFAULT_PROVIDER][key] = value;
                    delete amplifyConfig.Storage[key];
                }
            });
            // only update new values for each provider
            Object.keys(amplifyConfig.Storage).forEach(function (providerName) {
                if (typeof amplifyConfig.Storage[providerName] !== 'string') {
                    _this._config[providerName] = __assign$8(__assign$8({}, _this._config[providerName]), amplifyConfig.Storage[providerName]);
                }
            });
            this._pluggables.forEach(function (pluggable) {
                pluggable.configure(_this._config[pluggable.getProviderName()]);
            });
            if (this._pluggables.length === 0) {
                this.addPluggable(new AWSS3Provider());
            }
            return this._config;
        };
        Storage.prototype.getCancellableTokenSource = function () {
            return axios.CancelToken.source();
        };
        Storage.prototype.updateRequestToBeCancellable = function (request, cancelTokenSource) {
            this._cancelTokenSourceMap.set(request, cancelTokenSource);
        };
        /**
         * Cancels an inflight request
         *
         * @param {Promise<any>} request - The request to cancel
         * @param {string} [message] - A message to include in the cancelation exception
         */
        Storage.prototype.cancel = function (request, message) {
            var cancelTokenSource = this._cancelTokenSourceMap.get(request);
            if (cancelTokenSource) {
                cancelTokenSource.cancel(message);
            }
            else {
                logger$a.debug('The request does not map to any cancel token');
            }
        };
        /**
         * Get a presigned URL of the file or the object data when download:true
         *
         * @param {string} key - key of the object
         * @param {Object} [config] - { level : private|protected|public, download: true|false }
         * @return - A promise resolves to either a presigned url or the object
         */
        Storage.prototype.get = function (key, config) {
            var _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;
            var prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });
            if (prov === undefined) {
                logger$a.debug('No plugin found with providerName', provider);
                return Promise.reject('No plugin found in Storage for the provider');
            }
            var cancelTokenSource = this.getCancellableTokenSource();
            var responsePromise = prov.get(key, __assign$8(__assign$8({}, config), { cancelTokenSource: cancelTokenSource }));
            this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);
            return responsePromise;
        };
        Storage.prototype.isCancelError = function (error) {
            return axios.isCancel(error);
        };
        /**
         * Put a file in storage bucket specified to configure method
         * @param {string} key - key of the object
         * @param {Object} object - File to be put in bucket
         * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,
         *  progressCallback: function }
         * @return - promise resolves to object on success
         */
        Storage.prototype.put = function (key, object, config) {
            var _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;
            var prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });
            if (prov === undefined) {
                logger$a.debug('No plugin found with providerName', provider);
                return Promise.reject('No plugin found in Storage for the provider');
            }
            var cancelTokenSource = this.getCancellableTokenSource();
            var responsePromise = prov.put(key, object, __assign$8(__assign$8({}, config), { cancelTokenSource: cancelTokenSource }));
            this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);
            return responsePromise;
        };
        /**
         * Remove the object for specified key
         * @param {string} key - key of the object
         * @param {Object} [config] - { level : private|protected|public }
         * @return - Promise resolves upon successful removal of the object
         */
        Storage.prototype.remove = function (key, config) {
            return __awaiter$8(this, void 0, void 0, function () {
                var _a, provider, prov;
                return __generator$8(this, function (_b) {
                    _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;
                    prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });
                    if (prov === undefined) {
                        logger$a.debug('No plugin found with providerName', provider);
                        return [2 /*return*/, Promise.reject('No plugin found in Storage for the provider')];
                    }
                    return [2 /*return*/, prov.remove(key, config)];
                });
            });
        };
        /**
         * List bucket objects relative to the level and prefix specified
         * @param {String} path - the path that contains objects
         * @param {Object} [config] - { level : private|protected|public, maxKeys: NUMBER }
         * @return - Promise resolves to list of keys for all objects in path
         */
        Storage.prototype.list = function (path, config) {
            return __awaiter$8(this, void 0, void 0, function () {
                var _a, provider, prov;
                return __generator$8(this, function (_b) {
                    _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;
                    prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });
                    if (prov === undefined) {
                        logger$a.debug('No plugin found with providerName', provider);
                        return [2 /*return*/, Promise.reject('No plugin found in Storage for the provider')];
                    }
                    return [2 /*return*/, prov.list(path, config)];
                });
            });
        };
        return Storage;
    }());

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$7 = (undefined && undefined.__assign) || function () {
        __assign$7 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$7.apply(this, arguments);
    };
    var logger$9 = new ConsoleLogger('Storage');
    var _instance = null;
    var getInstance = function () {
        if (_instance) {
            return _instance;
        }
        logger$9.debug('Create Storage Instance, debug');
        _instance = new Storage$1();
        _instance.vault = new Storage$1();
        var old_configure = _instance.configure;
        _instance.configure = function (options) {
            logger$9.debug('storage configure called');
            var vaultConfig = __assign$7({}, old_configure.call(_instance, options));
            // set level private for each provider for the vault
            Object.keys(vaultConfig).forEach(function (providerName) {
                if (typeof vaultConfig[providerName] !== 'string') {
                    vaultConfig[providerName] = __assign$7(__assign$7({}, vaultConfig[providerName]), { level: 'private' });
                }
            });
            logger$9.debug('storage vault configure called');
            _instance.vault.configure(vaultConfig);
        };
        return _instance;
    };
    var Storage = getInstance();
    Amplify.register(Storage);

    /*
     * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var __assign$6 = (undefined && undefined.__assign) || function () {
        __assign$6 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$6.apply(this, arguments);
    };
    var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$7 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __rest$4 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var logger$8 = new ConsoleLogger('RestClient');
    /**
    * HTTP Client for REST requests. Send and receive JSON data.
    * Sign request with AWS credentials if available
    * Usage:
    <pre>
    const restClient = new RestClient();
    restClient.get('...')
        .then(function(data) {
            console.log(data);
        })
        .catch(err => console.log(err));
    </pre>
    */
    var RestClient = /** @class */ (function () {
        /**
         * @param {RestClientOptions} [options] - Instance options
         */
        function RestClient(options) {
            this._region = 'us-east-1'; // this will be updated by endpoint function
            this._service = 'execute-api'; // this can be updated by endpoint function
            this._custom_header = undefined; // this can be updated by endpoint function
            /**
             * This weak map provides functionality to let clients cancel
             * in-flight axios requests. https://github.com/axios/axios#cancellation
             *
             * 1. For every axios request, a unique cancel token is generated and added in the request.
             * 2. Promise for fulfilling the request is then mapped to that unique cancel token.
             * 3. The promise is returned to the client.
             * 4. Clients can either wait for the promise to fulfill or call `API.cancel(promise)` to cancel the request.
             * 5. If `API.cancel(promise)` is called, then the corresponding cancel token is retrieved from the map below.
             * 6. Promise returned to the client will be in rejected state with the error provided during cancel.
             * 7. Clients can check if the error is because of cancelling by calling `API.isCancel(error)`.
             *
             * For more details, see https://github.com/aws-amplify/amplify-js/pull/3769#issuecomment-552660025
             */
            this._cancelTokenMap = null;
            this.Credentials = Credentials;
            this._options = options;
            logger$8.debug('API Options', this._options);
            if (this._cancelTokenMap == null) {
                this._cancelTokenMap = new WeakMap();
            }
        }
        /**
        * Update AWS credentials
        * @param {AWSCredentials} credentials - AWS credentials
        *
        updateCredentials(credentials: AWSCredentials) {
            this.options.credentials = credentials;
        }
    */
        /**
         * Basic HTTP request. Customizable
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {string} method - Request HTTP method
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.ajax = function (urlOrApiInfo, method, init) {
            return __awaiter$7(this, void 0, void 0, function () {
                var parsed_url, url$1, region, service, custom_header, params, libraryHeaders, userAgent, initParams, isAllResponse, custom_header_obj, _a, _b, parsedUrl;
                var _this = this;
                return __generator$7(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            logger$8.debug(method, urlOrApiInfo);
                            region = 'us-east-1';
                            service = 'execute-api';
                            custom_header = undefined;
                            if (typeof urlOrApiInfo === 'string') {
                                parsed_url = this._parseUrl(urlOrApiInfo);
                                url$1 = urlOrApiInfo;
                            }
                            else {
                                (url$1 = urlOrApiInfo.endpoint, custom_header = urlOrApiInfo.custom_header, region = urlOrApiInfo.region, service = urlOrApiInfo.service);
                                parsed_url = this._parseUrl(urlOrApiInfo.endpoint);
                            }
                            params = {
                                method: method,
                                url: url$1,
                                host: parsed_url.host,
                                path: parsed_url.path,
                                headers: {},
                                data: null,
                                responseType: 'json',
                                timeout: 0,
                                cancelToken: null,
                            };
                            libraryHeaders = {};
                            if (Platform.isReactNative) {
                                userAgent = Platform.userAgent || 'aws-amplify/0.1.x';
                                libraryHeaders = {
                                    'User-Agent': userAgent,
                                };
                            }
                            initParams = Object.assign({}, init);
                            isAllResponse = initParams.response;
                            if (initParams.body) {
                                if (typeof FormData === 'function' &&
                                    initParams.body instanceof FormData) {
                                    libraryHeaders['Content-Type'] = 'multipart/form-data';
                                    params.data = initParams.body;
                                }
                                else {
                                    libraryHeaders['Content-Type'] = 'application/json; charset=UTF-8';
                                    params.data = JSON.stringify(initParams.body);
                                }
                            }
                            if (initParams.responseType) {
                                params.responseType = initParams.responseType;
                            }
                            if (initParams.withCredentials) {
                                params['withCredentials'] = initParams.withCredentials;
                            }
                            if (initParams.timeout) {
                                params.timeout = initParams.timeout;
                            }
                            if (initParams.cancellableToken) {
                                params.cancelToken = initParams.cancellableToken.token;
                            }
                            params['signerServiceInfo'] = initParams.signerServiceInfo;
                            if (!(typeof custom_header === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, custom_header()];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = undefined;
                            _c.label = 3;
                        case 3:
                            custom_header_obj = _a;
                            params.headers = __assign$6(__assign$6(__assign$6({}, libraryHeaders), custom_header_obj), initParams.headers);
                            _b = url.parse(url$1, true, true), _b.search, parsedUrl = __rest$4(_b, ["search"]);
                            params.url = url.format(__assign$6(__assign$6({}, parsedUrl), { query: __assign$6(__assign$6({}, parsedUrl.query), (initParams.queryStringParameters || {})) }));
                            // Do not sign the request if client has added 'Authorization' header,
                            // which means custom authorizer.
                            if (typeof params.headers['Authorization'] !== 'undefined') {
                                params.headers = Object.keys(params.headers).reduce(function (acc, k) {
                                    if (params.headers[k]) {
                                        acc[k] = params.headers[k];
                                    }
                                    return acc;
                                    // tslint:disable-next-line:align
                                }, {});
                                return [2 /*return*/, this._request(params, isAllResponse)];
                            }
                            // Signing the request in case there credentials are available
                            return [2 /*return*/, this.Credentials.get().then(function (credentials) {
                                    return _this._signed(__assign$6({}, params), credentials, isAllResponse, {
                                        region: region,
                                        service: service,
                                    }).catch(function (error) {
                                        if (DateUtils.isClockSkewError(error)) {
                                            var headers = error.response.headers;
                                            var dateHeader = headers && (headers.date || headers.Date);
                                            var responseDate = new Date(dateHeader);
                                            var requestDate = DateUtils.getDateFromHeaderString(params.headers['x-amz-date']);
                                            if (DateUtils.isClockSkewed(requestDate, responseDate)) {
                                                DateUtils.setClockOffset(responseDate.getTime() - requestDate.getTime());
                                                return _this.ajax(urlOrApiInfo, method, init);
                                            }
                                        }
                                        throw error;
                                    });
                                }, function (err) {
                                    logger$8.debug('No credentials available, the request will be unsigned');
                                    return _this._request(params, isAllResponse);
                                })];
                    }
                });
            });
        };
        /**
         * GET HTTP request
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {JSON} init - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.get = function (urlOrApiInfo, init) {
            return this.ajax(urlOrApiInfo, 'GET', init);
        };
        /**
         * PUT HTTP request
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {json} init - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.put = function (urlOrApiInfo, init) {
            return this.ajax(urlOrApiInfo, 'PUT', init);
        };
        /**
         * PATCH HTTP request
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {json} init - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.patch = function (urlOrApiInfo, init) {
            return this.ajax(urlOrApiInfo, 'PATCH', init);
        };
        /**
         * POST HTTP request
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {json} init - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.post = function (urlOrApiInfo, init) {
            return this.ajax(urlOrApiInfo, 'POST', init);
        };
        /**
         * DELETE HTTP request
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {json} init - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.del = function (urlOrApiInfo, init) {
            return this.ajax(urlOrApiInfo, 'DELETE', init);
        };
        /**
         * HEAD HTTP request
         * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information
         * @param {json} init - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestClient.prototype.head = function (urlOrApiInfo, init) {
            return this.ajax(urlOrApiInfo, 'HEAD', init);
        };
        /**
         * Cancel an inflight API request
         * @param {Promise<any>} request - The request promise to cancel
         * @param {string} [message] - A message to include in the cancelation exception
         */
        RestClient.prototype.cancel = function (request, message) {
            var source = this._cancelTokenMap.get(request);
            if (source) {
                source.cancel(message);
            }
            return true;
        };
        /**
         * Checks to see if an error thrown is from an api request cancellation
         * @param {any} error - Any error
         * @return {boolean} - A boolean indicating if the error was from an api request cancellation
         */
        RestClient.prototype.isCancel = function (error) {
            return axios.isCancel(error);
        };
        /**
         * Retrieves a new and unique cancel token which can be
         * provided in an axios request to be cancelled later.
         */
        RestClient.prototype.getCancellableToken = function () {
            return axios.CancelToken.source();
        };
        /**
         * Updates the weakmap with a response promise and its
         * cancel token such that the cancel token can be easily
         * retrieved (and used for cancelling the request)
         */
        RestClient.prototype.updateRequestToBeCancellable = function (promise, cancelTokenSource) {
            this._cancelTokenMap.set(promise, cancelTokenSource);
        };
        /**
         * Getting endpoint for API
         * @param {string} apiName - The name of the api
         * @return {string} - The endpoint of the api
         */
        RestClient.prototype.endpoint = function (apiName) {
            var _this = this;
            var cloud_logic_array = this._options.endpoints;
            var response = '';
            if (!Array.isArray(cloud_logic_array)) {
                return response;
            }
            cloud_logic_array.forEach(function (v) {
                if (v.name === apiName) {
                    response = v.endpoint;
                    if (typeof v.region === 'string') {
                        _this._region = v.region;
                    }
                    else if (typeof _this._options.region === 'string') {
                        _this._region = _this._options.region;
                    }
                    if (typeof v.service === 'string') {
                        _this._service = v.service || 'execute-api';
                    }
                    else {
                        _this._service = 'execute-api';
                    }
                    if (typeof v.custom_header === 'function') {
                        _this._custom_header = v.custom_header;
                    }
                    else {
                        _this._custom_header = undefined;
                    }
                }
            });
            return response;
        };
        /** private methods **/
        RestClient.prototype._signed = function (params, credentials, isAllResponse, _a) {
            var service = _a.service, region = _a.region;
            var signerServiceInfoParams = params.signerServiceInfo, otherParams = __rest$4(params, ["signerServiceInfo"]);
            var endpoint_region = region || this._region || this._options.region;
            var endpoint_service = service || this._service || this._options.service;
            var creds = {
                secret_key: credentials.secretAccessKey,
                access_key: credentials.accessKeyId,
                session_token: credentials.sessionToken,
            };
            var endpointInfo = {
                region: endpoint_region,
                service: endpoint_service,
            };
            var signerServiceInfo = Object.assign(endpointInfo, signerServiceInfoParams);
            var signed_params = Signer.sign(otherParams, creds, signerServiceInfo);
            if (signed_params.data) {
                signed_params.body = signed_params.data;
            }
            logger$8.debug('Signed Request: ', signed_params);
            delete signed_params.headers['host'];
            return axios(signed_params)
                .then(function (response) { return (isAllResponse ? response : response.data); })
                .catch(function (error) {
                logger$8.debug(error);
                throw error;
            });
        };
        RestClient.prototype._request = function (params, isAllResponse) {
            if (isAllResponse === void 0) { isAllResponse = false; }
            return axios(params)
                .then(function (response) { return (isAllResponse ? response : response.data); })
                .catch(function (error) {
                logger$8.debug(error);
                throw error;
            });
        };
        RestClient.prototype._parseUrl = function (url) {
            var parts = url.split('/');
            return {
                host: parts[2],
                path: '/' + parts.slice(3).join('/'),
            };
        };
        return RestClient;
    }());

    var __assign$5 = (undefined && undefined.__assign) || function () {
        __assign$5 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$5.apply(this, arguments);
    };
    var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$6 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __rest$3 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var logger$7 = new ConsoleLogger('RestAPI');
    /**
     * Export Cloud Logic APIs
     */
    var RestAPIClass = /** @class */ (function () {
        /**
         * Initialize Rest API with AWS configuration
         * @param {Object} options - Configuration object for API
         */
        function RestAPIClass(options) {
            this._api = null;
            this.Credentials = Credentials;
            this._options = options;
            logger$7.debug('API Options', this._options);
        }
        RestAPIClass.prototype.getModuleName = function () {
            return 'RestAPI';
        };
        /**
         * Configure API part with aws configurations
         * @param {Object} config - Configuration of the API
         * @return {Object} - The current configuration
         */
        RestAPIClass.prototype.configure = function (options) {
            var _a = options || {}, _b = _a.API, API = _b === void 0 ? {} : _b, otherOptions = __rest$3(_a, ["API"]);
            var opt = __assign$5(__assign$5({}, otherOptions), API);
            logger$7.debug('configure Rest API', { opt: opt });
            if (opt['aws_project_region']) {
                if (opt['aws_cloud_logic_custom']) {
                    var custom = opt['aws_cloud_logic_custom'];
                    opt.endpoints =
                        typeof custom === 'string' ? JSON.parse(custom) : custom;
                }
                opt = Object.assign({}, opt, {
                    region: opt['aws_project_region'],
                    header: {},
                });
            }
            if (Array.isArray(opt.endpoints)) {
                // Check if endpoints has custom_headers and validate if is a function
                opt.endpoints.forEach(function (endpoint) {
                    if (typeof endpoint.custom_header !== 'undefined' &&
                        typeof endpoint.custom_header !== 'function') {
                        logger$7.warn('Rest API ' + endpoint.name + ', custom_header should be a function');
                        endpoint.custom_header = undefined;
                    }
                });
            }
            else if (this._options && Array.isArray(this._options.endpoints)) {
                opt.endpoints = this._options.endpoints;
            }
            else {
                opt.endpoints = [];
            }
            this._options = Object.assign({}, this._options, opt);
            this.createInstance();
            return this._options;
        };
        /**
         * Create an instance of API for the library
         * @return - A promise of true if Success
         */
        RestAPIClass.prototype.createInstance = function () {
            logger$7.debug('create Rest API instance');
            this._api = new RestClient(this._options);
            // Share Amplify instance with client for SSR
            this._api.Credentials = this.Credentials;
            return true;
        };
        /**
         * Make a GET request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestAPIClass.prototype.get = function (apiName, path, init) {
            try {
                var apiInfo = this.getEndpointInfo(apiName, path);
                var cancellableToken = this._api.getCancellableToken();
                var initParams = Object.assign({}, init);
                initParams.cancellableToken = cancellableToken;
                var responsePromise = this._api.get(apiInfo, initParams);
                this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                return responsePromise;
            }
            catch (err) {
                return Promise.reject(err.message);
            }
        };
        /**
         * Make a POST request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestAPIClass.prototype.post = function (apiName, path, init) {
            try {
                var apiInfo = this.getEndpointInfo(apiName, path);
                var cancellableToken = this._api.getCancellableToken();
                var initParams = Object.assign({}, init);
                initParams.cancellableToken = cancellableToken;
                var responsePromise = this._api.post(apiInfo, initParams);
                this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                return responsePromise;
            }
            catch (err) {
                return Promise.reject(err.message);
            }
        };
        /**
         * Make a PUT request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestAPIClass.prototype.put = function (apiName, path, init) {
            try {
                var apiInfo = this.getEndpointInfo(apiName, path);
                var cancellableToken = this._api.getCancellableToken();
                var initParams = Object.assign({}, init);
                initParams.cancellableToken = cancellableToken;
                var responsePromise = this._api.put(apiInfo, initParams);
                this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                return responsePromise;
            }
            catch (err) {
                return Promise.reject(err.message);
            }
        };
        /**
         * Make a PATCH request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestAPIClass.prototype.patch = function (apiName, path, init) {
            try {
                var apiInfo = this.getEndpointInfo(apiName, path);
                var cancellableToken = this._api.getCancellableToken();
                var initParams = Object.assign({}, init);
                initParams.cancellableToken = cancellableToken;
                var responsePromise = this._api.patch(apiInfo, initParams);
                this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                return responsePromise;
            }
            catch (err) {
                return Promise.reject(err.message);
            }
        };
        /**
         * Make a DEL request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestAPIClass.prototype.del = function (apiName, path, init) {
            try {
                var apiInfo = this.getEndpointInfo(apiName, path);
                var cancellableToken = this._api.getCancellableToken();
                var initParams = Object.assign({}, init);
                initParams.cancellableToken = cancellableToken;
                var responsePromise = this._api.del(apiInfo, initParams);
                this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                return responsePromise;
            }
            catch (err) {
                return Promise.reject(err.message);
            }
        };
        /**
         * Make a HEAD request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        RestAPIClass.prototype.head = function (apiName, path, init) {
            try {
                var apiInfo = this.getEndpointInfo(apiName, path);
                var cancellableToken = this._api.getCancellableToken();
                var initParams = Object.assign({}, init);
                initParams.cancellableToken = cancellableToken;
                var responsePromise = this._api.head(apiInfo, initParams);
                this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                return responsePromise;
            }
            catch (err) {
                return Promise.reject(err.message);
            }
        };
        /**
         * Checks to see if an error thrown is from an api request cancellation
         * @param {any} error - Any error
         * @return {boolean} - A boolean indicating if the error was from an api request cancellation
         */
        RestAPIClass.prototype.isCancel = function (error) {
            return this._api.isCancel(error);
        };
        /**
         * Cancels an inflight request
         * @param {any} request - request to cancel
         * @return {boolean} - A boolean indicating if the request was cancelled
         */
        RestAPIClass.prototype.cancel = function (request, message) {
            return this._api.cancel(request, message);
        };
        /**
         * Getting endpoint for API
         * @param {string} apiName - The name of the api
         * @return {string} - The endpoint of the api
         */
        RestAPIClass.prototype.endpoint = function (apiName) {
            return __awaiter$6(this, void 0, void 0, function () {
                return __generator$6(this, function (_a) {
                    return [2 /*return*/, this._api.endpoint(apiName)];
                });
            });
        };
        /**
         * Getting endpoint info for API
         * @param {string} apiName - The name of the api
         * @param {string} path - The path of the api that is going to accessed
         * @return {ApiInfo} - The endpoint information for that api-name
         */
        RestAPIClass.prototype.getEndpointInfo = function (apiName, path) {
            var cloud_logic_array = this._options.endpoints;
            if (!Array.isArray(cloud_logic_array)) {
                throw new Error("API category not configured");
            }
            var apiConfig = cloud_logic_array.find(function (api) { return api.name === apiName; });
            if (!apiConfig) {
                throw new Error("API " + apiName + " does not exist");
            }
            var response = {
                endpoint: apiConfig.endpoint + path,
            };
            if (typeof apiConfig.region === 'string') {
                response.region = apiConfig.region;
            }
            else if (typeof this._options.region === 'string') {
                response.region = this._options.region;
            }
            if (typeof apiConfig.service === 'string') {
                response.service = apiConfig.service || 'execute-api';
            }
            else {
                response.service = 'execute-api';
            }
            if (typeof apiConfig.custom_header === 'function') {
                response.custom_header = apiConfig.custom_header;
            }
            else {
                response.custom_header = undefined;
            }
            return response;
        };
        return RestAPIClass;
    }());
    var RestAPI = new RestAPIClass(null);
    Amplify.register(RestAPI);

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Represents a location in a Source.
     */

    /**
     * Takes a Source and a UTF-8 character offset, and returns the corresponding
     * line and column as a SourceLocation.
     */
    function getLocation(source, position) {
      var lineRegexp = /\r\n|[\n\r]/g;
      var line = 1;
      var column = position + 1;
      var match;

      while ((match = lineRegexp.exec(source.body)) && match.index < position) {
        line += 1;
        column = position + 1 - (match.index + match[0].length);
      }

      return {
        line: line,
        column: column
      };
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Prints a GraphQLError to a string, representing useful location information
     * about the error's position in the source.
     */
    function printError(error) {
      var printedLocations = [];

      if (error.nodes) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = error.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value;

            if (node.loc) {
              printedLocations.push(highlightSourceAtLocation(node.loc.source, getLocation(node.loc.source, node.loc.start)));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else if (error.source && error.locations) {
        var source = error.source;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = error.locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var location = _step2.value;
            printedLocations.push(highlightSourceAtLocation(source, location));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\n\n') + '\n';
    }
    /**
     * Render a helpful description of the location of the error in the GraphQL
     * Source document.
     */

    function highlightSourceAtLocation(source, location) {
      var firstLineColumnOffset = source.locationOffset.column - 1;
      var body = whitespace(firstLineColumnOffset) + source.body;
      var lineIndex = location.line - 1;
      var lineOffset = source.locationOffset.line - 1;
      var lineNum = location.line + lineOffset;
      var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;
      var columnNum = location.column + columnOffset;
      var lines = body.split(/\r\n|[\n\r]/g);
      return "".concat(source.name, " (").concat(lineNum, ":").concat(columnNum, ")\n") + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
      ["".concat(lineNum - 1, ": "), lines[lineIndex - 1]], ["".concat(lineNum, ": "), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1, ": "), lines[lineIndex + 1]]]);
    }

    function printPrefixedLines(lines) {
      var existingLines = lines.filter(function (_ref) {
        _ref[0];
            var line = _ref[1];
        return line !== undefined;
      });
      var padLen = 0;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = existingLines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _ref4 = _step3.value;
          var prefix = _ref4[0];
          padLen = Math.max(padLen, prefix.length);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return existingLines.map(function (_ref3) {
        var prefix = _ref3[0],
            line = _ref3[1];
        return lpad(padLen, prefix) + line;
      }).join('\n');
    }

    function whitespace(len) {
      return Array(len + 1).join(' ');
    }

    function lpad(len, str) {
      return whitespace(len - str.length) + str;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */
    function GraphQLError( // eslint-disable-line no-redeclare
    message, nodes, source, positions, path, originalError, extensions) {
      // Compute list of blame nodes.
      var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.


      var _source = source;

      if (!_source && _nodes) {
        var node = _nodes[0];
        _source = node && node.loc && node.loc.source;
      }

      var _positions = positions;

      if (!_positions && _nodes) {
        _positions = _nodes.reduce(function (list, node) {
          if (node.loc) {
            list.push(node.loc.start);
          }

          return list;
        }, []);
      }

      if (_positions && _positions.length === 0) {
        _positions = undefined;
      }

      var _locations;

      if (positions && source) {
        _locations = positions.map(function (pos) {
          return getLocation(source, pos);
        });
      } else if (_nodes) {
        _locations = _nodes.reduce(function (list, node) {
          if (node.loc) {
            list.push(getLocation(node.loc.source, node.loc.start));
          }

          return list;
        }, []);
      }

      var _extensions = extensions || originalError && originalError.extensions;

      Object.defineProperties(this, {
        message: {
          value: message,
          // By being enumerable, JSON.stringify will include `message` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: true,
          writable: true
        },
        locations: {
          // Coercing falsey values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: _locations || undefined,
          // By being enumerable, JSON.stringify will include `locations` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: Boolean(_locations)
        },
        path: {
          // Coercing falsey values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: path || undefined,
          // By being enumerable, JSON.stringify will include `path` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: Boolean(path)
        },
        nodes: {
          value: _nodes || undefined
        },
        source: {
          value: _source || undefined
        },
        positions: {
          value: _positions || undefined
        },
        originalError: {
          value: originalError
        },
        extensions: {
          // Coercing falsey values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: _extensions || undefined,
          // By being enumerable, JSON.stringify will include `path` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: Boolean(_extensions)
        }
      }); // Include (non-enumerable) stack trace.

      if (originalError && originalError.stack) {
        Object.defineProperty(this, 'stack', {
          value: originalError.stack,
          writable: true,
          configurable: true
        });
      } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, GraphQLError);
      } else {
        Object.defineProperty(this, 'stack', {
          value: Error().stack,
          writable: true,
          configurable: true
        });
      }
    }
    GraphQLError.prototype = Object.create(Error.prototype, {
      constructor: {
        value: GraphQLError
      },
      name: {
        value: 'GraphQLError'
      },
      toString: {
        value: function toString() {
          return printError(this);
        }
      }
    });

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * A visitor is provided to visit, it contains the collection of
     * relevant functions to be called during the visitor's traversal.
     */

    /**
     * A visitor is comprised of visit functions, which are called on each node
     * during the visitor's traversal.
     */

    /**
     * A KeyMap describes each the traversable properties of each kind of node.
     */
    var QueryDocumentKeys = {
      Name: [],
      Document: ['definitions'],
      OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
      VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
      Variable: ['name'],
      SelectionSet: ['selections'],
      Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
      Argument: ['name', 'value'],
      FragmentSpread: ['name', 'directives'],
      InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
      FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ['values'],
      ObjectValue: ['fields'],
      ObjectField: ['name', 'value'],
      Directive: ['name', 'arguments'],
      NamedType: ['name'],
      ListType: ['type'],
      NonNullType: ['type'],
      SchemaDefinition: ['directives', 'operationTypes'],
      OperationTypeDefinition: ['type'],
      ScalarTypeDefinition: ['description', 'name', 'directives'],
      ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
      InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
      InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],
      UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
      EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
      EnumValueDefinition: ['description', 'name', 'directives'],
      InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
      DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
      SchemaExtension: ['directives', 'operationTypes'],
      ScalarTypeExtension: ['name', 'directives'],
      ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      InterfaceTypeExtension: ['name', 'directives', 'fields'],
      UnionTypeExtension: ['name', 'directives', 'types'],
      EnumTypeExtension: ['name', 'directives', 'values'],
      InputObjectTypeExtension: ['name', 'directives', 'fields']
    };
    var BREAK = {};
    /**
     * visit() will walk through an AST using a depth first traversal, calling
     * the visitor's enter function at each node in the traversal, and calling the
     * leave function after visiting that node and all of its child nodes.
     *
     * By returning different values from the enter and leave functions, the
     * behavior of the visitor can be altered, including skipping over a sub-tree of
     * the AST (by returning false), editing the AST by returning a value or null
     * to remove the value, or to stop the whole traversal by returning BREAK.
     *
     * When using visit() to edit an AST, the original AST will not be modified, and
     * a new version of the AST with the changes applied will be returned from the
     * visit function.
     *
     *     const editedAST = visit(ast, {
     *       enter(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: skip visiting this node
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       },
     *       leave(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: no action
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       }
     *     });
     *
     * Alternatively to providing enter() and leave() functions, a visitor can
     * instead provide functions named the same as the kinds of AST nodes, or
     * enter/leave visitors at a named key, leading to four permutations of
     * visitor API:
     *
     * 1) Named visitors triggered when entering a node a specific kind.
     *
     *     visit(ast, {
     *       Kind(node) {
     *         // enter the "Kind" node
     *       }
     *     })
     *
     * 2) Named visitors that trigger upon entering and leaving a node of
     *    a specific kind.
     *
     *     visit(ast, {
     *       Kind: {
     *         enter(node) {
     *           // enter the "Kind" node
     *         }
     *         leave(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     *
     * 3) Generic visitors that trigger upon entering and leaving any node.
     *
     *     visit(ast, {
     *       enter(node) {
     *         // enter any node
     *       },
     *       leave(node) {
     *         // leave any node
     *       }
     *     })
     *
     * 4) Parallel visitors for entering and leaving nodes of a specific kind.
     *
     *     visit(ast, {
     *       enter: {
     *         Kind(node) {
     *           // enter the "Kind" node
     *         }
     *       },
     *       leave: {
     *         Kind(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     */

    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

      /* eslint-disable no-undef-init */
      var stack = undefined;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = undefined;
      var key = undefined;
      var parent = undefined;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      /* eslint-enable no-undef-init */

      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;

        if (isLeaving) {
          key = ancestors.length === 0 ? undefined : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();

          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};

              for (var k in node) {
                if (node.hasOwnProperty(k)) {
                  clone[k] = node[k];
                }
              }

              node = clone;
            }

            var editOffset = 0;

            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];

              if (inArray) {
                editKey -= editOffset;
              }

              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }

          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : undefined;
          node = parent ? parent[key] : newRoot;

          if (node === null || node === undefined) {
            continue;
          }

          if (parent) {
            path.push(key);
          }
        }

        var result = void 0;

        if (!Array.isArray(node)) {
          if (!isNode$1(node)) {
            throw new Error('Invalid AST Node: ' + JSON.stringify(node));
          }

          var visitFn = getVisitFn(visitor, node.kind, isLeaving);

          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);

            if (result === BREAK) {
              break;
            }

            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== undefined) {
              edits.push([key, result]);

              if (!isLeaving) {
                if (isNode$1(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }

        if (result === undefined && isEdited) {
          edits.push([key, node]);
        }

        if (isLeaving) {
          path.pop();
        } else {
          stack = {
            inArray: inArray,
            index: index,
            keys: keys,
            edits: edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : visitorKeys[node.kind] || [];
          index = -1;
          edits = [];

          if (parent) {
            ancestors.push(parent);
          }

          parent = node;
        }
      } while (stack !== undefined);

      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }

      return newRoot;
    }

    function isNode$1(maybeNode) {
      return Boolean(maybeNode && typeof maybeNode.kind === 'string');
    }
    /**
     * Given a visitor instance, if it is leaving or not, and a node kind, return
     * the function the visitor runtime should call.
     */

    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];

      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') {
          // { Kind() {} }
          return kindVisitor;
        }

        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

        if (typeof kindSpecificVisitor === 'function') {
          // { Kind: { enter() {}, leave() {} } }
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

        if (specificVisitor) {
          if (typeof specificVisitor === 'function') {
            // { enter() {}, leave() {} }
            return specificVisitor;
          }

          var specificKindVisitor = specificVisitor[kind];

          if (typeof specificKindVisitor === 'function') {
            // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
          }
        }
      }
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    /**
     * Converts an AST into a string, using one set of reasonable
     * formatting rules.
     */

    function print(ast) {
      return visit(ast, {
        leave: printDocASTReducer
      });
    }
    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return '$' + node.name;
      },
      // Document
      Document: function Document(node) {
        return join(node.definitions, '\n\n') + '\n';
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
        // the query short form.

        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue,
            directives = _ref.directives;
        return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
        return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name,
            value = _ref4.value;
        return name + ': ' + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name,
            directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
        return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
        return (// Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value,
            isBlockString = _ref10.block;
        return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
      },
      NullValue: function NullValue() {
        return 'null';
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name,
            value = _ref15.value;
        return name + ': ' + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name,
            args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
      },
      // Type System Definitions
      SchemaDefinition: function SchemaDefinition(_ref20) {
        var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
        return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
      },
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation,
            type = _ref21.type;
        return operation + ': ' + type;
      },
      ScalarTypeDefinition: addDescription(function (_ref22) {
        var name = _ref22.name,
            directives = _ref22.directives;
        return join(['scalar', name, join(directives, ' ')], ' ');
      }),
      ObjectTypeDefinition: addDescription(function (_ref23) {
        var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
        return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      FieldDefinition: addDescription(function (_ref24) {
        var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
        return name + (args.every(function (arg) {
          return arg.indexOf('\n') === -1;
        }) ? wrap('(', join(args, ', '), ')') : wrap('(\n', indent(join(args, '\n')), '\n)')) + ': ' + type + wrap(' ', join(directives, ' '));
      }),
      InputValueDefinition: addDescription(function (_ref25) {
        var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
        return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
      }),
      InterfaceTypeDefinition: addDescription(function (_ref26) {
        var name = _ref26.name,
            directives = _ref26.directives,
            fields = _ref26.fields;
        return join(['interface', name, join(directives, ' '), block(fields)], ' ');
      }),
      UnionTypeDefinition: addDescription(function (_ref27) {
        var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
        return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      }),
      EnumTypeDefinition: addDescription(function (_ref28) {
        var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
        return join(['enum', name, join(directives, ' '), block(values)], ' ');
      }),
      EnumValueDefinition: addDescription(function (_ref29) {
        var name = _ref29.name,
            directives = _ref29.directives;
        return join([name, join(directives, ' ')], ' ');
      }),
      InputObjectTypeDefinition: addDescription(function (_ref30) {
        var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
        return join(['input', name, join(directives, ' '), block(fields)], ' ');
      }),
      DirectiveDefinition: addDescription(function (_ref31) {
        var name = _ref31.name,
            args = _ref31.arguments,
            locations = _ref31.locations;
        return 'directive @' + name + (args.every(function (arg) {
          return arg.indexOf('\n') === -1;
        }) ? wrap('(', join(args, ', '), ')') : wrap('(\n', indent(join(args, '\n')), '\n)')) + ' on ' + join(locations, ' | ');
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives,
            operationTypes = _ref32.operationTypes;
        return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name,
            directives = _ref33.directives;
        return join(['extend scalar', name, join(directives, ' ')], ' ');
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name,
            interfaces = _ref34.interfaces,
            directives = _ref34.directives,
            fields = _ref34.fields;
        return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name,
            directives = _ref35.directives,
            fields = _ref35.fields;
        return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name,
            directives = _ref36.directives,
            types = _ref36.types;
        return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name,
            directives = _ref37.directives,
            values = _ref37.values;
        return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name,
            directives = _ref38.directives,
            fields = _ref38.fields;
        return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
      }
    };

    function addDescription(cb) {
      return function (node) {
        return join([node.description, cb(node)], '\n');
      };
    }
    /**
     * Given maybeArray, print an empty string if it is null or empty, otherwise
     * print all items together separated by separator if provided
     */


    function join(maybeArray, separator) {
      return maybeArray ? maybeArray.filter(function (x) {
        return x;
      }).join(separator || '') : '';
    }
    /**
     * Given array, print each item on its own line, wrapped in an
     * indented "{ }" block.
     */


    function block(array) {
      return array && array.length !== 0 ? '{\n' + indent(join(array, '\n')) + '\n}' : '';
    }
    /**
     * If maybeString is not null or empty, then wrap with start and end, otherwise
     * print an empty string.
     */


    function wrap(start, maybeString, end) {
      return maybeString ? start + maybeString + (end || '') : '';
    }

    function indent(maybeString) {
      return maybeString && '  ' + maybeString.replace(/\n/g, '\n  ');
    }
    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     */


    function printBlockString(value, isDescription) {
      var escaped = value.replace(/"""/g, '\\"""');
      return (value[0] === ' ' || value[0] === '\t') && value.indexOf('\n') === -1 ? "\"\"\"".concat(escaped.replace(/"$/, '"\n'), "\"\"\"") : "\"\"\"\n".concat(isDescription ? escaped : indent(escaped), "\n\"\"\"");
    }

    function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Used to print values in error messages.
     */
    function inspect(value) {
      return value && _typeof(value) === 'object' ? typeof value.inspect === 'function' ? value.inspect() : Array.isArray(value) ? '[' + value.map(inspect).join(', ') + ']' : '{' + Object.keys(value).map(function (k) {
        return "".concat(k, ": ").concat(inspect(value[k]));
      }).join(', ') + '}' : typeof value === 'string' ? '"' + value + '"' : typeof value === 'function' ? "[function ".concat(value.name, "]") : String(value);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */
    function invariant(condition, message) {
      /* istanbul ignore else */
      if (!condition) {
        throw new Error(message);
      }
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * The `applyToStringTag()` function checks first to see if the runtime
     * supports the `Symbol` class and then if the `Symbol.toStringTag` constant
     * is defined as a `Symbol` instance. If both conditions are met, the
     * Symbol.toStringTag property is defined as a getter that returns the
     * supplied class constructor's name.
     *
     * @method applyToStringTag
     *
     * @param {Class<any>} classObject a class such as Object, String, Number but
     * typically one of your own creation through the class keyword; `class A {}`,
     * for example.
     */
    function applyToStringTag(classObject) {
      if (typeof Symbol === 'function' && Symbol.toStringTag) {
        Object.defineProperty(classObject.prototype, Symbol.toStringTag, {
          get: function get() {
            return this.constructor.name;
          }
        });
      }
    }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    /**
     * A representation of source input to GraphQL.
     * `name` and `locationOffset` are optional. They are useful for clients who
     * store GraphQL documents in source files; for example, if the GraphQL input
     * starts at line 40 in a file named Foo.graphql, it might be useful for name to
     * be "Foo.graphql" and location to be `{ line: 40, column: 0 }`.
     * line and column in locationOffset are 1-indexed
     */
    var Source = function Source(body, name, locationOffset) {
      _defineProperty(this, "body", void 0);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "locationOffset", void 0);

      this.body = body;
      this.name = name || 'GraphQL request';
      this.locationOffset = locationOffset || {
        line: 1,
        column: 1
      };
      !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;
      !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;
    }; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported

    applyToStringTag(Source);

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */
    /**
     * Produces a GraphQLError representing a syntax error, containing useful
     * descriptive information about the syntax error's position in the source.
     */

    function syntaxError(source, position, description) {
      return new GraphQLError("Syntax Error: ".concat(description), undefined, source, [position]);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Produces the value of a block string from its parsed raw value, similar to
     * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.
     *
     * This implements the GraphQL spec's BlockStringValue() static algorithm.
     */
    function blockStringValue(rawString) {
      // Expand a block string's raw value into independent lines.
      var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

      var commonIndent = null;

      for (var i = 1; i < lines.length; i++) {
        var line = lines[i];
        var indent = leadingWhitespace(line);

        if (indent < line.length && (commonIndent === null || indent < commonIndent)) {
          commonIndent = indent;

          if (commonIndent === 0) {
            break;
          }
        }
      }

      if (commonIndent) {
        for (var _i = 1; _i < lines.length; _i++) {
          lines[_i] = lines[_i].slice(commonIndent);
        }
      } // Remove leading and trailing blank lines.


      while (lines.length > 0 && isBlank(lines[0])) {
        lines.shift();
      }

      while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
        lines.pop();
      } // Return a string of the lines joined with U+000A.


      return lines.join('\n');
    }

    function leadingWhitespace(str) {
      var i = 0;

      while (i < str.length && (str[i] === ' ' || str[i] === '\t')) {
        i++;
      }

      return i;
    }

    function isBlank(str) {
      return leadingWhitespace(str) === str.length;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */
    /**
     * Given a Source object, this returns a Lexer for that source.
     * A Lexer is a stateful stream generator in that every time
     * it is advanced, it returns the next token in the Source. Assuming the
     * source lexes, the final Token emitted by the lexer will be of kind
     * EOF, after which the lexer will repeatedly return the same EOF token
     * whenever called.
     */

    function createLexer(source, options) {
      var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);
      var lexer = {
        source: source,
        options: options,
        lastToken: startOfFileToken,
        token: startOfFileToken,
        line: 1,
        lineStart: 0,
        advance: advanceLexer,
        lookahead: lookahead
      };
      return lexer;
    }

    function advanceLexer() {
      this.lastToken = this.token;
      var token = this.token = this.lookahead();
      return token;
    }

    function lookahead() {
      var token = this.token;

      if (token.kind !== TokenKind.EOF) {
        do {
          // Note: next is only mutable during parsing, so we cast to allow this.
          token = token.next || (token.next = readToken(this, token));
        } while (token.kind === TokenKind.COMMENT);
      }

      return token;
    }
    /**
     * The return type of createLexer.
     */


    /**
     * An exported enum describing the different kinds of tokens that the
     * lexer emits.
     */
    var TokenKind = Object.freeze({
      SOF: '<SOF>',
      EOF: '<EOF>',
      BANG: '!',
      DOLLAR: '$',
      AMP: '&',
      PAREN_L: '(',
      PAREN_R: ')',
      SPREAD: '...',
      COLON: ':',
      EQUALS: '=',
      AT: '@',
      BRACKET_L: '[',
      BRACKET_R: ']',
      BRACE_L: '{',
      PIPE: '|',
      BRACE_R: '}',
      NAME: 'Name',
      INT: 'Int',
      FLOAT: 'Float',
      STRING: 'String',
      BLOCK_STRING: 'BlockString',
      COMMENT: 'Comment'
    });
    /**
     * The enum type representing the token kinds values.
     */

    /**
     * A helper function to describe a token as a string for debugging
     */
    function getTokenDesc(token) {
      var value = token.value;
      return value ? "".concat(token.kind, " \"").concat(value, "\"") : token.kind;
    }
    var charCodeAt = String.prototype.charCodeAt;
    var slice = String.prototype.slice;
    /**
     * Helper function for constructing the Token object.
     */

    function Tok(kind, start, end, line, column, prev, value) {
      this.kind = kind;
      this.start = start;
      this.end = end;
      this.line = line;
      this.column = column;
      this.value = value;
      this.prev = prev;
      this.next = null;
    } // Print a simplified form when appearing in JSON/util.inspect.


    Tok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {
      return {
        kind: this.kind,
        value: this.value,
        line: this.line,
        column: this.column
      };
    };

    function printCharCode(code) {
      return (// NaN/undefined represents access beyond the end of the file.
        isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.
        code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
        "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"")
      );
    }
    /**
     * Gets the next token from the source starting at the given position.
     *
     * This skips over whitespace and comments until it finds the next lexable
     * token, then lexes punctuators immediately or calls the appropriate helper
     * function for more complicated tokens.
     */


    function readToken(lexer, prev) {
      var source = lexer.source;
      var body = source.body;
      var bodyLength = body.length;
      var pos = positionAfterWhitespace(body, prev.end, lexer);
      var line = lexer.line;
      var col = 1 + pos - lexer.lineStart;

      if (pos >= bodyLength) {
        return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
      }

      var code = charCodeAt.call(body, pos); // SourceCharacter

      switch (code) {
        // !
        case 33:
          return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);
        // #

        case 35:
          return readComment(source, pos, line, col, prev);
        // $

        case 36:
          return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);
        // &

        case 38:
          return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);
        // (

        case 40:
          return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);
        // )

        case 41:
          return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);
        // .

        case 46:
          if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {
            return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);
          }

          break;
        // :

        case 58:
          return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);
        // =

        case 61:
          return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);
        // @

        case 64:
          return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);
        // [

        case 91:
          return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);
        // ]

        case 93:
          return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);
        // {

        case 123:
          return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);
        // |

        case 124:
          return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);
        // }

        case 125:
          return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);
        // A-Z _ a-z

        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          return readName(source, pos, line, col, prev);
        // - 0-9

        case 45:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return readNumber(source, pos, code, line, col, prev);
        // "

        case 34:
          if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {
            return readBlockString(source, pos, line, col, prev);
          }

          return readString(source, pos, line, col, prev);
      }

      throw syntaxError(source, pos, unexpectedCharacterMessage(code));
    }
    /**
     * Report a message that an unexpected character was encountered.
     */


    function unexpectedCharacterMessage(code) {
      if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
        return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
      }

      if (code === 39) {
        // '
        return "Unexpected single quote character ('), did you mean to use " + 'a double quote (")?';
      }

      return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
    }
    /**
     * Reads from body starting at startPosition until it finds a non-whitespace
     * or commented character, then returns the position of that character for
     * lexing.
     */


    function positionAfterWhitespace(body, startPosition, lexer) {
      var bodyLength = body.length;
      var position = startPosition;

      while (position < bodyLength) {
        var code = charCodeAt.call(body, position); // tab | space | comma | BOM

        if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {
          ++position;
        } else if (code === 10) {
          // new line
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 13) {
          // carriage return
          if (charCodeAt.call(body, position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }

          ++lexer.line;
          lexer.lineStart = position;
        } else {
          break;
        }
      }

      return position;
    }
    /**
     * Reads a comment token from the source file.
     *
     * #[\u0009\u0020-\uFFFF]*
     */


    function readComment(source, start, line, col, prev) {
      var body = source.body;
      var code;
      var position = start;

      do {
        code = charCodeAt.call(body, ++position);
      } while (code !== null && ( // SourceCharacter but not LineTerminator
      code > 0x001f || code === 0x0009));

      return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));
    }
    /**
     * Reads a number token from the source file, either a float
     * or an int depending on whether a decimal point appears.
     *
     * Int:   -?(0|[1-9][0-9]*)
     * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
     */


    function readNumber(source, start, firstCode, line, col, prev) {
      var body = source.body;
      var code = firstCode;
      var position = start;
      var isFloat = false;

      if (code === 45) {
        // -
        code = charCodeAt.call(body, ++position);
      }

      if (code === 48) {
        // 0
        code = charCodeAt.call(body, ++position);

        if (code >= 48 && code <= 57) {
          throw syntaxError(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
        }
      } else {
        position = readDigits(source, position, code);
        code = charCodeAt.call(body, position);
      }

      if (code === 46) {
        // .
        isFloat = true;
        code = charCodeAt.call(body, ++position);
        position = readDigits(source, position, code);
        code = charCodeAt.call(body, position);
      }

      if (code === 69 || code === 101) {
        // E e
        isFloat = true;
        code = charCodeAt.call(body, ++position);

        if (code === 43 || code === 45) {
          // + -
          code = charCodeAt.call(body, ++position);
        }

        position = readDigits(source, position, code);
      }

      return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));
    }
    /**
     * Returns the new position in the source after reading digits.
     */


    function readDigits(source, start, firstCode) {
      var body = source.body;
      var position = start;
      var code = firstCode;

      if (code >= 48 && code <= 57) {
        // 0 - 9
        do {
          code = charCodeAt.call(body, ++position);
        } while (code >= 48 && code <= 57); // 0 - 9


        return position;
      }

      throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    }
    /**
     * Reads a string token from the source file.
     *
     * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
     */


    function readString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 1;
      var chunkStart = position;
      var code = 0;
      var value = '';

      while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator
      code !== 0x000a && code !== 0x000d) {
        // Closing Quote (")
        if (code === 34) {
          value += slice.call(body, chunkStart, position);
          return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);
        } // SourceCharacter


        if (code < 0x0020 && code !== 0x0009) {
          throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }

        ++position;

        if (code === 92) {
          // \
          value += slice.call(body, chunkStart, position - 1);
          code = charCodeAt.call(body, position);

          switch (code) {
            case 34:
              value += '"';
              break;

            case 47:
              value += '/';
              break;

            case 92:
              value += '\\';
              break;

            case 98:
              value += '\b';
              break;

            case 102:
              value += '\f';
              break;

            case 110:
              value += '\n';
              break;

            case 114:
              value += '\r';
              break;

            case 116:
              value += '\t';
              break;

            case 117:
              // u
              var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));

              if (charCode < 0) {
                throw syntaxError(source, position, 'Invalid character escape sequence: ' + "\\u".concat(body.slice(position + 1, position + 5), "."));
              }

              value += String.fromCharCode(charCode);
              position += 4;
              break;

            default:
              throw syntaxError(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
          }

          ++position;
          chunkStart = position;
        }
      }

      throw syntaxError(source, position, 'Unterminated string.');
    }
    /**
     * Reads a block string token from the source file.
     *
     * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
     */


    function readBlockString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 3;
      var chunkStart = position;
      var code = 0;
      var rawValue = '';

      while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {
        // Closing Triple-Quote (""")
        if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {
          rawValue += slice.call(body, chunkStart, position);
          return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));
        } // SourceCharacter


        if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
          throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        } // Escape Triple-Quote (\""")


        if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {
          rawValue += slice.call(body, chunkStart, position) + '"""';
          position += 4;
          chunkStart = position;
        } else {
          ++position;
        }
      }

      throw syntaxError(source, position, 'Unterminated string.');
    }
    /**
     * Converts four hexidecimal chars to the integer that the
     * string represents. For example, uniCharCode('0','0','0','f')
     * will return 15, and uniCharCode('0','0','f','f') returns 255.
     *
     * Returns a negative number on error, if a char was invalid.
     *
     * This is implemented by noting that char2hex() returns -1 on error,
     * which means the result of ORing the char2hex() will also be negative.
     */


    function uniCharCode(a, b, c, d) {
      return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
    }
    /**
     * Converts a hex character to its integer value.
     * '0' becomes 0, '9' becomes 9
     * 'A' becomes 10, 'F' becomes 15
     * 'a' becomes 10, 'f' becomes 15
     *
     * Returns -1 on error.
     */


    function char2hex(a) {
      return a >= 48 && a <= 57 ? a - 48 // 0-9
      : a >= 65 && a <= 70 ? a - 55 // A-F
      : a >= 97 && a <= 102 ? a - 87 // a-f
      : -1;
    }
    /**
     * Reads an alphanumeric + underscore name from the source.
     *
     * [_A-Za-z][_0-9A-Za-z]*
     */


    function readName(source, start, line, col, prev) {
      var body = source.body;
      var bodyLength = body.length;
      var position = start + 1;
      var code = 0;

      while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _
      code >= 48 && code <= 57 || // 0-9
      code >= 65 && code <= 90 || // A-Z
      code >= 97 && code <= 122) // a-z
      ) {
        ++position;
      }

      return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * The set of allowed kind values for AST nodes.
     */
    var Kind = Object.freeze({
      // Name
      NAME: 'Name',
      // Document
      DOCUMENT: 'Document',
      OPERATION_DEFINITION: 'OperationDefinition',
      VARIABLE_DEFINITION: 'VariableDefinition',
      SELECTION_SET: 'SelectionSet',
      FIELD: 'Field',
      ARGUMENT: 'Argument',
      // Fragments
      FRAGMENT_SPREAD: 'FragmentSpread',
      INLINE_FRAGMENT: 'InlineFragment',
      FRAGMENT_DEFINITION: 'FragmentDefinition',
      // Values
      VARIABLE: 'Variable',
      INT: 'IntValue',
      FLOAT: 'FloatValue',
      STRING: 'StringValue',
      BOOLEAN: 'BooleanValue',
      NULL: 'NullValue',
      ENUM: 'EnumValue',
      LIST: 'ListValue',
      OBJECT: 'ObjectValue',
      OBJECT_FIELD: 'ObjectField',
      // Directives
      DIRECTIVE: 'Directive',
      // Types
      NAMED_TYPE: 'NamedType',
      LIST_TYPE: 'ListType',
      NON_NULL_TYPE: 'NonNullType',
      // Type System Definitions
      SCHEMA_DEFINITION: 'SchemaDefinition',
      OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
      // Type Definitions
      SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
      OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
      FIELD_DEFINITION: 'FieldDefinition',
      INPUT_VALUE_DEFINITION: 'InputValueDefinition',
      INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
      UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
      ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
      ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
      INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
      // Directive Definitions
      DIRECTIVE_DEFINITION: 'DirectiveDefinition',
      // Type System Extensions
      SCHEMA_EXTENSION: 'SchemaExtension',
      // Type Extensions
      SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
      OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
      INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
      UNION_TYPE_EXTENSION: 'UnionTypeExtension',
      ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
      INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
    });
    /**
     * The enum type representing the possible kind values of AST nodes.
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * The set of allowed directive location values.
     */
    var DirectiveLocation = Object.freeze({
      // Request Definitions
      QUERY: 'QUERY',
      MUTATION: 'MUTATION',
      SUBSCRIPTION: 'SUBSCRIPTION',
      FIELD: 'FIELD',
      FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
      FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
      INLINE_FRAGMENT: 'INLINE_FRAGMENT',
      VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
      // Type System Definitions
      SCHEMA: 'SCHEMA',
      SCALAR: 'SCALAR',
      OBJECT: 'OBJECT',
      FIELD_DEFINITION: 'FIELD_DEFINITION',
      ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
      INTERFACE: 'INTERFACE',
      UNION: 'UNION',
      ENUM: 'ENUM',
      ENUM_VALUE: 'ENUM_VALUE',
      INPUT_OBJECT: 'INPUT_OBJECT',
      INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
    });
    /**
     * The enum type representing the directive location values.
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */
    /**
     * Configuration options to control parser behavior
     */

    /**
     * Given a GraphQL source, parses it into a Document.
     * Throws GraphQLError if a syntax error is encountered.
     */
    function parse(source, options) {
      var sourceObj = typeof source === 'string' ? new Source(source) : source;

      if (!(sourceObj instanceof Source)) {
        throw new TypeError("Must provide Source. Received: ".concat(inspect(sourceObj)));
      }

      var lexer = createLexer(sourceObj, options || {});
      return parseDocument(lexer);
    }
    /**
     * Converts a name lex token into a name parse node.
     */

    function parseName(lexer) {
      var token = expect(lexer, TokenKind.NAME);
      return {
        kind: Kind.NAME,
        value: token.value,
        loc: loc(lexer, token)
      };
    } // Implements the parsing rules in the Document section.

    /**
     * Document : Definition+
     */


    function parseDocument(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.DOCUMENT,
        definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),
        loc: loc(lexer, start)
      };
    }
    /**
     * Definition :
     *   - ExecutableDefinition
     *   - TypeSystemDefinition
     *   - TypeSystemExtension
     */


    function parseDefinition(lexer) {
      if (peek(lexer, TokenKind.NAME)) {
        switch (lexer.token.value) {
          case 'query':
          case 'mutation':
          case 'subscription':
          case 'fragment':
            return parseExecutableDefinition(lexer);

          case 'schema':
          case 'scalar':
          case 'type':
          case 'interface':
          case 'union':
          case 'enum':
          case 'input':
          case 'directive':
            return parseTypeSystemDefinition(lexer);

          case 'extend':
            return parseTypeSystemExtension(lexer);
        }
      } else if (peek(lexer, TokenKind.BRACE_L)) {
        return parseExecutableDefinition(lexer);
      } else if (peekDescription(lexer)) {
        return parseTypeSystemDefinition(lexer);
      }

      throw unexpected(lexer);
    }
    /**
     * ExecutableDefinition :
     *   - OperationDefinition
     *   - FragmentDefinition
     */


    function parseExecutableDefinition(lexer) {
      if (peek(lexer, TokenKind.NAME)) {
        switch (lexer.token.value) {
          case 'query':
          case 'mutation':
          case 'subscription':
            return parseOperationDefinition(lexer);

          case 'fragment':
            return parseFragmentDefinition(lexer);
        }
      } else if (peek(lexer, TokenKind.BRACE_L)) {
        return parseOperationDefinition(lexer);
      }

      throw unexpected(lexer);
    } // Implements the parsing rules in the Operations section.

    /**
     * OperationDefinition :
     *  - SelectionSet
     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
     */


    function parseOperationDefinition(lexer) {
      var start = lexer.token;

      if (peek(lexer, TokenKind.BRACE_L)) {
        return {
          kind: Kind.OPERATION_DEFINITION,
          operation: 'query',
          name: undefined,
          variableDefinitions: [],
          directives: [],
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }

      var operation = parseOperationType(lexer);
      var name;

      if (peek(lexer, TokenKind.NAME)) {
        name = parseName(lexer);
      }

      return {
        kind: Kind.OPERATION_DEFINITION,
        operation: operation,
        name: name,
        variableDefinitions: parseVariableDefinitions(lexer),
        directives: parseDirectives(lexer, false),
        selectionSet: parseSelectionSet(lexer),
        loc: loc(lexer, start)
      };
    }
    /**
     * OperationType : one of query mutation subscription
     */


    function parseOperationType(lexer) {
      var operationToken = expect(lexer, TokenKind.NAME);

      switch (operationToken.value) {
        case 'query':
          return 'query';

        case 'mutation':
          return 'mutation';

        case 'subscription':
          return 'subscription';
      }

      throw unexpected(lexer, operationToken);
    }
    /**
     * VariableDefinitions : ( VariableDefinition+ )
     */


    function parseVariableDefinitions(lexer) {
      return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];
    }
    /**
     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
     */


    function parseVariableDefinition(lexer) {
      var start = lexer.token;

      if (lexer.options.experimentalVariableDefinitionDirectives) {
        return {
          kind: Kind.VARIABLE_DEFINITION,
          variable: parseVariable(lexer),
          type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),
          defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,
          directives: parseDirectives(lexer, true),
          loc: loc(lexer, start)
        };
      }

      return {
        kind: Kind.VARIABLE_DEFINITION,
        variable: parseVariable(lexer),
        type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),
        defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,
        loc: loc(lexer, start)
      };
    }
    /**
     * Variable : $ Name
     */


    function parseVariable(lexer) {
      var start = lexer.token;
      expect(lexer, TokenKind.DOLLAR);
      return {
        kind: Kind.VARIABLE,
        name: parseName(lexer),
        loc: loc(lexer, start)
      };
    }
    /**
     * SelectionSet : { Selection+ }
     */


    function parseSelectionSet(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.SELECTION_SET,
        selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),
        loc: loc(lexer, start)
      };
    }
    /**
     * Selection :
     *   - Field
     *   - FragmentSpread
     *   - InlineFragment
     */


    function parseSelection(lexer) {
      return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);
    }
    /**
     * Field : Alias? Name Arguments? Directives? SelectionSet?
     *
     * Alias : Name :
     */


    function parseField(lexer) {
      var start = lexer.token;
      var nameOrAlias = parseName(lexer);
      var alias;
      var name;

      if (skip(lexer, TokenKind.COLON)) {
        alias = nameOrAlias;
        name = parseName(lexer);
      } else {
        name = nameOrAlias;
      }

      return {
        kind: Kind.FIELD,
        alias: alias,
        name: name,
        arguments: parseArguments(lexer, false),
        directives: parseDirectives(lexer, false),
        selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,
        loc: loc(lexer, start)
      };
    }
    /**
     * Arguments[Const] : ( Argument[?Const]+ )
     */


    function parseArguments(lexer, isConst) {
      var item = isConst ? parseConstArgument : parseArgument;
      return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];
    }
    /**
     * Argument[Const] : Name : Value[?Const]
     */


    function parseArgument(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.ARGUMENT,
        name: parseName(lexer),
        value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),
        loc: loc(lexer, start)
      };
    }

    function parseConstArgument(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.ARGUMENT,
        name: parseName(lexer),
        value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),
        loc: loc(lexer, start)
      };
    } // Implements the parsing rules in the Fragments section.

    /**
     * Corresponds to both FragmentSpread and InlineFragment in the spec.
     *
     * FragmentSpread : ... FragmentName Directives?
     *
     * InlineFragment : ... TypeCondition? Directives? SelectionSet
     */


    function parseFragment(lexer) {
      var start = lexer.token;
      expect(lexer, TokenKind.SPREAD);

      if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {
        return {
          kind: Kind.FRAGMENT_SPREAD,
          name: parseFragmentName(lexer),
          directives: parseDirectives(lexer, false),
          loc: loc(lexer, start)
        };
      }

      var typeCondition;

      if (lexer.token.value === 'on') {
        lexer.advance();
        typeCondition = parseNamedType(lexer);
      }

      return {
        kind: Kind.INLINE_FRAGMENT,
        typeCondition: typeCondition,
        directives: parseDirectives(lexer, false),
        selectionSet: parseSelectionSet(lexer),
        loc: loc(lexer, start)
      };
    }
    /**
     * FragmentDefinition :
     *   - fragment FragmentName on TypeCondition Directives? SelectionSet
     *
     * TypeCondition : NamedType
     */


    function parseFragmentDefinition(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes
      // the grammar of FragmentDefinition:
      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

      if (lexer.options.experimentalFragmentVariables) {
        return {
          kind: Kind.FRAGMENT_DEFINITION,
          name: parseFragmentName(lexer),
          variableDefinitions: parseVariableDefinitions(lexer),
          typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),
          directives: parseDirectives(lexer, false),
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }

      return {
        kind: Kind.FRAGMENT_DEFINITION,
        name: parseFragmentName(lexer),
        typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),
        directives: parseDirectives(lexer, false),
        selectionSet: parseSelectionSet(lexer),
        loc: loc(lexer, start)
      };
    }
    /**
     * FragmentName : Name but not `on`
     */


    function parseFragmentName(lexer) {
      if (lexer.token.value === 'on') {
        throw unexpected(lexer);
      }

      return parseName(lexer);
    } // Implements the parsing rules in the Values section.

    /**
     * Value[Const] :
     *   - [~Const] Variable
     *   - IntValue
     *   - FloatValue
     *   - StringValue
     *   - BooleanValue
     *   - NullValue
     *   - EnumValue
     *   - ListValue[?Const]
     *   - ObjectValue[?Const]
     *
     * BooleanValue : one of `true` `false`
     *
     * NullValue : `null`
     *
     * EnumValue : Name but not `true`, `false` or `null`
     */


    function parseValueLiteral(lexer, isConst) {
      var token = lexer.token;

      switch (token.kind) {
        case TokenKind.BRACKET_L:
          return parseList(lexer, isConst);

        case TokenKind.BRACE_L:
          return parseObject(lexer, isConst);

        case TokenKind.INT:
          lexer.advance();
          return {
            kind: Kind.INT,
            value: token.value,
            loc: loc(lexer, token)
          };

        case TokenKind.FLOAT:
          lexer.advance();
          return {
            kind: Kind.FLOAT,
            value: token.value,
            loc: loc(lexer, token)
          };

        case TokenKind.STRING:
        case TokenKind.BLOCK_STRING:
          return parseStringLiteral(lexer);

        case TokenKind.NAME:
          if (token.value === 'true' || token.value === 'false') {
            lexer.advance();
            return {
              kind: Kind.BOOLEAN,
              value: token.value === 'true',
              loc: loc(lexer, token)
            };
          } else if (token.value === 'null') {
            lexer.advance();
            return {
              kind: Kind.NULL,
              loc: loc(lexer, token)
            };
          }

          lexer.advance();
          return {
            kind: Kind.ENUM,
            value: token.value,
            loc: loc(lexer, token)
          };

        case TokenKind.DOLLAR:
          if (!isConst) {
            return parseVariable(lexer);
          }

          break;
      }

      throw unexpected(lexer);
    }

    function parseStringLiteral(lexer) {
      var token = lexer.token;
      lexer.advance();
      return {
        kind: Kind.STRING,
        value: token.value,
        block: token.kind === TokenKind.BLOCK_STRING,
        loc: loc(lexer, token)
      };
    }

    function parseConstValue(lexer) {
      return parseValueLiteral(lexer, true);
    }

    function parseValueValue(lexer) {
      return parseValueLiteral(lexer, false);
    }
    /**
     * ListValue[Const] :
     *   - [ ]
     *   - [ Value[?Const]+ ]
     */


    function parseList(lexer, isConst) {
      var start = lexer.token;
      var item = isConst ? parseConstValue : parseValueValue;
      return {
        kind: Kind.LIST,
        values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
        loc: loc(lexer, start)
      };
    }
    /**
     * ObjectValue[Const] :
     *   - { }
     *   - { ObjectField[?Const]+ }
     */


    function parseObject(lexer, isConst) {
      var start = lexer.token;
      expect(lexer, TokenKind.BRACE_L);
      var fields = [];

      while (!skip(lexer, TokenKind.BRACE_R)) {
        fields.push(parseObjectField(lexer, isConst));
      }

      return {
        kind: Kind.OBJECT,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * ObjectField[Const] : Name : Value[?Const]
     */


    function parseObjectField(lexer, isConst) {
      var start = lexer.token;
      return {
        kind: Kind.OBJECT_FIELD,
        name: parseName(lexer),
        value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),
        loc: loc(lexer, start)
      };
    } // Implements the parsing rules in the Directives section.

    /**
     * Directives[Const] : Directive[?Const]+
     */


    function parseDirectives(lexer, isConst) {
      var directives = [];

      while (peek(lexer, TokenKind.AT)) {
        directives.push(parseDirective(lexer, isConst));
      }

      return directives;
    }
    /**
     * Directive[Const] : @ Name Arguments[?Const]?
     */


    function parseDirective(lexer, isConst) {
      var start = lexer.token;
      expect(lexer, TokenKind.AT);
      return {
        kind: Kind.DIRECTIVE,
        name: parseName(lexer),
        arguments: parseArguments(lexer, isConst),
        loc: loc(lexer, start)
      };
    } // Implements the parsing rules in the Types section.

    /**
     * Type :
     *   - NamedType
     *   - ListType
     *   - NonNullType
     */


    function parseTypeReference(lexer) {
      var start = lexer.token;
      var type;

      if (skip(lexer, TokenKind.BRACKET_L)) {
        type = parseTypeReference(lexer);
        expect(lexer, TokenKind.BRACKET_R);
        type = {
          kind: Kind.LIST_TYPE,
          type: type,
          loc: loc(lexer, start)
        };
      } else {
        type = parseNamedType(lexer);
      }

      if (skip(lexer, TokenKind.BANG)) {
        return {
          kind: Kind.NON_NULL_TYPE,
          type: type,
          loc: loc(lexer, start)
        };
      }

      return type;
    }
    /**
     * NamedType : Name
     */

    function parseNamedType(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.NAMED_TYPE,
        name: parseName(lexer),
        loc: loc(lexer, start)
      };
    } // Implements the parsing rules in the Type Definition section.

    /**
     * TypeSystemDefinition :
     *   - SchemaDefinition
     *   - TypeDefinition
     *   - DirectiveDefinition
     *
     * TypeDefinition :
     *   - ScalarTypeDefinition
     *   - ObjectTypeDefinition
     *   - InterfaceTypeDefinition
     *   - UnionTypeDefinition
     *   - EnumTypeDefinition
     *   - InputObjectTypeDefinition
     */

    function parseTypeSystemDefinition(lexer) {
      // Many definitions begin with a description and require a lookahead.
      var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;

      if (keywordToken.kind === TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return parseSchemaDefinition(lexer);

          case 'scalar':
            return parseScalarTypeDefinition(lexer);

          case 'type':
            return parseObjectTypeDefinition(lexer);

          case 'interface':
            return parseInterfaceTypeDefinition(lexer);

          case 'union':
            return parseUnionTypeDefinition(lexer);

          case 'enum':
            return parseEnumTypeDefinition(lexer);

          case 'input':
            return parseInputObjectTypeDefinition(lexer);

          case 'directive':
            return parseDirectiveDefinition(lexer);
        }
      }

      throw unexpected(lexer, keywordToken);
    }

    function peekDescription(lexer) {
      return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);
    }
    /**
     * Description : StringValue
     */


    function parseDescription(lexer) {
      if (peekDescription(lexer)) {
        return parseStringLiteral(lexer);
      }
    }
    /**
     * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }
     */


    function parseSchemaDefinition(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'schema');
      var directives = parseDirectives(lexer, true);
      var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);
      return {
        kind: Kind.SCHEMA_DEFINITION,
        directives: directives,
        operationTypes: operationTypes,
        loc: loc(lexer, start)
      };
    }
    /**
     * OperationTypeDefinition : OperationType : NamedType
     */


    function parseOperationTypeDefinition(lexer) {
      var start = lexer.token;
      var operation = parseOperationType(lexer);
      expect(lexer, TokenKind.COLON);
      var type = parseNamedType(lexer);
      return {
        kind: Kind.OPERATION_TYPE_DEFINITION,
        operation: operation,
        type: type,
        loc: loc(lexer, start)
      };
    }
    /**
     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
     */


    function parseScalarTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'scalar');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.SCALAR_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        loc: loc(lexer, start)
      };
    }
    /**
     * ObjectTypeDefinition :
     *   Description?
     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
     */


    function parseObjectTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'type');
      var name = parseName(lexer);
      var interfaces = parseImplementsInterfaces(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);
      return {
        kind: Kind.OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * ImplementsInterfaces :
     *   - implements `&`? NamedType
     *   - ImplementsInterfaces & NamedType
     */


    function parseImplementsInterfaces(lexer) {
      var types = [];

      if (lexer.token.value === 'implements') {
        lexer.advance(); // Optional leading ampersand

        skip(lexer, TokenKind.AMP);

        do {
          types.push(parseNamedType(lexer));
        } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?
        lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));
      }

      return types;
    }
    /**
     * FieldsDefinition : { FieldDefinition+ }
     */


    function parseFieldsDefinition(lexer) {
      // Legacy support for the SDL?
      if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {
        lexer.advance();
        lexer.advance();
        return [];
      }

      return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];
    }
    /**
     * FieldDefinition :
     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
     */


    function parseFieldDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      var name = parseName(lexer);
      var args = parseArgumentDefs(lexer);
      expect(lexer, TokenKind.COLON);
      var type = parseTypeReference(lexer);
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.FIELD_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        type: type,
        directives: directives,
        loc: loc(lexer, start)
      };
    }
    /**
     * ArgumentsDefinition : ( InputValueDefinition+ )
     */


    function parseArgumentDefs(lexer) {
      if (!peek(lexer, TokenKind.PAREN_L)) {
        return [];
      }

      return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);
    }
    /**
     * InputValueDefinition :
     *   - Description? Name : Type DefaultValue? Directives[Const]?
     */


    function parseInputValueDef(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      var name = parseName(lexer);
      expect(lexer, TokenKind.COLON);
      var type = parseTypeReference(lexer);
      var defaultValue;

      if (skip(lexer, TokenKind.EQUALS)) {
        defaultValue = parseConstValue(lexer);
      }

      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.INPUT_VALUE_DEFINITION,
        description: description,
        name: name,
        type: type,
        defaultValue: defaultValue,
        directives: directives,
        loc: loc(lexer, start)
      };
    }
    /**
     * InterfaceTypeDefinition :
     *   - Description? interface Name Directives[Const]? FieldsDefinition?
     */


    function parseInterfaceTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'interface');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);
      return {
        kind: Kind.INTERFACE_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * UnionTypeDefinition :
     *   - Description? union Name Directives[Const]? UnionMemberTypes?
     */


    function parseUnionTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'union');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var types = parseUnionMemberTypes(lexer);
      return {
        kind: Kind.UNION_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        types: types,
        loc: loc(lexer, start)
      };
    }
    /**
     * UnionMemberTypes :
     *   - = `|`? NamedType
     *   - UnionMemberTypes | NamedType
     */


    function parseUnionMemberTypes(lexer) {
      var types = [];

      if (skip(lexer, TokenKind.EQUALS)) {
        // Optional leading pipe
        skip(lexer, TokenKind.PIPE);

        do {
          types.push(parseNamedType(lexer));
        } while (skip(lexer, TokenKind.PIPE));
      }

      return types;
    }
    /**
     * EnumTypeDefinition :
     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
     */


    function parseEnumTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'enum');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var values = parseEnumValuesDefinition(lexer);
      return {
        kind: Kind.ENUM_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        values: values,
        loc: loc(lexer, start)
      };
    }
    /**
     * EnumValuesDefinition : { EnumValueDefinition+ }
     */


    function parseEnumValuesDefinition(lexer) {
      return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];
    }
    /**
     * EnumValueDefinition : Description? EnumValue Directives[Const]?
     *
     * EnumValue : Name
     */


    function parseEnumValueDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.ENUM_VALUE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        loc: loc(lexer, start)
      };
    }
    /**
     * InputObjectTypeDefinition :
     *   - Description? input Name Directives[Const]? InputFieldsDefinition?
     */


    function parseInputObjectTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'input');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseInputFieldsDefinition(lexer);
      return {
        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * InputFieldsDefinition : { InputValueDefinition+ }
     */


    function parseInputFieldsDefinition(lexer) {
      return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];
    }
    /**
     * TypeSystemExtension :
     *   - SchemaExtension
     *   - TypeExtension
     *
     * TypeExtension :
     *   - ScalarTypeExtension
     *   - ObjectTypeExtension
     *   - InterfaceTypeExtension
     *   - UnionTypeExtension
     *   - EnumTypeExtension
     *   - InputObjectTypeDefinition
     */


    function parseTypeSystemExtension(lexer) {
      var keywordToken = lexer.lookahead();

      if (keywordToken.kind === TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return parseSchemaExtension(lexer);

          case 'scalar':
            return parseScalarTypeExtension(lexer);

          case 'type':
            return parseObjectTypeExtension(lexer);

          case 'interface':
            return parseInterfaceTypeExtension(lexer);

          case 'union':
            return parseUnionTypeExtension(lexer);

          case 'enum':
            return parseEnumTypeExtension(lexer);

          case 'input':
            return parseInputObjectTypeExtension(lexer);
        }
      }

      throw unexpected(lexer, keywordToken);
    }
    /**
     * SchemaExtension :
     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
     *  - extend schema Directives[Const]
     */


    function parseSchemaExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'schema');
      var directives = parseDirectives(lexer, true);
      var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];

      if (directives.length === 0 && operationTypes.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.SCHEMA_EXTENSION,
        directives: directives,
        operationTypes: operationTypes,
        loc: loc(lexer, start)
      };
    }
    /**
     * ScalarTypeExtension :
     *   - extend scalar Name Directives[Const]
     */


    function parseScalarTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'scalar');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);

      if (directives.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.SCALAR_TYPE_EXTENSION,
        name: name,
        directives: directives,
        loc: loc(lexer, start)
      };
    }
    /**
     * ObjectTypeExtension :
     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend type Name ImplementsInterfaces? Directives[Const]
     *  - extend type Name ImplementsInterfaces
     */


    function parseObjectTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'type');
      var name = parseName(lexer);
      var interfaces = parseImplementsInterfaces(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);

      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.OBJECT_TYPE_EXTENSION,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * InterfaceTypeExtension :
     *   - extend interface Name Directives[Const]? FieldsDefinition
     *   - extend interface Name Directives[Const]
     */


    function parseInterfaceTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'interface');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);

      if (directives.length === 0 && fields.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.INTERFACE_TYPE_EXTENSION,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * UnionTypeExtension :
     *   - extend union Name Directives[Const]? UnionMemberTypes
     *   - extend union Name Directives[Const]
     */


    function parseUnionTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'union');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var types = parseUnionMemberTypes(lexer);

      if (directives.length === 0 && types.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.UNION_TYPE_EXTENSION,
        name: name,
        directives: directives,
        types: types,
        loc: loc(lexer, start)
      };
    }
    /**
     * EnumTypeExtension :
     *   - extend enum Name Directives[Const]? EnumValuesDefinition
     *   - extend enum Name Directives[Const]
     */


    function parseEnumTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'enum');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var values = parseEnumValuesDefinition(lexer);

      if (directives.length === 0 && values.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.ENUM_TYPE_EXTENSION,
        name: name,
        directives: directives,
        values: values,
        loc: loc(lexer, start)
      };
    }
    /**
     * InputObjectTypeExtension :
     *   - extend input Name Directives[Const]? InputFieldsDefinition
     *   - extend input Name Directives[Const]
     */


    function parseInputObjectTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'input');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseInputFieldsDefinition(lexer);

      if (directives.length === 0 && fields.length === 0) {
        throw unexpected(lexer);
      }

      return {
        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }
    /**
     * DirectiveDefinition :
     *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations
     */


    function parseDirectiveDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'directive');
      expect(lexer, TokenKind.AT);
      var name = parseName(lexer);
      var args = parseArgumentDefs(lexer);
      expectKeyword(lexer, 'on');
      var locations = parseDirectiveLocations(lexer);
      return {
        kind: Kind.DIRECTIVE_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        locations: locations,
        loc: loc(lexer, start)
      };
    }
    /**
     * DirectiveLocations :
     *   - `|`? DirectiveLocation
     *   - DirectiveLocations | DirectiveLocation
     */


    function parseDirectiveLocations(lexer) {
      // Optional leading pipe
      skip(lexer, TokenKind.PIPE);
      var locations = [];

      do {
        locations.push(parseDirectiveLocation(lexer));
      } while (skip(lexer, TokenKind.PIPE));

      return locations;
    }
    /*
     * DirectiveLocation :
     *   - ExecutableDirectiveLocation
     *   - TypeSystemDirectiveLocation
     *
     * ExecutableDirectiveLocation : one of
     *   `QUERY`
     *   `MUTATION`
     *   `SUBSCRIPTION`
     *   `FIELD`
     *   `FRAGMENT_DEFINITION`
     *   `FRAGMENT_SPREAD`
     *   `INLINE_FRAGMENT`
     *
     * TypeSystemDirectiveLocation : one of
     *   `SCHEMA`
     *   `SCALAR`
     *   `OBJECT`
     *   `FIELD_DEFINITION`
     *   `ARGUMENT_DEFINITION`
     *   `INTERFACE`
     *   `UNION`
     *   `ENUM`
     *   `ENUM_VALUE`
     *   `INPUT_OBJECT`
     *   `INPUT_FIELD_DEFINITION`
     */


    function parseDirectiveLocation(lexer) {
      var start = lexer.token;
      var name = parseName(lexer);

      if (DirectiveLocation.hasOwnProperty(name.value)) {
        return name;
      }

      throw unexpected(lexer, start);
    } // Core parsing utility functions

    /**
     * Returns a location object, used to identify the place in
     * the source that created a given parsed object.
     */


    function loc(lexer, startToken) {
      if (!lexer.options.noLocation) {
        return new Loc(startToken, lexer.lastToken, lexer.source);
      }
    }

    function Loc(startToken, endToken, source) {
      this.start = startToken.start;
      this.end = endToken.end;
      this.startToken = startToken;
      this.endToken = endToken;
      this.source = source;
    } // Print a simplified form when appearing in JSON/util.inspect.


    Loc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {
      return {
        start: this.start,
        end: this.end
      };
    };
    /**
     * Determines if the next token is of a given kind
     */


    function peek(lexer, kind) {
      return lexer.token.kind === kind;
    }
    /**
     * If the next token is of the given kind, return true after advancing
     * the lexer. Otherwise, do not change the parser state and return false.
     */


    function skip(lexer, kind) {
      var match = lexer.token.kind === kind;

      if (match) {
        lexer.advance();
      }

      return match;
    }
    /**
     * If the next token is of the given kind, return that token after advancing
     * the lexer. Otherwise, do not change the parser state and throw an error.
     */


    function expect(lexer, kind) {
      var token = lexer.token;

      if (token.kind === kind) {
        lexer.advance();
        return token;
      }

      throw syntaxError(lexer.source, token.start, "Expected ".concat(kind, ", found ").concat(getTokenDesc(token)));
    }
    /**
     * If the next token is a keyword with the given value, return that token after
     * advancing the lexer. Otherwise, do not change the parser state and return
     * false.
     */


    function expectKeyword(lexer, value) {
      var token = lexer.token;

      if (token.kind === TokenKind.NAME && token.value === value) {
        lexer.advance();
        return token;
      }

      throw syntaxError(lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token)));
    }
    /**
     * Helper function for creating an error when an unexpected lexed token
     * is encountered.
     */


    function unexpected(lexer, atToken) {
      var token = atToken || lexer.token;
      return syntaxError(lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token)));
    }
    /**
     * Returns a possibly empty list of parse nodes, determined by
     * the parseFn. This list begins with a lex token of openKind
     * and ends with a lex token of closeKind. Advances the parser
     * to the next lex token after the closing token.
     */


    function any(lexer, openKind, parseFn, closeKind) {
      expect(lexer, openKind);
      var nodes = [];

      while (!skip(lexer, closeKind)) {
        nodes.push(parseFn(lexer));
      }

      return nodes;
    }
    /**
     * Returns a non-empty list of parse nodes, determined by
     * the parseFn. This list begins with a lex token of openKind
     * and ends with a lex token of closeKind. Advances the parser
     * to the next lex token after the closing token.
     */


    function many(lexer, openKind, parseFn, closeKind) {
      expect(lexer, openKind);
      var nodes = [parseFn(lexer)];

      while (!skip(lexer, closeKind)) {
        nodes.push(parseFn(lexer));
      }

      return nodes;
    }

    var __assign$4 = (undefined && undefined.__assign) || function () {
        __assign$4 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$4.apply(this, arguments);
    };
    var logger$6 = new ConsoleLogger('AbstractPubSubProvider');
    var AbstractPubSubProvider = /** @class */ (function () {
        function AbstractPubSubProvider(options) {
            if (options === void 0) { options = {}; }
            this._config = options;
        }
        AbstractPubSubProvider.prototype.configure = function (config) {
            if (config === void 0) { config = {}; }
            this._config = __assign$4(__assign$4({}, config), this._config);
            logger$6.debug("configure " + this.getProviderName(), this._config);
            return this.options;
        };
        AbstractPubSubProvider.prototype.getCategory = function () {
            return 'PubSub';
        };
        Object.defineProperty(AbstractPubSubProvider.prototype, "options", {
            get: function () {
                return __assign$4({}, this._config);
            },
            enumerable: true,
            configurable: true
        });
        return AbstractPubSubProvider;
    }());

    /*******************************************************************************
     * Copyright (c) 2013 IBM Corp.
     *
     * All rights reserved. This program and the accompanying materials
     * are made available under the terms of the Eclipse Public License v1.0
     * and Eclipse Distribution License v1.0 which accompany this distribution.
     *
     * The Eclipse Public License is available at
     *    http://www.eclipse.org/legal/epl-v10.html
     * and the Eclipse Distribution License is available at
     *   http://www.eclipse.org/org/documents/edl-v10.php.
     *
     * Contributors:
     *    Andrew Banks - initial API and implementation and initial documentation
     *******************************************************************************/

    var pahoMqtt = createCommonjsModule(function (module, exports) {
    // Only expose a single object name in the global namespace.
    // Everything must go through this module. Global Paho module
    // only has a single public function, client, which returns
    // a Paho client object given connection details.

    /**
     * Send and receive messages using web browsers.
     * <p>
     * This programming interface lets a JavaScript client application use the MQTT V3.1 or
     * V3.1.1 protocol to connect to an MQTT-supporting messaging server.
     *
     * The function supported includes:
     * <ol>
     * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.
     * <li>Specifying options that relate to the communications link with the server,
     * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.
     * <li>Subscribing to and receiving messages from MQTT Topics.
     * <li>Publishing messages to MQTT Topics.
     * </ol>
     * <p>
     * The API consists of two main objects:
     * <dl>
     * <dt><b>{@link Paho.Client}</b></dt>
     * <dd>This contains methods that provide the functionality of the API,
     * including provision of callbacks that notify the application when a message
     * arrives from or is delivered to the messaging server,
     * or when the status of its connection to the messaging server changes.</dd>
     * <dt><b>{@link Paho.Message}</b></dt>
     * <dd>This encapsulates the payload of the message along with various attributes
     * associated with its delivery, in particular the destination to which it has
     * been (or is about to be) sent.</dd>
     * </dl>
     * <p>
     * The programming interface validates parameters passed to it, and will throw
     * an Error containing an error message intended for developer use, if it detects
     * an error with any parameter.
     * <p>
     * Example:
     *
     * <code><pre>
    var client = new Paho.MQTT.Client(location.hostname, Number(location.port), "clientId");
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.connect({onSuccess:onConnect});

    function onConnect() {
      // Once a connection has been made, make a subscription and send a message.
      console.log("onConnect");
      client.subscribe("/World");
      var message = new Paho.MQTT.Message("Hello");
      message.destinationName = "/World";
      client.send(message);
    };
    function onConnectionLost(responseObject) {
      if (responseObject.errorCode !== 0)
    	console.log("onConnectionLost:"+responseObject.errorMessage);
    };
    function onMessageArrived(message) {
      console.log("onMessageArrived:"+message.payloadString);
      client.disconnect();
    };
     * </pre></code>
     * @namespace Paho
     */

    /* jshint shadow:true */
    (function ExportLibrary(root, factory) {
    	{
    		module.exports = factory();
    	}
    })(commonjsGlobal, function LibraryFactory(){


    	var PahoMQTT = (function (global) {

    	// Private variables below, these are only visible inside the function closure
    	// which is used to define the module.
    	var version = "@VERSION@-@BUILDLEVEL@";

    	/**
    	 * @private
    	 */
    	var localStorage = global.localStorage || (function () {
    		var data = {};

    		return {
    			setItem: function (key, item) { data[key] = item; },
    			getItem: function (key) { return data[key]; },
    			removeItem: function (key) { delete data[key]; },
    		};
    	})();

    		/**
    	 * Unique message type identifiers, with associated
    	 * associated integer values.
    	 * @private
    	 */
    		var MESSAGE_TYPE = {
    			CONNECT: 1,
    			CONNACK: 2,
    			PUBLISH: 3,
    			PUBACK: 4,
    			PUBREC: 5,
    			PUBREL: 6,
    			PUBCOMP: 7,
    			SUBSCRIBE: 8,
    			SUBACK: 9,
    			UNSUBSCRIBE: 10,
    			UNSUBACK: 11,
    			PINGREQ: 12,
    			PINGRESP: 13,
    			DISCONNECT: 14
    		};

    		// Collection of utility methods used to simplify module code
    		// and promote the DRY pattern.

    		/**
    	 * Validate an object's parameter names to ensure they
    	 * match a list of expected variables name for this option
    	 * type. Used to ensure option object passed into the API don't
    	 * contain erroneous parameters.
    	 * @param {Object} obj - User options object
    	 * @param {Object} keys - valid keys and types that may exist in obj.
    	 * @throws {Error} Invalid option parameter found.
    	 * @private
    	 */
    		var validate = function(obj, keys) {
    			for (var key in obj) {
    				if (obj.hasOwnProperty(key)) {
    					if (keys.hasOwnProperty(key)) {
    						if (typeof obj[key] !== keys[key])
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));
    					} else {
    						var errorStr = "Unknown property, " + key + ". Valid properties are:";
    						for (var validKey in keys)
    							if (keys.hasOwnProperty(validKey))
    								errorStr = errorStr+" "+validKey;
    						throw new Error(errorStr);
    					}
    				}
    			}
    		};

    		/**
    	 * Return a new function which runs the user function bound
    	 * to a fixed scope.
    	 * @param {function} User function
    	 * @param {object} Function scope
    	 * @return {function} User function bound to another scope
    	 * @private
    	 */
    		var scope = function (f, scope) {
    			return function () {
    				return f.apply(scope, arguments);
    			};
    		};

    		/**
    	 * Unique message type identifiers, with associated
    	 * associated integer values.
    	 * @private
    	 */
    		var ERROR = {
    			OK: {code:0, text:"AMQJSC0000I OK."},
    			CONNECT_TIMEOUT: {code:1, text:"AMQJSC0001E Connect timed out."},
    			SUBSCRIBE_TIMEOUT: {code:2, text:"AMQJS0002E Subscribe timed out."},
    			UNSUBSCRIBE_TIMEOUT: {code:3, text:"AMQJS0003E Unsubscribe timed out."},
    			PING_TIMEOUT: {code:4, text:"AMQJS0004E Ping timed out."},
    			INTERNAL_ERROR: {code:5, text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},
    			CONNACK_RETURNCODE: {code:6, text:"AMQJS0006E Bad Connack return code:{0} {1}."},
    			SOCKET_ERROR: {code:7, text:"AMQJS0007E Socket error:{0}."},
    			SOCKET_CLOSE: {code:8, text:"AMQJS0008I Socket closed."},
    			MALFORMED_UTF: {code:9, text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},
    			UNSUPPORTED: {code:10, text:"AMQJS0010E {0} is not supported by this browser."},
    			INVALID_STATE: {code:11, text:"AMQJS0011E Invalid state {0}."},
    			INVALID_TYPE: {code:12, text:"AMQJS0012E Invalid type {0} for {1}."},
    			INVALID_ARGUMENT: {code:13, text:"AMQJS0013E Invalid argument {0} for {1}."},
    			UNSUPPORTED_OPERATION: {code:14, text:"AMQJS0014E Unsupported operation."},
    			INVALID_STORED_DATA: {code:15, text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},
    			INVALID_MQTT_MESSAGE_TYPE: {code:16, text:"AMQJS0016E Invalid MQTT message type {0}."},
    			MALFORMED_UNICODE: {code:17, text:"AMQJS0017E Malformed Unicode string:{0} {1}."},
    			BUFFER_FULL: {code:18, text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."},
    		};

    		/** CONNACK RC Meaning. */
    		var CONNACK_RC = {
    			0:"Connection Accepted",
    			1:"Connection Refused: unacceptable protocol version",
    			2:"Connection Refused: identifier rejected",
    			3:"Connection Refused: server unavailable",
    			4:"Connection Refused: bad user name or password",
    			5:"Connection Refused: not authorized"
    		};

    	/**
    	 * Format an error message text.
    	 * @private
    	 * @param {error} ERROR value above.
    	 * @param {substitutions} [array] substituted into the text.
    	 * @return the text with the substitutions made.
    	 */
    		var format = function(error, substitutions) {
    			var text = error.text;
    			if (substitutions) {
    				var field,start;
    				for (var i=0; i<substitutions.length; i++) {
    					field = "{"+i+"}";
    					start = text.indexOf(field);
    					if(start > 0) {
    						var part1 = text.substring(0,start);
    						var part2 = text.substring(start+field.length);
    						text = part1+substitutions[i]+part2;
    					}
    				}
    			}
    			return text;
    		};

    		//MQTT protocol and version          6    M    Q    I    s    d    p    3
    		var MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];
    		//MQTT proto/version for 311         4    M    Q    T    T    4
    		var MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];

    		/**
    	 * Construct an MQTT wire protocol message.
    	 * @param type MQTT packet type.
    	 * @param options optional wire message attributes.
    	 *
    	 * Optional properties
    	 *
    	 * messageIdentifier: message ID in the range [0..65535]
    	 * payloadMessage:	Application Message - PUBLISH only
    	 * connectStrings:	array of 0 or more Strings to be put into the CONNECT payload
    	 * topics:			array of strings (SUBSCRIBE, UNSUBSCRIBE)
    	 * requestQoS:		array of QoS values [0..2]
    	 *
    	 * "Flag" properties
    	 * cleanSession:	true if present / false if absent (CONNECT)
    	 * willMessage:  	true if present / false if absent (CONNECT)
    	 * isRetained:		true if present / false if absent (CONNECT)
    	 * userName:		true if present / false if absent (CONNECT)
    	 * password:		true if present / false if absent (CONNECT)
    	 * keepAliveInterval:	integer [0..65535]  (CONNECT)
    	 *
    	 * @private
    	 * @ignore
    	 */
    		var WireMessage = function (type, options) {
    			this.type = type;
    			for (var name in options) {
    				if (options.hasOwnProperty(name)) {
    					this[name] = options[name];
    				}
    			}
    		};

    		WireMessage.prototype.encode = function() {
    		// Compute the first byte of the fixed header
    			var first = ((this.type & 0x0f) << 4);

    			/*
    		 * Now calculate the length of the variable header + payload by adding up the lengths
    		 * of all the component parts
    		 */

    			var remLength = 0;
    			var topicStrLength = [];
    			var destinationNameLength = 0;
    			var willMessagePayloadBytes;

    			// if the message contains a messageIdentifier then we need two bytes for that
    			if (this.messageIdentifier !== undefined)
    				remLength += 2;

    			switch(this.type) {
    			// If this a Connect then we need to include 12 bytes for its header
    			case MESSAGE_TYPE.CONNECT:
    				switch(this.mqttVersion) {
    				case 3:
    					remLength += MqttProtoIdentifierv3.length + 3;
    					break;
    				case 4:
    					remLength += MqttProtoIdentifierv4.length + 3;
    					break;
    				}

    				remLength += UTF8Length(this.clientId) + 2;
    				if (this.willMessage !== undefined) {
    					remLength += UTF8Length(this.willMessage.destinationName) + 2;
    					// Will message is always a string, sent as UTF-8 characters with a preceding length.
    					willMessagePayloadBytes = this.willMessage.payloadBytes;
    					if (!(willMessagePayloadBytes instanceof Uint8Array))
    						willMessagePayloadBytes = new Uint8Array(payloadBytes);
    					remLength += willMessagePayloadBytes.byteLength +2;
    				}
    				if (this.userName !== undefined)
    					remLength += UTF8Length(this.userName) + 2;
    				if (this.password !== undefined)
    					remLength += UTF8Length(this.password) + 2;
    				break;

    			// Subscribe, Unsubscribe can both contain topic strings
    			case MESSAGE_TYPE.SUBSCRIBE:
    				first |= 0x02; // Qos = 1;
    				for ( var i = 0; i < this.topics.length; i++) {
    					topicStrLength[i] = UTF8Length(this.topics[i]);
    					remLength += topicStrLength[i] + 2;
    				}
    				remLength += this.requestedQos.length; // 1 byte for each topic's Qos
    				// QoS on Subscribe only
    				break;

    			case MESSAGE_TYPE.UNSUBSCRIBE:
    				first |= 0x02; // Qos = 1;
    				for ( var i = 0; i < this.topics.length; i++) {
    					topicStrLength[i] = UTF8Length(this.topics[i]);
    					remLength += topicStrLength[i] + 2;
    				}
    				break;

    			case MESSAGE_TYPE.PUBREL:
    				first |= 0x02; // Qos = 1;
    				break;

    			case MESSAGE_TYPE.PUBLISH:
    				if (this.payloadMessage.duplicate) first |= 0x08;
    				first  = first |= (this.payloadMessage.qos << 1);
    				if (this.payloadMessage.retained) first |= 0x01;
    				destinationNameLength = UTF8Length(this.payloadMessage.destinationName);
    				remLength += destinationNameLength + 2;
    				var payloadBytes = this.payloadMessage.payloadBytes;
    				remLength += payloadBytes.byteLength;
    				if (payloadBytes instanceof ArrayBuffer)
    					payloadBytes = new Uint8Array(payloadBytes);
    				else if (!(payloadBytes instanceof Uint8Array))
    					payloadBytes = new Uint8Array(payloadBytes.buffer);
    				break;
    			}

    			// Now we can allocate a buffer for the message

    			var mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format
    			var pos = mbi.length + 1;        // Offset of start of variable header
    			var buffer = new ArrayBuffer(remLength + pos);
    			var byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes

    			//Write the fixed header into the buffer
    			byteStream[0] = first;
    			byteStream.set(mbi,1);

    			// If this is a PUBLISH then the variable header starts with a topic
    			if (this.type == MESSAGE_TYPE.PUBLISH)
    				pos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);
    			// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time

    			else if (this.type == MESSAGE_TYPE.CONNECT) {
    				switch (this.mqttVersion) {
    				case 3:
    					byteStream.set(MqttProtoIdentifierv3, pos);
    					pos += MqttProtoIdentifierv3.length;
    					break;
    				case 4:
    					byteStream.set(MqttProtoIdentifierv4, pos);
    					pos += MqttProtoIdentifierv4.length;
    					break;
    				}
    				var connectFlags = 0;
    				if (this.cleanSession)
    					connectFlags = 0x02;
    				if (this.willMessage !== undefined ) {
    					connectFlags |= 0x04;
    					connectFlags |= (this.willMessage.qos<<3);
    					if (this.willMessage.retained) {
    						connectFlags |= 0x20;
    					}
    				}
    				if (this.userName !== undefined)
    					connectFlags |= 0x80;
    				if (this.password !== undefined)
    					connectFlags |= 0x40;
    				byteStream[pos++] = connectFlags;
    				pos = writeUint16 (this.keepAliveInterval, byteStream, pos);
    			}

    			// Output the messageIdentifier - if there is one
    			if (this.messageIdentifier !== undefined)
    				pos = writeUint16 (this.messageIdentifier, byteStream, pos);

    			switch(this.type) {
    			case MESSAGE_TYPE.CONNECT:
    				pos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);
    				if (this.willMessage !== undefined) {
    					pos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);
    					pos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);
    					byteStream.set(willMessagePayloadBytes, pos);
    					pos += willMessagePayloadBytes.byteLength;

    				}
    				if (this.userName !== undefined)
    					pos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);
    				if (this.password !== undefined)
    					pos = writeString(this.password, UTF8Length(this.password), byteStream, pos);
    				break;

    			case MESSAGE_TYPE.PUBLISH:
    				// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.
    				byteStream.set(payloadBytes, pos);

    				break;

    				//    	    case MESSAGE_TYPE.PUBREC:
    				//    	    case MESSAGE_TYPE.PUBREL:
    				//    	    case MESSAGE_TYPE.PUBCOMP:
    				//    	    	break;

    			case MESSAGE_TYPE.SUBSCRIBE:
    				// SUBSCRIBE has a list of topic strings and request QoS
    				for (var i=0; i<this.topics.length; i++) {
    					pos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);
    					byteStream[pos++] = this.requestedQos[i];
    				}
    				break;

    			case MESSAGE_TYPE.UNSUBSCRIBE:
    				// UNSUBSCRIBE has a list of topic strings
    				for (var i=0; i<this.topics.length; i++)
    					pos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);
    				break;
    				// Do nothing.
    			}

    			return buffer;
    		};

    		function decodeMessage(input,pos) {
    			var startingPos = pos;
    			var first = input[pos];
    			var type = first >> 4;
    			var messageInfo = first &= 0x0f;
    			pos += 1;


    			// Decode the remaining length (MBI format)

    			var digit;
    			var remLength = 0;
    			var multiplier = 1;
    			do {
    				if (pos == input.length) {
    					return [null,startingPos];
    				}
    				digit = input[pos++];
    				remLength += ((digit & 0x7F) * multiplier);
    				multiplier *= 128;
    			} while ((digit & 0x80) !== 0);

    			var endPos = pos+remLength;
    			if (endPos > input.length) {
    				return [null,startingPos];
    			}

    			var wireMessage = new WireMessage(type);
    			switch(type) {
    			case MESSAGE_TYPE.CONNACK:
    				var connectAcknowledgeFlags = input[pos++];
    				if (connectAcknowledgeFlags & 0x01)
    					wireMessage.sessionPresent = true;
    				wireMessage.returnCode = input[pos++];
    				break;

    			case MESSAGE_TYPE.PUBLISH:
    				var qos = (messageInfo >> 1) & 0x03;

    				var len = readUint16(input, pos);
    				pos += 2;
    				var topicName = parseUTF8(input, pos, len);
    				pos += len;
    				// If QoS 1 or 2 there will be a messageIdentifier
    				if (qos > 0) {
    					wireMessage.messageIdentifier = readUint16(input, pos);
    					pos += 2;
    				}

    				var message = new Message(input.subarray(pos, endPos));
    				if ((messageInfo & 0x01) == 0x01)
    					message.retained = true;
    				if ((messageInfo & 0x08) == 0x08)
    					message.duplicate =  true;
    				message.qos = qos;
    				message.destinationName = topicName;
    				wireMessage.payloadMessage = message;
    				break;

    			case  MESSAGE_TYPE.PUBACK:
    			case  MESSAGE_TYPE.PUBREC:
    			case  MESSAGE_TYPE.PUBREL:
    			case  MESSAGE_TYPE.PUBCOMP:
    			case  MESSAGE_TYPE.UNSUBACK:
    				wireMessage.messageIdentifier = readUint16(input, pos);
    				break;

    			case  MESSAGE_TYPE.SUBACK:
    				wireMessage.messageIdentifier = readUint16(input, pos);
    				pos += 2;
    				wireMessage.returnCode = input.subarray(pos, endPos);
    				break;
    			}

    			return [wireMessage,endPos];
    		}

    		function writeUint16(input, buffer, offset) {
    			buffer[offset++] = input >> 8;      //MSB
    			buffer[offset++] = input % 256;     //LSB
    			return offset;
    		}

    		function writeString(input, utf8Length, buffer, offset) {
    			offset = writeUint16(utf8Length, buffer, offset);
    			stringToUTF8(input, buffer, offset);
    			return offset + utf8Length;
    		}

    		function readUint16(buffer, offset) {
    			return 256*buffer[offset] + buffer[offset+1];
    		}

    		/**
    	 * Encodes an MQTT Multi-Byte Integer
    	 * @private
    	 */
    		function encodeMBI(number) {
    			var output = new Array(1);
    			var numBytes = 0;

    			do {
    				var digit = number % 128;
    				number = number >> 7;
    				if (number > 0) {
    					digit |= 0x80;
    				}
    				output[numBytes++] = digit;
    			} while ( (number > 0) && (numBytes<4) );

    			return output;
    		}

    		/**
    	 * Takes a String and calculates its length in bytes when encoded in UTF8.
    	 * @private
    	 */
    		function UTF8Length(input) {
    			var output = 0;
    			for (var i = 0; i<input.length; i++)
    			{
    				var charCode = input.charCodeAt(i);
    				if (charCode > 0x7FF)
    				{
    					// Surrogate pair means its a 4 byte character
    					if (0xD800 <= charCode && charCode <= 0xDBFF)
    					{
    						i++;
    						output++;
    					}
    					output +=3;
    				}
    				else if (charCode > 0x7F)
    					output +=2;
    				else
    					output++;
    			}
    			return output;
    		}

    		/**
    	 * Takes a String and writes it into an array as UTF8 encoded bytes.
    	 * @private
    	 */
    		function stringToUTF8(input, output, start) {
    			var pos = start;
    			for (var i = 0; i<input.length; i++) {
    				var charCode = input.charCodeAt(i);

    				// Check for a surrogate pair.
    				if (0xD800 <= charCode && charCode <= 0xDBFF) {
    					var lowCharCode = input.charCodeAt(++i);
    					if (isNaN(lowCharCode)) {
    						throw new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));
    					}
    					charCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;

    				}

    				if (charCode <= 0x7F) {
    					output[pos++] = charCode;
    				} else if (charCode <= 0x7FF) {
    					output[pos++] = charCode>>6  & 0x1F | 0xC0;
    					output[pos++] = charCode     & 0x3F | 0x80;
    				} else if (charCode <= 0xFFFF) {
    					output[pos++] = charCode>>12 & 0x0F | 0xE0;
    					output[pos++] = charCode>>6  & 0x3F | 0x80;
    					output[pos++] = charCode     & 0x3F | 0x80;
    				} else {
    					output[pos++] = charCode>>18 & 0x07 | 0xF0;
    					output[pos++] = charCode>>12 & 0x3F | 0x80;
    					output[pos++] = charCode>>6  & 0x3F | 0x80;
    					output[pos++] = charCode     & 0x3F | 0x80;
    				}
    			}
    			return output;
    		}

    		function parseUTF8(input, offset, length) {
    			var output = "";
    			var utf16;
    			var pos = offset;

    			while (pos < offset+length)
    			{
    				var byte1 = input[pos++];
    				if (byte1 < 128)
    					utf16 = byte1;
    				else
    				{
    					var byte2 = input[pos++]-128;
    					if (byte2 < 0)
    						throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),""]));
    					if (byte1 < 0xE0)             // 2 byte character
    						utf16 = 64*(byte1-0xC0) + byte2;
    					else
    					{
    						var byte3 = input[pos++]-128;
    						if (byte3 < 0)
    							throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));
    						if (byte1 < 0xF0)        // 3 byte character
    							utf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;
    						else
    						{
    							var byte4 = input[pos++]-128;
    							if (byte4 < 0)
    								throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));
    							if (byte1 < 0xF8)        // 4 byte character
    								utf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;
    							else                     // longer encodings are not supported
    								throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));
    						}
    					}
    				}

    				if (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair
    				{
    					utf16 -= 0x10000;
    					output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character
    					utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character
    				}
    				output += String.fromCharCode(utf16);
    			}
    			return output;
    		}

    		/**
    	 * Repeat keepalive requests, monitor responses.
    	 * @ignore
    	 */
    		var Pinger = function(client, keepAliveInterval) {
    			this._client = client;
    			this._keepAliveInterval = keepAliveInterval*1000;
    			this.isReset = false;

    			var pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();

    			var doTimeout = function (pinger) {
    				return function () {
    					return doPing.apply(pinger);
    				};
    			};

    			/** @ignore */
    			var doPing = function() {
    				if (!this.isReset) {
    					this._client._trace("Pinger.doPing", "Timed out");
    					this._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));
    				} else {
    					this.isReset = false;
    					this._client._trace("Pinger.doPing", "send PINGREQ");
    					this._client.socket.send(pingReq);
    					this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);
    				}
    			};

    			this.reset = function() {
    				this.isReset = true;
    				clearTimeout(this.timeout);
    				if (this._keepAliveInterval > 0)
    					this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);
    			};

    			this.cancel = function() {
    				clearTimeout(this.timeout);
    			};
    		};

    		/**
    	 * Monitor request completion.
    	 * @ignore
    	 */
    		var Timeout = function(client, timeoutSeconds, action, args) {
    			if (!timeoutSeconds)
    				timeoutSeconds = 30;

    			var doTimeout = function (action, client, args) {
    				return function () {
    					return action.apply(client, args);
    				};
    			};
    			this.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);

    			this.cancel = function() {
    				clearTimeout(this.timeout);
    			};
    		};

    	/**
    	 * Internal implementation of the Websockets MQTT V3.1 client.
    	 *
    	 * @name Paho.ClientImpl @constructor
    	 * @param {String} host the DNS nameof the webSocket host.
    	 * @param {Number} port the port number for that host.
    	 * @param {String} clientId the MQ client identifier.
    	 */
    		var ClientImpl = function (uri, host, port, path, clientId) {
    		// Check dependencies are satisfied in this browser.
    			if (!("WebSocket" in global && global.WebSocket !== null)) {
    				throw new Error(format(ERROR.UNSUPPORTED, ["WebSocket"]));
    			}
    			if (!("ArrayBuffer" in global && global.ArrayBuffer !== null)) {
    				throw new Error(format(ERROR.UNSUPPORTED, ["ArrayBuffer"]));
    			}
    			this._trace("Paho.Client", uri, host, port, path, clientId);

    			this.host = host;
    			this.port = port;
    			this.path = path;
    			this.uri = uri;
    			this.clientId = clientId;
    			this._wsuri = null;

    			// Local storagekeys are qualified with the following string.
    			// The conditional inclusion of path in the key is for backward
    			// compatibility to when the path was not configurable and assumed to
    			// be /mqtt
    			this._localKey=host+":"+port+(path!="/mqtt"?":"+path:"")+":"+clientId+":";

    			// Create private instance-only message queue
    			// Internal queue of messages to be sent, in sending order.
    			this._msg_queue = [];
    			this._buffered_msg_queue = [];

    			// Messages we have sent and are expecting a response for, indexed by their respective message ids.
    			this._sentMessages = {};

    			// Messages we have received and acknowleged and are expecting a confirm message for
    			// indexed by their respective message ids.
    			this._receivedMessages = {};

    			// Internal list of callbacks to be executed when messages
    			// have been successfully sent over web socket, e.g. disconnect
    			// when it doesn't have to wait for ACK, just message is dispatched.
    			this._notify_msg_sent = {};

    			// Unique identifier for SEND messages, incrementing
    			// counter as messages are sent.
    			this._message_identifier = 1;

    			// Used to determine the transmission sequence of stored sent messages.
    			this._sequence = 0;


    			// Load the local state, if any, from the saved version, only restore state relevant to this client.
    			for (var key in localStorage)
    				if (   key.indexOf("Sent:"+this._localKey) === 0 || key.indexOf("Received:"+this._localKey) === 0)
    					this.restore(key);
    		};

    		// Messaging Client public instance members.
    		ClientImpl.prototype.host = null;
    		ClientImpl.prototype.port = null;
    		ClientImpl.prototype.path = null;
    		ClientImpl.prototype.uri = null;
    		ClientImpl.prototype.clientId = null;

    		// Messaging Client private instance members.
    		ClientImpl.prototype.socket = null;
    		/* true once we have received an acknowledgement to a CONNECT packet. */
    		ClientImpl.prototype.connected = false;
    		/* The largest message identifier allowed, may not be larger than 2**16 but
    		 * if set smaller reduces the maximum number of outbound messages allowed.
    		 */
    		ClientImpl.prototype.maxMessageIdentifier = 65536;
    		ClientImpl.prototype.connectOptions = null;
    		ClientImpl.prototype.hostIndex = null;
    		ClientImpl.prototype.onConnected = null;
    		ClientImpl.prototype.onConnectionLost = null;
    		ClientImpl.prototype.onMessageDelivered = null;
    		ClientImpl.prototype.onMessageArrived = null;
    		ClientImpl.prototype.traceFunction = null;
    		ClientImpl.prototype._msg_queue = null;
    		ClientImpl.prototype._buffered_msg_queue = null;
    		ClientImpl.prototype._connectTimeout = null;
    		/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */
    		ClientImpl.prototype.sendPinger = null;
    		/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */
    		ClientImpl.prototype.receivePinger = null;
    		ClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second
    		ClientImpl.prototype._reconnecting = false;
    		ClientImpl.prototype._reconnectTimeout = null;
    		ClientImpl.prototype.disconnectedPublishing = false;
    		ClientImpl.prototype.disconnectedBufferSize = 5000;

    		ClientImpl.prototype.receiveBuffer = null;

    		ClientImpl.prototype._traceBuffer = null;
    		ClientImpl.prototype._MAX_TRACE_ENTRIES = 100;

    		ClientImpl.prototype.connect = function (connectOptions) {
    			var connectOptionsMasked = this._traceMask(connectOptions, "password");
    			this._trace("Client.connect", connectOptionsMasked, this.socket, this.connected);

    			if (this.connected)
    				throw new Error(format(ERROR.INVALID_STATE, ["already connected"]));
    			if (this.socket)
    				throw new Error(format(ERROR.INVALID_STATE, ["already connected"]));

    			if (this._reconnecting) {
    			// connect() function is called while reconnect is in progress.
    			// Terminate the auto reconnect process to use new connect options.
    				this._reconnectTimeout.cancel();
    				this._reconnectTimeout = null;
    				this._reconnecting = false;
    			}

    			this.connectOptions = connectOptions;
    			this._reconnectInterval = 1;
    			this._reconnecting = false;
    			if (connectOptions.uris) {
    				this.hostIndex = 0;
    				this._doConnect(connectOptions.uris[0]);
    			} else {
    				this._doConnect(this.uri);
    			}

    		};

    		ClientImpl.prototype.subscribe = function (filter, subscribeOptions) {
    			this._trace("Client.subscribe", filter, subscribeOptions);

    			if (!this.connected)
    				throw new Error(format(ERROR.INVALID_STATE, ["not connected"]));

                var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);
                wireMessage.topics = filter.constructor === Array ? filter : [filter];
                if (subscribeOptions.qos === undefined)
                    subscribeOptions.qos = 0;
                wireMessage.requestedQos = [];
                for (var i = 0; i < wireMessage.topics.length; i++)
                    wireMessage.requestedQos[i] = subscribeOptions.qos;

    			if (subscribeOptions.onSuccess) {
    				wireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};
    			}

    			if (subscribeOptions.onFailure) {
    				wireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};
    			}

    			if (subscribeOptions.timeout) {
    				wireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,
    					[{invocationContext:subscribeOptions.invocationContext,
    						errorCode:ERROR.SUBSCRIBE_TIMEOUT.code,
    						errorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);
    			}

    			// All subscriptions return a SUBACK.
    			this._requires_ack(wireMessage);
    			this._schedule_message(wireMessage);
    		};

    		/** @ignore */
    		ClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {
    			this._trace("Client.unsubscribe", filter, unsubscribeOptions);

    			if (!this.connected)
    				throw new Error(format(ERROR.INVALID_STATE, ["not connected"]));

                var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);
                wireMessage.topics = filter.constructor === Array ? filter : [filter];

    			if (unsubscribeOptions.onSuccess) {
    				wireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};
    			}
    			if (unsubscribeOptions.timeout) {
    				wireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,
    					[{invocationContext:unsubscribeOptions.invocationContext,
    						errorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,
    						errorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);
    			}

    			// All unsubscribes return a SUBACK.
    			this._requires_ack(wireMessage);
    			this._schedule_message(wireMessage);
    		};

    		ClientImpl.prototype.send = function (message) {
    			this._trace("Client.send", message);

    			var wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);
    			wireMessage.payloadMessage = message;

    			if (this.connected) {
    			// Mark qos 1 & 2 message as "ACK required"
    			// For qos 0 message, invoke onMessageDelivered callback if there is one.
    			// Then schedule the message.
    				if (message.qos > 0) {
    					this._requires_ack(wireMessage);
    				} else if (this.onMessageDelivered) {
    					this._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);
    				}
    				this._schedule_message(wireMessage);
    			} else {
    			// Currently disconnected, will not schedule this message
    			// Check if reconnecting is in progress and disconnected publish is enabled.
    				if (this._reconnecting && this.disconnectedPublishing) {
    				// Check the limit which include the "required ACK" messages
    					var messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;
    					if (messageCount > this.disconnectedBufferSize) {
    						throw new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));
    					} else {
    						if (message.qos > 0) {
    						// Mark this message as "ACK required"
    							this._requires_ack(wireMessage);
    						} else {
    							wireMessage.sequence = ++this._sequence;
    							// Add messages in fifo order to array, by adding to start
    							this._buffered_msg_queue.unshift(wireMessage);
    						}
    					}
    				} else {
    					throw new Error(format(ERROR.INVALID_STATE, ["not connected"]));
    				}
    			}
    		};

    		ClientImpl.prototype.disconnect = function () {
    			this._trace("Client.disconnect");

    			if (this._reconnecting) {
    			// disconnect() function is called while reconnect is in progress.
    			// Terminate the auto reconnect process.
    				this._reconnectTimeout.cancel();
    				this._reconnectTimeout = null;
    				this._reconnecting = false;
    			}

    			if (!this.socket)
    				throw new Error(format(ERROR.INVALID_STATE, ["not connecting or connected"]));

    			var wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);

    			// Run the disconnected call back as soon as the message has been sent,
    			// in case of a failure later on in the disconnect processing.
    			// as a consequence, the _disconected call back may be run several times.
    			this._notify_msg_sent[wireMessage] = scope(this._disconnected, this);

    			this._schedule_message(wireMessage);
    		};

    		ClientImpl.prototype.getTraceLog = function () {
    			if ( this._traceBuffer !== null ) {
    				this._trace("Client.getTraceLog", new Date());
    				this._trace("Client.getTraceLog in flight messages", this._sentMessages.length);
    				for (var key in this._sentMessages)
    					this._trace("_sentMessages ",key, this._sentMessages[key]);
    				for (var key in this._receivedMessages)
    					this._trace("_receivedMessages ",key, this._receivedMessages[key]);

    				return this._traceBuffer;
    			}
    		};

    		ClientImpl.prototype.startTrace = function () {
    			if ( this._traceBuffer === null ) {
    				this._traceBuffer = [];
    			}
    			this._trace("Client.startTrace", new Date(), version);
    		};

    		ClientImpl.prototype.stopTrace = function () {
    			delete this._traceBuffer;
    		};

    		ClientImpl.prototype._doConnect = function (wsurl) {
    		// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.
    			if (this.connectOptions.useSSL) {
    				var uriParts = wsurl.split(":");
    				uriParts[0] = "wss";
    				wsurl = uriParts.join(":");
    			}
    			this._wsuri = wsurl;
    			this.connected = false;



    			if (this.connectOptions.mqttVersion < 4) {
    				this.socket = new WebSocket(wsurl, ["mqttv3.1"]);
    			} else {
    				this.socket = new WebSocket(wsurl, ["mqtt"]);
    			}
    			this.socket.binaryType = "arraybuffer";
    			this.socket.onopen = scope(this._on_socket_open, this);
    			this.socket.onmessage = scope(this._on_socket_message, this);
    			this.socket.onerror = scope(this._on_socket_error, this);
    			this.socket.onclose = scope(this._on_socket_close, this);

    			this.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);
    			this.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);
    			if (this._connectTimeout) {
    				this._connectTimeout.cancel();
    				this._connectTimeout = null;
    			}
    			this._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);
    		};


    		// Schedule a new message to be sent over the WebSockets
    		// connection. CONNECT messages cause WebSocket connection
    		// to be started. All other messages are queued internally
    		// until this has happened. When WS connection starts, process
    		// all outstanding messages.
    		ClientImpl.prototype._schedule_message = function (message) {
    			// Add messages in fifo order to array, by adding to start
    			this._msg_queue.unshift(message);
    			// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.
    			if (this.connected) {
    				this._process_queue();
    			}
    		};

    		ClientImpl.prototype.store = function(prefix, wireMessage) {
    			var storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};

    			switch(wireMessage.type) {
    			case MESSAGE_TYPE.PUBLISH:
    				if(wireMessage.pubRecReceived)
    					storedMessage.pubRecReceived = true;

    				// Convert the payload to a hex string.
    				storedMessage.payloadMessage = {};
    				var hex = "";
    				var messageBytes = wireMessage.payloadMessage.payloadBytes;
    				for (var i=0; i<messageBytes.length; i++) {
    					if (messageBytes[i] <= 0xF)
    						hex = hex+"0"+messageBytes[i].toString(16);
    					else
    						hex = hex+messageBytes[i].toString(16);
    				}
    				storedMessage.payloadMessage.payloadHex = hex;

    				storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;
    				storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;
    				if (wireMessage.payloadMessage.duplicate)
    					storedMessage.payloadMessage.duplicate = true;
    				if (wireMessage.payloadMessage.retained)
    					storedMessage.payloadMessage.retained = true;

    				// Add a sequence number to sent messages.
    				if ( prefix.indexOf("Sent:") === 0 ) {
    					if ( wireMessage.sequence === undefined )
    						wireMessage.sequence = ++this._sequence;
    					storedMessage.sequence = wireMessage.sequence;
    				}
    				break;

    			default:
    				throw Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));
    			}
    			localStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));
    		};

    		ClientImpl.prototype.restore = function(key) {
    			var value = localStorage.getItem(key);
    			var storedMessage = JSON.parse(value);

    			var wireMessage = new WireMessage(storedMessage.type, storedMessage);

    			switch(storedMessage.type) {
    			case MESSAGE_TYPE.PUBLISH:
    				// Replace the payload message with a Message object.
    				var hex = storedMessage.payloadMessage.payloadHex;
    				var buffer = new ArrayBuffer((hex.length)/2);
    				var byteStream = new Uint8Array(buffer);
    				var i = 0;
    				while (hex.length >= 2) {
    					var x = parseInt(hex.substring(0, 2), 16);
    					hex = hex.substring(2, hex.length);
    					byteStream[i++] = x;
    				}
    				var payloadMessage = new Message(byteStream);

    				payloadMessage.qos = storedMessage.payloadMessage.qos;
    				payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;
    				if (storedMessage.payloadMessage.duplicate)
    					payloadMessage.duplicate = true;
    				if (storedMessage.payloadMessage.retained)
    					payloadMessage.retained = true;
    				wireMessage.payloadMessage = payloadMessage;

    				break;

    			default:
    				throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));
    			}

    			if (key.indexOf("Sent:"+this._localKey) === 0) {
    				wireMessage.payloadMessage.duplicate = true;
    				this._sentMessages[wireMessage.messageIdentifier] = wireMessage;
    			} else if (key.indexOf("Received:"+this._localKey) === 0) {
    				this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;
    			}
    		};

    		ClientImpl.prototype._process_queue = function () {
    			var message = null;

    			// Send all queued messages down socket connection
    			while ((message = this._msg_queue.pop())) {
    				this._socket_send(message);
    				// Notify listeners that message was successfully sent
    				if (this._notify_msg_sent[message]) {
    					this._notify_msg_sent[message]();
    					delete this._notify_msg_sent[message];
    				}
    			}
    		};

    		/**
    	 * Expect an ACK response for this message. Add message to the set of in progress
    	 * messages and set an unused identifier in this message.
    	 * @ignore
    	 */
    		ClientImpl.prototype._requires_ack = function (wireMessage) {
    			var messageCount = Object.keys(this._sentMessages).length;
    			if (messageCount > this.maxMessageIdentifier)
    				throw Error ("Too many messages:"+messageCount);

    			while(this._sentMessages[this._message_identifier] !== undefined) {
    				this._message_identifier++;
    			}
    			wireMessage.messageIdentifier = this._message_identifier;
    			this._sentMessages[wireMessage.messageIdentifier] = wireMessage;
    			if (wireMessage.type === MESSAGE_TYPE.PUBLISH) {
    				this.store("Sent:", wireMessage);
    			}
    			if (this._message_identifier === this.maxMessageIdentifier) {
    				this._message_identifier = 1;
    			}
    		};

    		/**
    	 * Called when the underlying websocket has been opened.
    	 * @ignore
    	 */
    		ClientImpl.prototype._on_socket_open = function () {
    		// Create the CONNECT message object.
    			var wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);
    			wireMessage.clientId = this.clientId;
    			this._socket_send(wireMessage);
    		};

    		/**
    	 * Called when the underlying websocket has received a complete packet.
    	 * @ignore
    	 */
    		ClientImpl.prototype._on_socket_message = function (event) {
    			this._trace("Client._on_socket_message", event.data);
    			var messages = this._deframeMessages(event.data);
    			for (var i = 0; i < messages.length; i+=1) {
    				this._handleMessage(messages[i]);
    			}
    		};

    		ClientImpl.prototype._deframeMessages = function(data) {
    			var byteArray = new Uint8Array(data);
    			var messages = [];
    			if (this.receiveBuffer) {
    				var newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);
    				newData.set(this.receiveBuffer);
    				newData.set(byteArray,this.receiveBuffer.length);
    				byteArray = newData;
    				delete this.receiveBuffer;
    			}
    			try {
    				var offset = 0;
    				while(offset < byteArray.length) {
    					var result = decodeMessage(byteArray,offset);
    					var wireMessage = result[0];
    					offset = result[1];
    					if (wireMessage !== null) {
    						messages.push(wireMessage);
    					} else {
    						break;
    					}
    				}
    				if (offset < byteArray.length) {
    					this.receiveBuffer = byteArray.subarray(offset);
    				}
    			} catch (error) {
    				var errorStack = ((error.hasOwnProperty("stack") == "undefined") ? error.stack.toString() : "No Error Stack Available");
    				this._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));
    				return;
    			}
    			return messages;
    		};

    		ClientImpl.prototype._handleMessage = function(wireMessage) {

    			this._trace("Client._handleMessage", wireMessage);

    			try {
    				switch(wireMessage.type) {
    				case MESSAGE_TYPE.CONNACK:
    					this._connectTimeout.cancel();
    					if (this._reconnectTimeout)
    						this._reconnectTimeout.cancel();

    					// If we have started using clean session then clear up the local state.
    					if (this.connectOptions.cleanSession) {
    						for (var key in this._sentMessages) {
    							var sentMessage = this._sentMessages[key];
    							localStorage.removeItem("Sent:"+this._localKey+sentMessage.messageIdentifier);
    						}
    						this._sentMessages = {};

    						for (var key in this._receivedMessages) {
    							var receivedMessage = this._receivedMessages[key];
    							localStorage.removeItem("Received:"+this._localKey+receivedMessage.messageIdentifier);
    						}
    						this._receivedMessages = {};
    					}
    					// Client connected and ready for business.
    					if (wireMessage.returnCode === 0) {

    						this.connected = true;
    						// Jump to the end of the list of uris and stop looking for a good host.

    						if (this.connectOptions.uris)
    							this.hostIndex = this.connectOptions.uris.length;

    					} else {
    						this._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));
    						break;
    					}

    					// Resend messages.
    					var sequencedMessages = [];
    					for (var msgId in this._sentMessages) {
    						if (this._sentMessages.hasOwnProperty(msgId))
    							sequencedMessages.push(this._sentMessages[msgId]);
    					}

    					// Also schedule qos 0 buffered messages if any
    					if (this._buffered_msg_queue.length > 0) {
    						var msg = null;
    						while ((msg = this._buffered_msg_queue.pop())) {
    							sequencedMessages.push(msg);
    							if (this.onMessageDelivered)
    								this._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);
    						}
    					}

    					// Sort sentMessages into the original sent order.
    					var sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );
    					for (var i=0, len=sequencedMessages.length; i<len; i++) {
    						var sentMessage = sequencedMessages[i];
    						if (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {
    							var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});
    							this._schedule_message(pubRelMessage);
    						} else {
    							this._schedule_message(sentMessage);
    						}
    					}

    					// Execute the connectOptions.onSuccess callback if there is one.
    					// Will also now return if this connection was the result of an automatic
    					// reconnect and which URI was successfully connected to.
    					if (this.connectOptions.onSuccess) {
    						this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});
    					}

    					var reconnected = false;
    					if (this._reconnecting) {
    						reconnected = true;
    						this._reconnectInterval = 1;
    						this._reconnecting = false;
    					}

    					// Execute the onConnected callback if there is one.
    					this._connected(reconnected, this._wsuri);

    					// Process all queued messages now that the connection is established.
    					this._process_queue();
    					break;

    				case MESSAGE_TYPE.PUBLISH:
    					this._receivePublish(wireMessage);
    					break;

    				case MESSAGE_TYPE.PUBACK:
    					var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
    					// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.
    					if (sentMessage) {
    						delete this._sentMessages[wireMessage.messageIdentifier];
    						localStorage.removeItem("Sent:"+this._localKey+wireMessage.messageIdentifier);
    						if (this.onMessageDelivered)
    							this.onMessageDelivered(sentMessage.payloadMessage);
    					}
    					break;

    				case MESSAGE_TYPE.PUBREC:
    					var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
    					// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.
    					if (sentMessage) {
    						sentMessage.pubRecReceived = true;
    						var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});
    						this.store("Sent:", sentMessage);
    						this._schedule_message(pubRelMessage);
    					}
    					break;

    				case MESSAGE_TYPE.PUBREL:
    					var receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];
    					localStorage.removeItem("Received:"+this._localKey+wireMessage.messageIdentifier);
    					// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.
    					if (receivedMessage) {
    						this._receiveMessage(receivedMessage);
    						delete this._receivedMessages[wireMessage.messageIdentifier];
    					}
    					// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.
    					var pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});
    					this._schedule_message(pubCompMessage);


    					break;

    				case MESSAGE_TYPE.PUBCOMP:
    					var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
    					delete this._sentMessages[wireMessage.messageIdentifier];
    					localStorage.removeItem("Sent:"+this._localKey+wireMessage.messageIdentifier);
    					if (this.onMessageDelivered)
    						this.onMessageDelivered(sentMessage.payloadMessage);
    					break;

    				case MESSAGE_TYPE.SUBACK:
    					var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
    					if (sentMessage) {
    						if(sentMessage.timeOut)
    							sentMessage.timeOut.cancel();
    						// This will need to be fixed when we add multiple topic support
    						if (wireMessage.returnCode[0] === 0x80) {
    							if (sentMessage.onFailure) {
    								sentMessage.onFailure(wireMessage.returnCode);
    							}
    						} else if (sentMessage.onSuccess) {
    							sentMessage.onSuccess(wireMessage.returnCode);
    						}
    						delete this._sentMessages[wireMessage.messageIdentifier];
    					}
    					break;

    				case MESSAGE_TYPE.UNSUBACK:
    					var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
    					if (sentMessage) {
    						if (sentMessage.timeOut)
    							sentMessage.timeOut.cancel();
    						if (sentMessage.callback) {
    							sentMessage.callback();
    						}
    						delete this._sentMessages[wireMessage.messageIdentifier];
    					}

    					break;

    				case MESSAGE_TYPE.PINGRESP:
    				/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */
    					this.sendPinger.reset();
    					break;

    				case MESSAGE_TYPE.DISCONNECT:
    				// Clients do not expect to receive disconnect packets.
    					this._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));
    					break;

    				default:
    					this._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));
    				}
    			} catch (error) {
    				var errorStack = ((error.hasOwnProperty("stack") == "undefined") ? error.stack.toString() : "No Error Stack Available");
    				this._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));
    				return;
    			}
    		};

    		/** @ignore */
    		ClientImpl.prototype._on_socket_error = function (error) {
    			if (!this._reconnecting) {
    				this._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));
    			}
    		};

    		/** @ignore */
    		ClientImpl.prototype._on_socket_close = function () {
    			if (!this._reconnecting) {
    				this._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));
    			}
    		};

    		/** @ignore */
    		ClientImpl.prototype._socket_send = function (wireMessage) {

    			if (wireMessage.type == 1) {
    				var wireMessageMasked = this._traceMask(wireMessage, "password");
    				this._trace("Client._socket_send", wireMessageMasked);
    			}
    			else this._trace("Client._socket_send", wireMessage);

    			this.socket.send(wireMessage.encode());
    			/* We have proved to the server we are alive. */
    			this.sendPinger.reset();
    		};

    		/** @ignore */
    		ClientImpl.prototype._receivePublish = function (wireMessage) {
    			switch(wireMessage.payloadMessage.qos) {
    			case "undefined":
    			case 0:
    				this._receiveMessage(wireMessage);
    				break;

    			case 1:
    				var pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});
    				this._schedule_message(pubAckMessage);
    				this._receiveMessage(wireMessage);
    				break;

    			case 2:
    				this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;
    				this.store("Received:", wireMessage);
    				var pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});
    				this._schedule_message(pubRecMessage);

    				break;

    			default:
    				throw Error("Invaild qos=" + wireMessage.payloadMessage.qos);
    			}
    		};

    		/** @ignore */
    		ClientImpl.prototype._receiveMessage = function (wireMessage) {
    			if (this.onMessageArrived) {
    				this.onMessageArrived(wireMessage.payloadMessage);
    			}
    		};

    		/**
    	 * Client has connected.
    	 * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.
    	 * @param {uri} [string] fully qualified WebSocket URI of the server.
    	 */
    		ClientImpl.prototype._connected = function (reconnect, uri) {
    		// Execute the onConnected callback if there is one.
    			if (this.onConnected)
    				this.onConnected(reconnect, uri);
    		};

    		/**
    	 * Attempts to reconnect the client to the server.
       * For each reconnect attempt, will double the reconnect interval
       * up to 128 seconds.
    	 */
    		ClientImpl.prototype._reconnect = function () {
    			this._trace("Client._reconnect");
    			if (!this.connected) {
    				this._reconnecting = true;
    				this.sendPinger.cancel();
    				this.receivePinger.cancel();
    				if (this._reconnectInterval < 128)
    					this._reconnectInterval = this._reconnectInterval * 2;
    				if (this.connectOptions.uris) {
    					this.hostIndex = 0;
    					this._doConnect(this.connectOptions.uris[0]);
    				} else {
    					this._doConnect(this.uri);
    				}
    			}
    		};

    		/**
    	 * Client has disconnected either at its own request or because the server
    	 * or network disconnected it. Remove all non-durable state.
    	 * @param {errorCode} [number] the error number.
    	 * @param {errorText} [string] the error text.
    	 * @ignore
    	 */
    		ClientImpl.prototype._disconnected = function (errorCode, errorText) {
    			this._trace("Client._disconnected", errorCode, errorText);

    			if (errorCode !== undefined && this._reconnecting) {
    				//Continue automatic reconnect process
    				this._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);
    				return;
    			}

    			this.sendPinger.cancel();
    			this.receivePinger.cancel();
    			if (this._connectTimeout) {
    				this._connectTimeout.cancel();
    				this._connectTimeout = null;
    			}

    			// Clear message buffers.
    			this._msg_queue = [];
    			this._buffered_msg_queue = [];
    			this._notify_msg_sent = {};

    			if (this.socket) {
    			// Cancel all socket callbacks so that they cannot be driven again by this socket.
    				this.socket.onopen = null;
    				this.socket.onmessage = null;
    				this.socket.onerror = null;
    				this.socket.onclose = null;
    				if (this.socket.readyState === 1)
    					this.socket.close();
    				delete this.socket;
    			}

    			if (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {
    			// Try the next host.
    				this.hostIndex++;
    				this._doConnect(this.connectOptions.uris[this.hostIndex]);
    			} else {

    				if (errorCode === undefined) {
    					errorCode = ERROR.OK.code;
    					errorText = format(ERROR.OK);
    				}

    				// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.
    				if (this.connected) {
    					this.connected = false;
    					// Execute the connectionLostCallback if there is one, and we were connected.
    					if (this.onConnectionLost) {
    						this.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});
    					}
    					if (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {
    					// Start automatic reconnect process for the very first time since last successful connect.
    						this._reconnectInterval = 1;
    						this._reconnect();
    						return;
    					}
    				} else {
    				// Otherwise we never had a connection, so indicate that the connect has failed.
    					if (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {
    						this._trace("Failed to connect V4, dropping back to V3");
    						this.connectOptions.mqttVersion = 3;
    						if (this.connectOptions.uris) {
    							this.hostIndex = 0;
    							this._doConnect(this.connectOptions.uris[0]);
    						} else {
    							this._doConnect(this.uri);
    						}
    					} else if(this.connectOptions.onFailure) {
    						this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});
    					}
    				}
    			}
    		};

    		/** @ignore */
    		ClientImpl.prototype._trace = function () {
    		// Pass trace message back to client's callback function
    			if (this.traceFunction) {
    				var args = Array.prototype.slice.call(arguments);
    				for (var i in args)
    				{
    					if (typeof args[i] !== "undefined")
    						args.splice(i, 1, JSON.stringify(args[i]));
    				}
    				var record = args.join("");
    				this.traceFunction ({severity: "Debug", message: record	});
    			}

    			//buffer style trace
    			if ( this._traceBuffer !== null ) {
    				for (var i = 0, max = arguments.length; i < max; i++) {
    					if ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {
    						this._traceBuffer.shift();
    					}
    					if (i === 0) this._traceBuffer.push(arguments[i]);
    					else if (typeof arguments[i] === "undefined" ) this._traceBuffer.push(arguments[i]);
    					else this._traceBuffer.push("  "+JSON.stringify(arguments[i]));
    				}
    			}
    		};

    		/** @ignore */
    		ClientImpl.prototype._traceMask = function (traceObject, masked) {
    			var traceObjectMasked = {};
    			for (var attr in traceObject) {
    				if (traceObject.hasOwnProperty(attr)) {
    					if (attr == masked)
    						traceObjectMasked[attr] = "******";
    					else
    						traceObjectMasked[attr] = traceObject[attr];
    				}
    			}
    			return traceObjectMasked;
    		};

    		// ------------------------------------------------------------------------
    		// Public Programming interface.
    		// ------------------------------------------------------------------------

    		/**
    	 * The JavaScript application communicates to the server using a {@link Paho.Client} object.
    	 * <p>
    	 * Most applications will create just one Client object and then call its connect() method,
    	 * however applications can create more than one Client object if they wish.
    	 * In this case the combination of host, port and clientId attributes must be different for each Client object.
    	 * <p>
    	 * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods
    	 * (even though the underlying protocol exchange might be synchronous in nature).
    	 * This means they signal their completion by calling back to the application,
    	 * via Success or Failure callback functions provided by the application on the method in question.
    	 * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime
    	 * of the script that made the invocation.
    	 * <p>
    	 * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,
    	 * that are defined on the {@link Paho.Client} object.
    	 * These may get called multiple times, and aren't directly related to specific method invocations made by the client.
    	 *
    	 * @name Paho.Client
    	 *
    	 * @constructor
    	 *
    	 * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.
    	 * @param {number} port - the port number to connect to - only required if host is not a URI
    	 * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.
    	 * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.
    	 *
    	 * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.
    	 * @property {number} port - <i>read only</i> the server's port.
    	 * @property {string} path - <i>read only</i> the server's path.
    	 * @property {string} clientId - <i>read only</i> used when connecting to the server.
    	 * @property {function} onConnectionLost - called when a connection has been lost.
    	 *                            after a connect() method has succeeded.
    	 *                            Establish the call back used when a connection has been lost. The connection may be
    	 *                            lost because the client initiates a disconnect or because the server or network
    	 *                            cause the client to be disconnected. The disconnect call back may be called without
    	 *                            the connectionComplete call back being invoked if, for example the client fails to
    	 *                            connect.
    	 *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:
    	 *                            <ol>
    	 *                            <li>errorCode
    	 *                            <li>errorMessage
    	 *                            </ol>
    	 * @property {function} onMessageDelivered - called when a message has been delivered.
    	 *                            All processing that this Client will ever do has been completed. So, for example,
    	 *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server
    	 *                            and the message has been removed from persistent storage before this callback is invoked.
    	 *                            Parameters passed to the onMessageDelivered callback are:
    	 *                            <ol>
    	 *                            <li>{@link Paho.Message} that was delivered.
    	 *                            </ol>
    	 * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.
    	 *                            Parameters passed to the onMessageArrived callback are:
    	 *                            <ol>
    	 *                            <li>{@link Paho.Message} that has arrived.
    	 *                            </ol>
    	 * @property {function} onConnected - called when a connection is successfully made to the server.
    	 *                                  after a connect() method.
    	 *                                  Parameters passed to the onConnected callback are:
    	 *                                  <ol>
    	 *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>
    	 *                                  <li>URI (string) - The URI used to connect to the server.</li>
    	 *                                  </ol>
    	 * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in
    	 *                                            in the event that the connection to the server is lost.
    	 * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected
    	 *                                             buffer will hold before rejecting new messages. Default size: 5000 messages
    	 * @property {function} trace - called whenever trace is called. TODO
    	 */
    		var Client = function (host, port, path, clientId) {

    			var uri;

    			if (typeof host !== "string")
    				throw new Error(format(ERROR.INVALID_TYPE, [typeof host, "host"]));

    			if (arguments.length == 2) {
    			// host: must be full ws:// uri
    			// port: clientId
    				clientId = port;
    				uri = host;
    				var match = uri.match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);
    				if (match) {
    					host = match[4]||match[2];
    					port = parseInt(match[7]);
    					path = match[8];
    				} else {
    					throw new Error(format(ERROR.INVALID_ARGUMENT,[host,"host"]));
    				}
    			} else {
    				if (arguments.length == 3) {
    					clientId = path;
    					path = "/mqtt";
    				}
    				if (typeof port !== "number" || port < 0)
    					throw new Error(format(ERROR.INVALID_TYPE, [typeof port, "port"]));
    				if (typeof path !== "string")
    					throw new Error(format(ERROR.INVALID_TYPE, [typeof path, "path"]));

    				var ipv6AddSBracket = (host.indexOf(":") !== -1 && host.slice(0,1) !== "[" && host.slice(-1) !== "]");
    				uri = "ws://"+(ipv6AddSBracket?"["+host+"]":host)+":"+port+path;
    			}

    			var clientIdLength = 0;
    			for (var i = 0; i<clientId.length; i++) {
    				var charCode = clientId.charCodeAt(i);
    				if (0xD800 <= charCode && charCode <= 0xDBFF)  {
    					i++; // Surrogate pair.
    				}
    				clientIdLength++;
    			}
    			if (typeof clientId !== "string" || clientIdLength > 65535)
    				throw new Error(format(ERROR.INVALID_ARGUMENT, [clientId, "clientId"]));

    			var client = new ClientImpl(uri, host, port, path, clientId);

    			//Public Properties
    			Object.defineProperties(this,{
    				"host":{
    					get: function() { return host; },
    					set: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }
    				},
    				"port":{
    					get: function() { return port; },
    					set: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }
    				},
    				"path":{
    					get: function() { return path; },
    					set: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }
    				},
    				"uri":{
    					get: function() { return uri; },
    					set: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }
    				},
    				"clientId":{
    					get: function() { return client.clientId; },
    					set: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }
    				},
    				"onConnected":{
    					get: function() { return client.onConnected; },
    					set: function(newOnConnected) {
    						if (typeof newOnConnected === "function")
    							client.onConnected = newOnConnected;
    						else
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, "onConnected"]));
    					}
    				},
    				"disconnectedPublishing":{
    					get: function() { return client.disconnectedPublishing; },
    					set: function(newDisconnectedPublishing) {
    						client.disconnectedPublishing = newDisconnectedPublishing;
    					}
    				},
    				"disconnectedBufferSize":{
    					get: function() { return client.disconnectedBufferSize; },
    					set: function(newDisconnectedBufferSize) {
    						client.disconnectedBufferSize = newDisconnectedBufferSize;
    					}
    				},
    				"onConnectionLost":{
    					get: function() { return client.onConnectionLost; },
    					set: function(newOnConnectionLost) {
    						if (typeof newOnConnectionLost === "function")
    							client.onConnectionLost = newOnConnectionLost;
    						else
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, "onConnectionLost"]));
    					}
    				},
    				"onMessageDelivered":{
    					get: function() { return client.onMessageDelivered; },
    					set: function(newOnMessageDelivered) {
    						if (typeof newOnMessageDelivered === "function")
    							client.onMessageDelivered = newOnMessageDelivered;
    						else
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, "onMessageDelivered"]));
    					}
    				},
    				"onMessageArrived":{
    					get: function() { return client.onMessageArrived; },
    					set: function(newOnMessageArrived) {
    						if (typeof newOnMessageArrived === "function")
    							client.onMessageArrived = newOnMessageArrived;
    						else
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, "onMessageArrived"]));
    					}
    				},
    				"trace":{
    					get: function() { return client.traceFunction; },
    					set: function(trace) {
    						if(typeof trace === "function"){
    							client.traceFunction = trace;
    						}else {
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof trace, "onTrace"]));
    						}
    					}
    				},
    			});

    			/**
    		 * Connect this Messaging client to its server.
    		 *
    		 * @name Paho.Client#connect
    		 * @function
    		 * @param {object} connectOptions - Attributes used with the connection.
    		 * @param {number} connectOptions.timeout - If the connect has not succeeded within this
    		 *                    number of seconds, it is deemed to have failed.
    		 *                    The default is 30 seconds.
    		 * @param {string} connectOptions.userName - Authentication username for this connection.
    		 * @param {string} connectOptions.password - Authentication password for this connection.
    		 * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client
    		 *                    disconnects abnormally.
    		 * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if
    		 *                    there is no activity for this number of seconds.
    		 *                    The default value of 60 seconds is assumed if not set.
    		 * @param {boolean} connectOptions.cleanSession - if true(default) the client and server
    		 *                    persistent state is deleted on successful connect.
    		 * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.
    		 * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.
    		 * @param {function} connectOptions.onSuccess - called when the connect acknowledgement
    		 *                    has been received from the server.
    		 * A single response object parameter is passed to the onSuccess callback containing the following fields:
    		 * <ol>
    		 * <li>invocationContext as passed in to the onSuccess method in the connectOptions.
    		 * </ol>
    	 * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.
    		 * A single response object parameter is passed to the onFailure callback containing the following fields:
    		 * <ol>
    		 * <li>invocationContext as passed in to the onFailure method in the connectOptions.
    		 * <li>errorCode a number indicating the nature of the error.
    		 * <li>errorMessage text describing the error.
    		 * </ol>
    	 * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified
    		 * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place
    		 * of the host and port paramater on the construtor. The hosts are tried one at at time in order until
    		 * one of then succeeds.
    	 * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property
    		 * is not used.
    	 * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect
    	 * to the server if the connection is lost.
    	 *<ul>
    	 *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the
    	 * connection is lost.</li>
    	 *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.
    	 * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay
    	 * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>
    	 *</ul>
    	 * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.
    	 *<ul>
    	 *<li>3 - MQTT V3.1</li>
    	 *<li>4 - MQTT V3.1.1</li>
    	 *</ul>
    	 * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the
    	 * selected MQTT Version or will fail to connect.
    	 * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris
    	 * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.
    	 * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as
    	 * the hosts array will be converted to uris and will overwrite this property.
    		 * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost
    		 * or disconnected before calling connect for a second or subsequent time.
    		 */
    			this.connect = function (connectOptions) {
    				connectOptions = connectOptions || {} ;
    				validate(connectOptions,  {timeout:"number",
    					userName:"string",
    					password:"string",
    					willMessage:"object",
    					keepAliveInterval:"number",
    					cleanSession:"boolean",
    					useSSL:"boolean",
    					invocationContext:"object",
    					onSuccess:"function",
    					onFailure:"function",
    					hosts:"object",
    					ports:"object",
    					reconnect:"boolean",
    					mqttVersion:"number",
    					mqttVersionExplicit:"boolean",
    					uris: "object"});

    				// If no keep alive interval is set, assume 60 seconds.
    				if (connectOptions.keepAliveInterval === undefined)
    					connectOptions.keepAliveInterval = 60;

    				if (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {
    					throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, "connectOptions.mqttVersion"]));
    				}

    				if (connectOptions.mqttVersion === undefined) {
    					connectOptions.mqttVersionExplicit = false;
    					connectOptions.mqttVersion = 4;
    				} else {
    					connectOptions.mqttVersionExplicit = true;
    				}

    				//Check that if password is set, so is username
    				if (connectOptions.password !== undefined && connectOptions.userName === undefined)
    					throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, "connectOptions.password"]));

    				if (connectOptions.willMessage) {
    					if (!(connectOptions.willMessage instanceof Message))
    						throw new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, "connectOptions.willMessage"]));
    					// The will message must have a payload that can be represented as a string.
    					// Cause the willMessage to throw an exception if this is not the case.
    					connectOptions.willMessage.stringPayload = null;

    					if (typeof connectOptions.willMessage.destinationName === "undefined")
    						throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, "connectOptions.willMessage.destinationName"]));
    				}
    				if (typeof connectOptions.cleanSession === "undefined")
    					connectOptions.cleanSession = true;
    				if (connectOptions.hosts) {

    					if (!(connectOptions.hosts instanceof Array) )
    						throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, "connectOptions.hosts"]));
    					if (connectOptions.hosts.length <1 )
    						throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, "connectOptions.hosts"]));

    					var usingURIs = false;
    					for (var i = 0; i<connectOptions.hosts.length; i++) {
    						if (typeof connectOptions.hosts[i] !== "string")
    							throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], "connectOptions.hosts["+i+"]"]));
    						if (/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(connectOptions.hosts[i])) {
    							if (i === 0) {
    								usingURIs = true;
    							} else if (!usingURIs) {
    								throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], "connectOptions.hosts["+i+"]"]));
    							}
    						} else if (usingURIs) {
    							throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], "connectOptions.hosts["+i+"]"]));
    						}
    					}

    					if (!usingURIs) {
    						if (!connectOptions.ports)
    							throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, "connectOptions.ports"]));
    						if (!(connectOptions.ports instanceof Array) )
    							throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, "connectOptions.ports"]));
    						if (connectOptions.hosts.length !== connectOptions.ports.length)
    							throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, "connectOptions.ports"]));

    						connectOptions.uris = [];

    						for (var i = 0; i<connectOptions.hosts.length; i++) {
    							if (typeof connectOptions.ports[i] !== "number" || connectOptions.ports[i] < 0)
    								throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], "connectOptions.ports["+i+"]"]));
    							var host = connectOptions.hosts[i];
    							var port = connectOptions.ports[i];

    							var ipv6 = (host.indexOf(":") !== -1);
    							uri = "ws://"+(ipv6?"["+host+"]":host)+":"+port+path;
    							connectOptions.uris.push(uri);
    						}
    					} else {
    						connectOptions.uris = connectOptions.hosts;
    					}
    				}

    				client.connect(connectOptions);
    			};

    			/**
    		 * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.
    		 *
    		 * @name Paho.Client#subscribe
    		 * @function
    		 * @param {string} filter describing the destinations to receive messages from.
    		 * <br>
    		 * @param {object} subscribeOptions - used to control the subscription
    		 *
    		 * @param {number} subscribeOptions.qos - the maximum qos of any publications sent
    		 *                                  as a result of making this subscription.
    		 * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback
    		 *                                  or onFailure callback.
    		 * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement
    		 *                                  has been received from the server.
    		 *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:
    		 *                                  <ol>
    		 *                                  <li>invocationContext if set in the subscribeOptions.
    		 *                                  </ol>
    		 * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.
    		 *                                  A single response object parameter is passed to the onFailure callback containing the following fields:
    		 *                                  <ol>
    		 *                                  <li>invocationContext - if set in the subscribeOptions.
    		 *                                  <li>errorCode - a number indicating the nature of the error.
    		 *                                  <li>errorMessage - text describing the error.
    		 *                                  </ol>
    		 * @param {number} subscribeOptions.timeout - which, if present, determines the number of
    		 *                                  seconds after which the onFailure calback is called.
    		 *                                  The presence of a timeout does not prevent the onSuccess
    		 *                                  callback from being called when the subscribe completes.
    		 * @throws {InvalidState} if the client is not in connected state.
    		 */
    			this.subscribe = function (filter, subscribeOptions) {
    				if (typeof filter !== "string" && filter.constructor !== Array)
    					throw new Error("Invalid argument:"+filter);
    				subscribeOptions = subscribeOptions || {} ;
    				validate(subscribeOptions,  {qos:"number",
    					invocationContext:"object",
    					onSuccess:"function",
    					onFailure:"function",
    					timeout:"number"
    				});
    				if (subscribeOptions.timeout && !subscribeOptions.onFailure)
    					throw new Error("subscribeOptions.timeout specified with no onFailure callback.");
    				if (typeof subscribeOptions.qos !== "undefined" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))
    					throw new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, "subscribeOptions.qos"]));
    				client.subscribe(filter, subscribeOptions);
    			};

    		/**
    		 * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.
    		 *
    		 * @name Paho.Client#unsubscribe
    		 * @function
    		 * @param {string} filter - describing the destinations to receive messages from.
    		 * @param {object} unsubscribeOptions - used to control the subscription
    		 * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback
    											  or onFailure callback.
    		 * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.
    		 *                                    A single response object parameter is passed to the
    		 *                                    onSuccess callback containing the following fields:
    		 *                                    <ol>
    		 *                                    <li>invocationContext - if set in the unsubscribeOptions.
    		 *                                    </ol>
    		 * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.
    		 *                                    A single response object parameter is passed to the onFailure callback containing the following fields:
    		 *                                    <ol>
    		 *                                    <li>invocationContext - if set in the unsubscribeOptions.
    		 *                                    <li>errorCode - a number indicating the nature of the error.
    		 *                                    <li>errorMessage - text describing the error.
    		 *                                    </ol>
    		 * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds
    		 *                                    after which the onFailure callback is called. The presence of
    		 *                                    a timeout does not prevent the onSuccess callback from being
    		 *                                    called when the unsubscribe completes
    		 * @throws {InvalidState} if the client is not in connected state.
    		 */
    			this.unsubscribe = function (filter, unsubscribeOptions) {
    				if (typeof filter !== "string" && filter.constructor !== Array)
    					throw new Error("Invalid argument:"+filter);
    				unsubscribeOptions = unsubscribeOptions || {} ;
    				validate(unsubscribeOptions,  {invocationContext:"object",
    					onSuccess:"function",
    					onFailure:"function",
    					timeout:"number"
    				});
    				if (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)
    					throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");
    				client.unsubscribe(filter, unsubscribeOptions);
    			};

    			/**
    		 * Send a message to the consumers of the destination in the Message.
    		 *
    		 * @name Paho.Client#send
    		 * @function
    		 * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.
    		 * 					   - If it is the only parameter, used as Paho.Message object.
    		 * @param {String|ArrayBuffer} payload - The message data to be sent.
    		 * @param {number} qos The Quality of Service used to deliver the message.
    		 * 		<dl>
    		 * 			<dt>0 Best effort (default).
    		 *     			<dt>1 At least once.
    		 *     			<dt>2 Exactly once.
    		 * 		</dl>
    		 * @param {Boolean} retained If true, the message is to be retained by the server and delivered
    		 *                     to both current and future subscriptions.
    		 *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.
    		 *                     A received message has the retained boolean set to true if the message was published
    		 *                     with the retained boolean set to true
    		 *                     and the subscrption was made after the message has been published.
    		 * @throws {InvalidState} if the client is not connected.
    		 */
    			this.send = function (topic,payload,qos,retained) {
    				var message ;

    				if(arguments.length === 0){
    					throw new Error("Invalid argument."+"length");

    				}else if(arguments.length == 1) {

    					if (!(topic instanceof Message) && (typeof topic !== "string"))
    						throw new Error("Invalid argument:"+ typeof topic);

    					message = topic;
    					if (typeof message.destinationName === "undefined")
    						throw new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,"Message.destinationName"]));
    					client.send(message);

    				}else {
    				//parameter checking in Message object
    					message = new Message(payload);
    					message.destinationName = topic;
    					if(arguments.length >= 3)
    						message.qos = qos;
    					if(arguments.length >= 4)
    						message.retained = retained;
    					client.send(message);
    				}
    			};

    			/**
    		 * Publish a message to the consumers of the destination in the Message.
    		 * Synonym for Paho.Mqtt.Client#send
    		 *
    		 * @name Paho.Client#publish
    		 * @function
    		 * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.
    		 * 					   - If it is the only parameter, used as Paho.Message object.
    		 * @param {String|ArrayBuffer} payload - The message data to be published.
    		 * @param {number} qos The Quality of Service used to deliver the message.
    		 * 		<dl>
    		 * 			<dt>0 Best effort (default).
    		 *     			<dt>1 At least once.
    		 *     			<dt>2 Exactly once.
    		 * 		</dl>
    		 * @param {Boolean} retained If true, the message is to be retained by the server and delivered
    		 *                     to both current and future subscriptions.
    		 *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.
    		 *                     A received message has the retained boolean set to true if the message was published
    		 *                     with the retained boolean set to true
    		 *                     and the subscrption was made after the message has been published.
    		 * @throws {InvalidState} if the client is not connected.
    		 */
    			this.publish = function(topic,payload,qos,retained) {
    				var message ;

    				if(arguments.length === 0){
    					throw new Error("Invalid argument."+"length");

    				}else if(arguments.length == 1) {

    					if (!(topic instanceof Message) && (typeof topic !== "string"))
    						throw new Error("Invalid argument:"+ typeof topic);

    					message = topic;
    					if (typeof message.destinationName === "undefined")
    						throw new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,"Message.destinationName"]));
    					client.send(message);

    				}else {
    					//parameter checking in Message object
    					message = new Message(payload);
    					message.destinationName = topic;
    					if(arguments.length >= 3)
    						message.qos = qos;
    					if(arguments.length >= 4)
    						message.retained = retained;
    					client.send(message);
    				}
    			};

    			/**
    		 * Normal disconnect of this Messaging client from its server.
    		 *
    		 * @name Paho.Client#disconnect
    		 * @function
    		 * @throws {InvalidState} if the client is already disconnected.
    		 */
    			this.disconnect = function () {
    				client.disconnect();
    			};

    			/**
    		 * Get the contents of the trace log.
    		 *
    		 * @name Paho.Client#getTraceLog
    		 * @function
    		 * @return {Object[]} tracebuffer containing the time ordered trace records.
    		 */
    			this.getTraceLog = function () {
    				return client.getTraceLog();
    			};

    			/**
    		 * Start tracing.
    		 *
    		 * @name Paho.Client#startTrace
    		 * @function
    		 */
    			this.startTrace = function () {
    				client.startTrace();
    			};

    			/**
    		 * Stop tracing.
    		 *
    		 * @name Paho.Client#stopTrace
    		 * @function
    		 */
    			this.stopTrace = function () {
    				client.stopTrace();
    			};

    			this.isConnected = function() {
    				return client.connected;
    			};
    		};

    		/**
    	 * An application message, sent or received.
    	 * <p>
    	 * All attributes may be null, which implies the default values.
    	 *
    	 * @name Paho.Message
    	 * @constructor
    	 * @param {String|ArrayBuffer} payload The message data to be sent.
    	 * <p>
    	 * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.
    	 * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.
    	 * <p>
    	 * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent
    	 *                    (for messages about to be sent) or the name of the destination from which the message has been received.
    	 *                    (for messages received by the onMessage function).
    	 * <p>
    	 * @property {number} qos The Quality of Service used to deliver the message.
    	 * <dl>
    	 *     <dt>0 Best effort (default).
    	 *     <dt>1 At least once.
    	 *     <dt>2 Exactly once.
    	 * </dl>
    	 * <p>
    	 * @property {Boolean} retained If true, the message is to be retained by the server and delivered
    	 *                     to both current and future subscriptions.
    	 *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.
    	 *                     A received message has the retained boolean set to true if the message was published
    	 *                     with the retained boolean set to true
    	 *                     and the subscrption was made after the message has been published.
    	 * <p>
    	 * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.
    	 *                     This is only set on messages received from the server.
    	 *
    	 */
    		var Message = function (newPayload) {
    			var payload;
    			if (   typeof newPayload === "string" ||
    		newPayload instanceof ArrayBuffer ||
    		(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))
    			) {
    				payload = newPayload;
    			} else {
    				throw (format(ERROR.INVALID_ARGUMENT, [newPayload, "newPayload"]));
    			}

    			var destinationName;
    			var qos = 0;
    			var retained = false;
    			var duplicate = false;

    			Object.defineProperties(this,{
    				"payloadString":{
    					enumerable : true,
    					get : function () {
    						if (typeof payload === "string")
    							return payload;
    						else
    							return parseUTF8(payload, 0, payload.length);
    					}
    				},
    				"payloadBytes":{
    					enumerable: true,
    					get: function() {
    						if (typeof payload === "string") {
    							var buffer = new ArrayBuffer(UTF8Length(payload));
    							var byteStream = new Uint8Array(buffer);
    							stringToUTF8(payload, byteStream, 0);

    							return byteStream;
    						} else {
    							return payload;
    						}
    					}
    				},
    				"destinationName":{
    					enumerable: true,
    					get: function() { return destinationName; },
    					set: function(newDestinationName) {
    						if (typeof newDestinationName === "string")
    							destinationName = newDestinationName;
    						else
    							throw new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, "newDestinationName"]));
    					}
    				},
    				"qos":{
    					enumerable: true,
    					get: function() { return qos; },
    					set: function(newQos) {
    						if (newQos === 0 || newQos === 1 || newQos === 2 )
    							qos = newQos;
    						else
    							throw new Error("Invalid argument:"+newQos);
    					}
    				},
    				"retained":{
    					enumerable: true,
    					get: function() { return retained; },
    					set: function(newRetained) {
    						if (typeof newRetained === "boolean")
    							retained = newRetained;
    						else
    							throw new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, "newRetained"]));
    					}
    				},
    				"topic":{
    					enumerable: true,
    					get: function() { return destinationName; },
    					set: function(newTopic) {destinationName=newTopic;}
    				},
    				"duplicate":{
    					enumerable: true,
    					get: function() { return duplicate; },
    					set: function(newDuplicate) {duplicate=newDuplicate;}
    				}
    			});
    		};

    		// Module contents.
    		return {
    			Client: Client,
    			Message: Message
    		};
    	// eslint-disable-next-line no-nested-ternary
    	})(typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    	return PahoMQTT;
    });
    });

    var __extends$2 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$3 = (undefined && undefined.__assign) || function () {
        __assign$3 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$3.apply(this, arguments);
    };
    var __awaiter$5 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$5 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __rest$2 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var logger$5 = new ConsoleLogger('MqttOverWSProvider');
    function mqttTopicMatch(filter, topic) {
        var filterArray = filter.split('/');
        var length = filterArray.length;
        var topicArray = topic.split('/');
        for (var i = 0; i < length; ++i) {
            var left = filterArray[i];
            var right = topicArray[i];
            if (left === '#')
                return topicArray.length >= length;
            if (left !== '+' && left !== right)
                return false;
        }
        return length === topicArray.length;
    }
    var ClientsQueue = /** @class */ (function () {
        function ClientsQueue() {
            this.promises = new Map();
        }
        ClientsQueue.prototype.get = function (clientId, clientFactory) {
            return __awaiter$5(this, void 0, void 0, function () {
                var promise;
                return __generator$5(this, function (_a) {
                    promise = this.promises.get(clientId);
                    if (promise) {
                        return [2 /*return*/, promise];
                    }
                    promise = clientFactory(clientId);
                    this.promises.set(clientId, promise);
                    return [2 /*return*/, promise];
                });
            });
        };
        Object.defineProperty(ClientsQueue.prototype, "allClients", {
            get: function () {
                return Array.from(this.promises.keys());
            },
            enumerable: true,
            configurable: true
        });
        ClientsQueue.prototype.remove = function (clientId) {
            this.promises.delete(clientId);
        };
        return ClientsQueue;
    }());
    var topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';
    var MqttOverWSProvider = /** @class */ (function (_super) {
        __extends$2(MqttOverWSProvider, _super);
        function MqttOverWSProvider(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, __assign$3(__assign$3({}, options), { clientId: options.clientId || uuid_1.v4() })) || this;
            _this._clientsQueue = new ClientsQueue();
            _this._topicObservers = new Map();
            _this._clientIdObservers = new Map();
            return _this;
        }
        Object.defineProperty(MqttOverWSProvider.prototype, "clientId", {
            get: function () {
                return this.options.clientId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MqttOverWSProvider.prototype, "endpoint", {
            get: function () {
                return this.options.aws_pubsub_endpoint;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MqttOverWSProvider.prototype, "clientsQueue", {
            get: function () {
                return this._clientsQueue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MqttOverWSProvider.prototype, "isSSLEnabled", {
            get: function () {
                return !this.options
                    .aws_appsync_dangerously_connect_to_http_endpoint_for_testing;
            },
            enumerable: true,
            configurable: true
        });
        MqttOverWSProvider.prototype.getTopicForValue = function (value) {
            return typeof value === 'object' && value[topicSymbol];
        };
        MqttOverWSProvider.prototype.getProviderName = function () {
            return 'MqttOverWSProvider';
        };
        MqttOverWSProvider.prototype.onDisconnect = function (_a) {
            var _this = this;
            var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest$2(_a, ["clientId", "errorCode"]);
            if (errorCode !== 0) {
                logger$5.warn(clientId, JSON.stringify(__assign$3({ errorCode: errorCode }, args), null, 2));
                var topicsToDelete_1 = [];
                var clientIdObservers = this._clientIdObservers.get(clientId);
                if (!clientIdObservers) {
                    return;
                }
                clientIdObservers.forEach(function (observer) {
                    observer.error('Disconnected, error code: ' + errorCode);
                    // removing observers for disconnected clientId
                    _this._topicObservers.forEach(function (observerForTopic, observerTopic) {
                        observerForTopic.delete(observer);
                        if (observerForTopic.size === 0) {
                            topicsToDelete_1.push(observerTopic);
                        }
                    });
                });
                // forgiving any trace of clientId
                this._clientIdObservers.delete(clientId);
                // Removing topics that are not listen by an observer
                topicsToDelete_1.forEach(function (topic) {
                    _this._topicObservers.delete(topic);
                });
            }
        };
        MqttOverWSProvider.prototype.newClient = function (_a) {
            var url = _a.url, clientId = _a.clientId;
            return __awaiter$5(this, void 0, void 0, function () {
                var client;
                var _this = this;
                return __generator$5(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger$5.debug('Creating new MQTT client', clientId);
                            client = new pahoMqtt.Client(url, clientId);
                            // client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));
                            client.onMessageArrived = function (_a) {
                                var topic = _a.destinationName, msg = _a.payloadString;
                                _this._onMessage(topic, msg);
                            };
                            client.onConnectionLost = function (_a) {
                                var errorCode = _a.errorCode, args = __rest$2(_a, ["errorCode"]);
                                _this.onDisconnect(__assign$3({ clientId: clientId, errorCode: errorCode }, args));
                            };
                            return [4 /*yield*/, new Promise(function (resolve, reject) {
                                    client.connect({
                                        useSSL: _this.isSSLEnabled,
                                        mqttVersion: 3,
                                        onSuccess: function () { return resolve(client); },
                                        onFailure: reject,
                                    });
                                })];
                        case 1:
                            _b.sent();
                            return [2 /*return*/, client];
                    }
                });
            });
        };
        MqttOverWSProvider.prototype.connect = function (clientId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter$5(this, void 0, void 0, function () {
                var _this = this;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) {
                                return _this.newClient(__assign$3(__assign$3({}, options), { clientId: clientId }));
                            })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        MqttOverWSProvider.prototype.disconnect = function (clientId) {
            return __awaiter$5(this, void 0, void 0, function () {
                var client;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function () { return null; })];
                        case 1:
                            client = _a.sent();
                            if (client && client.isConnected()) {
                                client.disconnect();
                            }
                            this.clientsQueue.remove(clientId);
                            return [2 /*return*/];
                    }
                });
            });
        };
        MqttOverWSProvider.prototype.publish = function (topics, msg) {
            return __awaiter$5(this, void 0, void 0, function () {
                var targetTopics, message, url, client;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            targetTopics = [].concat(topics);
                            message = JSON.stringify(msg);
                            return [4 /*yield*/, this.endpoint];
                        case 1:
                            url = _a.sent();
                            return [4 /*yield*/, this.connect(this.clientId, { url: url })];
                        case 2:
                            client = _a.sent();
                            logger$5.debug('Publishing to topic(s)', targetTopics.join(','), message);
                            targetTopics.forEach(function (topic) { return client.send(topic, message); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        MqttOverWSProvider.prototype._onMessage = function (topic, msg) {
            try {
                var matchedTopicObservers_1 = [];
                this._topicObservers.forEach(function (observerForTopic, observerTopic) {
                    if (mqttTopicMatch(observerTopic, topic)) {
                        matchedTopicObservers_1.push(observerForTopic);
                    }
                });
                var parsedMessage_1 = JSON.parse(msg);
                if (typeof parsedMessage_1 === 'object') {
                    parsedMessage_1[topicSymbol] = topic;
                }
                matchedTopicObservers_1.forEach(function (observersForTopic) {
                    observersForTopic.forEach(function (observer) { return observer.next(parsedMessage_1); });
                });
            }
            catch (error) {
                logger$5.warn('Error handling message', error, msg);
            }
        };
        MqttOverWSProvider.prototype.subscribe = function (topics, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var targetTopics = [].concat(topics);
            logger$5.debug('Subscribing to topic(s)', targetTopics.join(','));
            return new Observable(function (observer) {
                targetTopics.forEach(function (topic) {
                    // this._topicObservers is used to notify the observers according to the topic received on the message
                    var observersForTopic = _this._topicObservers.get(topic);
                    if (!observersForTopic) {
                        observersForTopic = new Set();
                        _this._topicObservers.set(topic, observersForTopic);
                    }
                    observersForTopic.add(observer);
                });
                // @ts-ignore
                var client;
                var _a = options.clientId, clientId = _a === void 0 ? _this.clientId : _a;
                // this._clientIdObservers is used to close observers when client gets disconnected
                var observersForClientId = _this._clientIdObservers.get(clientId);
                if (!observersForClientId) {
                    observersForClientId = new Set();
                }
                observersForClientId.add(observer);
                _this._clientIdObservers.set(clientId, observersForClientId);
                (function () { return __awaiter$5(_this, void 0, void 0, function () {
                    var _a, url, _b, e_1;
                    return __generator$5(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = options.url;
                                if (!(_a === void 0)) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.endpoint];
                            case 1:
                                _b = _c.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                _b = _a;
                                _c.label = 3;
                            case 3:
                                url = _b;
                                _c.label = 4;
                            case 4:
                                _c.trys.push([4, 6, , 7]);
                                return [4 /*yield*/, this.connect(clientId, { url: url })];
                            case 5:
                                client = _c.sent();
                                targetTopics.forEach(function (topic) {
                                    client.subscribe(topic);
                                });
                                return [3 /*break*/, 7];
                            case 6:
                                e_1 = _c.sent();
                                observer.error(e_1);
                                return [3 /*break*/, 7];
                            case 7: return [2 /*return*/];
                        }
                    });
                }); })();
                return function () {
                    logger$5.debug('Unsubscribing from topic(s)', targetTopics.join(','));
                    if (client) {
                        _this._clientIdObservers.get(clientId).delete(observer);
                        // No more observers per client => client not needed anymore
                        if (_this._clientIdObservers.get(clientId).size === 0) {
                            _this.disconnect(clientId);
                            _this._clientIdObservers.delete(clientId);
                        }
                        targetTopics.forEach(function (topic) {
                            var observersForTopic = _this._topicObservers.get(topic) ||
                                new Set();
                            observersForTopic.delete(observer);
                            // if no observers exists for the topic, topic should be removed
                            if (observersForTopic.size === 0) {
                                _this._topicObservers.delete(topic);
                                if (client.isConnected()) {
                                    client.unsubscribe(topic);
                                }
                            }
                        });
                    }
                    return null;
                };
            });
        };
        return MqttOverWSProvider;
    }(AbstractPubSubProvider));

    var __extends$1 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$4 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$4 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var __read$2 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$2(arguments[i]));
        return ar;
    };
    var logger$4 = new ConsoleLogger('AWSAppSyncProvider');
    var AWSAppSyncProvider = /** @class */ (function (_super) {
        __extends$1(AWSAppSyncProvider, _super);
        function AWSAppSyncProvider() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._topicClient = new Map();
            _this._topicAlias = new Map();
            return _this;
        }
        Object.defineProperty(AWSAppSyncProvider.prototype, "endpoint", {
            get: function () {
                throw new Error('Not supported');
            },
            enumerable: true,
            configurable: true
        });
        AWSAppSyncProvider.prototype.getProviderName = function () {
            return 'AWSAppSyncProvider';
        };
        AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {
            return __awaiter$4(this, void 0, void 0, function () {
                return __generator$4(this, function (_a) {
                    throw new Error('Operation not supported');
                });
            });
        };
        AWSAppSyncProvider.prototype._cleanUp = function (clientId) {
            var _this = this;
            var topicsForClient = Array.from(this._topicClient.entries())
                .filter(function (_a) {
                var _b = __read$2(_a, 2), c = _b[1];
                return c.clientId === clientId;
            })
                .map(function (_a) {
                var _b = __read$2(_a, 1), t = _b[0];
                return t;
            });
            topicsForClient.forEach(function (t) { return _this._cleanUpForTopic(t); });
        };
        AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {
            this._topicClient.delete(topic);
            this._topicAlias.delete(topic);
        };
        AWSAppSyncProvider.prototype.onDisconnect = function (_a) {
            var _this = this;
            var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest$1(_a, ["clientId", "errorCode"]);
            if (errorCode !== 0) {
                var topicsForClient = Array.from(this._topicClient.entries())
                    .filter(function (_a) {
                    var _b = __read$2(_a, 2), c = _b[1];
                    return c.clientId === clientId;
                })
                    .map(function (_a) {
                    var _b = __read$2(_a, 1), t = _b[0];
                    return t;
                });
                topicsForClient.forEach(function (topic) {
                    if (_this._topicObservers.has(topic)) {
                        _this._topicObservers.get(topic).forEach(function (obs) {
                            if (!obs.closed) {
                                obs.error(args);
                            }
                        });
                        _this._topicObservers.delete(topic);
                    }
                });
                this._cleanUp(clientId);
            }
        };
        AWSAppSyncProvider.prototype.disconnect = function (clientId) {
            return __awaiter$4(this, void 0, void 0, function () {
                return __generator$4(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function () { return null; })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, _super.prototype.disconnect.call(this, clientId)];
                        case 2:
                            _a.sent();
                            this._cleanUp(clientId);
                            return [2 /*return*/];
                    }
                });
            });
        };
        AWSAppSyncProvider.prototype.subscribe = function (topics, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var result = new Observable(function (observer) {
                var targetTopics = [].concat(topics);
                logger$4.debug('Subscribing to topic(s)', targetTopics.join(','));
                (function () { return __awaiter$4(_this, void 0, void 0, function () {
                    var _a, mqttConnections, newSubscriptions, newAliases, map;
                    var _this = this;
                    return __generator$4(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                // Add these topics to map
                                targetTopics.forEach(function (t) {
                                    if (!_this._topicObservers.has(t)) {
                                        _this._topicObservers.set(t, new Set());
                                    }
                                    _this._topicObservers.get(t).add(observer);
                                });
                                _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;
                                newAliases = Object.entries(newSubscriptions).map(function (_a) {
                                    var _b = __read$2(_a, 2), alias = _b[0], v = _b[1];
                                    return [v.topic, alias];
                                });
                                // Merge new aliases with old ones
                                this._topicAlias = new Map(__spread(Array.from(this._topicAlias.entries()), newAliases));
                                map = Object.entries(targetTopics.reduce(function (acc, elem) {
                                    var connectionInfoForTopic = mqttConnections.find(function (c) { return c.topics.indexOf(elem) > -1; });
                                    if (connectionInfoForTopic) {
                                        var clientId = connectionInfoForTopic.client, url = connectionInfoForTopic.url;
                                        if (!acc[clientId]) {
                                            acc[clientId] = {
                                                url: url,
                                                topics: new Set(),
                                            };
                                        }
                                        acc[clientId].topics.add(elem);
                                    }
                                    return acc;
                                }, {}));
                                // reconnect everything we have in the map
                                return [4 /*yield*/, Promise.all(map.map(function (_a) {
                                        var _b = __read$2(_a, 2), clientId = _b[0], _c = _b[1], url = _c.url, topics = _c.topics;
                                        return __awaiter$4(_this, void 0, void 0, function () {
                                            var client, err_1;
                                            var _this = this;
                                            return __generator$4(this, function (_d) {
                                                switch (_d.label) {
                                                    case 0:
                                                        client = null;
                                                        _d.label = 1;
                                                    case 1:
                                                        _d.trys.push([1, 3, , 4]);
                                                        return [4 /*yield*/, this.connect(clientId, {
                                                                clientId: clientId,
                                                                url: url,
                                                            })];
                                                    case 2:
                                                        client = _d.sent();
                                                        return [3 /*break*/, 4];
                                                    case 3:
                                                        err_1 = _d.sent();
                                                        observer.error({ message: 'Failed to connect', error: err_1 });
                                                        observer.complete();
                                                        return [2 /*return*/, undefined];
                                                    case 4:
                                                        // subscribe to all topics for this client
                                                        // store topic-client mapping
                                                        topics.forEach(function (topic) {
                                                            if (client.isConnected()) {
                                                                client.subscribe(topic);
                                                                _this._topicClient.set(topic, client);
                                                            }
                                                        });
                                                        return [2 /*return*/, client];
                                                }
                                            });
                                        });
                                    }))];
                            case 1:
                                // reconnect everything we have in the map
                                _b.sent();
                                return [2 /*return*/];
                        }
                    });
                }); })();
                return function () {
                    logger$4.debug('Unsubscribing from topic(s)', targetTopics.join(','));
                    targetTopics.forEach(function (t) {
                        var client = _this._topicClient.get(t);
                        if (client && client.isConnected()) {
                            client.unsubscribe(t);
                            _this._topicClient.delete(t);
                            if (!Array.from(_this._topicClient.values()).some(function (c) { return c === client; })) {
                                _this.disconnect(client.clientId);
                            }
                        }
                        _this._topicObservers.delete(t);
                    });
                };
            });
            return Observable.from(result).map(function (value) {
                var topic = _this.getTopicForValue(value);
                var alias = _this._topicAlias.get(topic);
                value.data = Object.entries(value.data).reduce(function (obj, _a) {
                    var _b = __read$2(_a, 2), origKey = _b[0], val = _b[1];
                    return ((obj[(alias || origKey)] = val), obj);
                }, {});
                return value;
            });
        };
        return AWSAppSyncProvider;
    }(MqttOverWSProvider));

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$2 = (undefined && undefined.__assign) || function () {
        __assign$2 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };
    var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$3 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$1 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var logger$3 = new ConsoleLogger('AWSAppSyncRealTimeProvider');
    var AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&
        typeof Symbol.for === 'function'
        ? Symbol.for('amplify_default')
        : '@@amplify_default');
    var dispatchApiEvent = function (event, data, message) {
        Hub.dispatch('api', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);
    };
    var MAX_DELAY_MS = 5000;
    var NON_RETRYABLE_CODES = [400, 401, 403];
    var MESSAGE_TYPES;
    (function (MESSAGE_TYPES) {
        /**
         * Client -> Server message.
         * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication
         */
        MESSAGE_TYPES["GQL_CONNECTION_INIT"] = "connection_init";
        /**
         * Server -> Client message
         * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection
         */
        MESSAGE_TYPES["GQL_CONNECTION_ERROR"] = "connection_error";
        /**
         * Server -> Client message.
         * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message
         */
        MESSAGE_TYPES["GQL_CONNECTION_ACK"] = "connection_ack";
        /**
         * Client -> Server message.
         * This message type is for register subscriptions with AWS AppSync RealTime
         */
        MESSAGE_TYPES["GQL_START"] = "start";
        /**
         * Server -> Client message.
         * This message type is for the ack response from AWS AppSync RealTime for GQL_START message
         */
        MESSAGE_TYPES["GQL_START_ACK"] = "start_ack";
        /**
         * Server -> Client message.
         * This message type is for subscription message from AWS AppSync RealTime
         */
        MESSAGE_TYPES["GQL_DATA"] = "data";
        /**
         * Server -> Client message.
         * This message type helps the client to know is still receiving messages from AWS AppSync RealTime
         */
        MESSAGE_TYPES["GQL_CONNECTION_KEEP_ALIVE"] = "ka";
        /**
         * Client -> Server message.
         * This message type is for unregister subscriptions with AWS AppSync RealTime
         */
        MESSAGE_TYPES["GQL_STOP"] = "stop";
        /**
         * Server -> Client message.
         * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message
         */
        MESSAGE_TYPES["GQL_COMPLETE"] = "complete";
        /**
         * Server -> Client message.
         * This message type is for sending error messages from AWS AppSync RealTime to the client
         */
        MESSAGE_TYPES["GQL_ERROR"] = "error";
    })(MESSAGE_TYPES || (MESSAGE_TYPES = {}));
    var SUBSCRIPTION_STATUS;
    (function (SUBSCRIPTION_STATUS) {
        SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS["PENDING"] = 0] = "PENDING";
        SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS["CONNECTED"] = 1] = "CONNECTED";
        SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS["FAILED"] = 2] = "FAILED";
    })(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));
    var SOCKET_STATUS;
    (function (SOCKET_STATUS) {
        SOCKET_STATUS[SOCKET_STATUS["CLOSED"] = 0] = "CLOSED";
        SOCKET_STATUS[SOCKET_STATUS["READY"] = 1] = "READY";
        SOCKET_STATUS[SOCKET_STATUS["CONNECTING"] = 2] = "CONNECTING";
    })(SOCKET_STATUS || (SOCKET_STATUS = {}));
    var AWS_APPSYNC_REALTIME_HEADERS = {
        accept: 'application/json, text/javascript',
        'content-encoding': 'amz-1.0',
        'content-type': 'application/json; charset=UTF-8',
    };
    /**
     * Time in milleseconds to wait for GQL_CONNECTION_INIT message
     */
    var CONNECTION_INIT_TIMEOUT = 15000;
    /**
     * Time in milleseconds to wait for GQL_START_ACK message
     */
    var START_ACK_TIMEOUT = 15000;
    /**
     * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message
     */
    var DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;
    var AWSAppSyncRealTimeProvider = /** @class */ (function (_super) {
        __extends(AWSAppSyncRealTimeProvider, _super);
        function AWSAppSyncRealTimeProvider() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.socketStatus = SOCKET_STATUS.CLOSED;
            _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;
            _this.subscriptionObserverMap = new Map();
            _this.promiseArray = [];
            return _this;
        }
        AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {
            return 'AWSAppSyncRealTimeProvider';
        };
        AWSAppSyncRealTimeProvider.prototype.newClient = function () {
            throw new Error('Not used here');
        };
        AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {
            return __awaiter$3(this, void 0, void 0, function () {
                return __generator$3(this, function (_a) {
                    throw new Error('Operation not supported');
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {
            var _this = this;
            var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;
            return new Observable(function (observer) {
                if (!appSyncGraphqlEndpoint) {
                    observer.error({
                        errors: [
                            __assign$2({}, new GraphQLError("Subscribe only available for AWS AppSync endpoint")),
                        ],
                    });
                    observer.complete();
                }
                else {
                    var subscriptionId_1 = uuid_1.v4();
                    _this._startSubscriptionWithAWSAppSyncRealTime({
                        options: options,
                        observer: observer,
                        subscriptionId: subscriptionId_1,
                    }).catch(function (err) {
                        observer.error({
                            errors: [
                                __assign$2({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + ": " + err)),
                            ],
                        });
                        observer.complete();
                    });
                    return function () { return __awaiter$3(_this, void 0, void 0, function () {
                        var subscriptionState, err_1;
                        return __generator$3(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, 3, 4]);
                                    // Waiting that subscription has been connected before trying to unsubscribe
                                    return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];
                                case 1:
                                    // Waiting that subscription has been connected before trying to unsubscribe
                                    _a.sent();
                                    subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;
                                    if (!subscriptionState) {
                                        // subscription already unsubscribed
                                        return [2 /*return*/];
                                    }
                                    if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {
                                        this._sendUnsubscriptionMessage(subscriptionId_1);
                                    }
                                    else {
                                        throw new Error('Subscription never connected');
                                    }
                                    return [3 /*break*/, 4];
                                case 2:
                                    err_1 = _a.sent();
                                    logger$3.debug("Error while unsubscribing " + err_1);
                                    return [3 /*break*/, 4];
                                case 3:
                                    this._removeSubscriptionObserver(subscriptionId_1);
                                    return [7 /*endfinally*/];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); };
                }
            });
        };
        Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, "isSSLEnabled", {
            get: function () {
                return !this.options
                    .aws_appsync_dangerously_connect_to_http_endpoint_for_testing;
            },
            enumerable: true,
            configurable: true
        });
        AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {
            var options = _a.options, observer = _a.observer, subscriptionId = _a.subscriptionId;
            return __awaiter$3(this, void 0, void 0, function () {
                var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, _c, additionalHeaders, subscriptionState, data, dataString, headerObj, _d, _e, subscriptionMessage, stringToAWSRealTime, err_2, _f, message, subscriptionFailedCallback_1, _g, subscriptionFailedCallback, subscriptionReadyCallback;
                var _h;
                var _this = this;
                return __generator$3(this, function (_j) {
                    switch (_j.label) {
                        case 0:
                            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () { return ({}); } : _b, _c = options.additionalHeaders, additionalHeaders = _c === void 0 ? {} : _c;
                            subscriptionState = SUBSCRIPTION_STATUS.PENDING;
                            data = {
                                query: query,
                                variables: variables,
                            };
                            // Having a subscription id map will make it simple to forward messages received
                            this.subscriptionObserverMap.set(subscriptionId, {
                                observer: observer,
                                query: query,
                                variables: variables,
                                subscriptionState: subscriptionState,
                                startAckTimeoutId: null,
                            });
                            dataString = JSON.stringify(data);
                            _d = [{}];
                            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({
                                    apiKey: apiKey,
                                    appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,
                                    authenticationType: authenticationType,
                                    payload: dataString,
                                    canonicalUri: '',
                                    region: region,
                                })];
                        case 1:
                            _e = [__assign$2.apply(void 0, _d.concat([(_j.sent())]))];
                            return [4 /*yield*/, graphql_headers()];
                        case 2:
                            headerObj = __assign$2.apply(void 0, [__assign$2.apply(void 0, [__assign$2.apply(void 0, _e.concat([(_j.sent())])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER$1] = Constants.userAgent, _h)]);
                            subscriptionMessage = {
                                id: subscriptionId,
                                payload: {
                                    data: dataString,
                                    extensions: {
                                        authorization: __assign$2({}, headerObj),
                                    },
                                },
                                type: MESSAGE_TYPES.GQL_START,
                            };
                            stringToAWSRealTime = JSON.stringify(subscriptionMessage);
                            _j.label = 3;
                        case 3:
                            _j.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this._initializeWebSocketConnection({
                                    apiKey: apiKey,
                                    appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,
                                    authenticationType: authenticationType,
                                    region: region,
                                })];
                        case 4:
                            _j.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            err_2 = _j.sent();
                            logger$3.debug({ err: err_2 });
                            _f = err_2.message, message = _f === void 0 ? '' : _f;
                            observer.error({
                                errors: [
                                    __assign$2({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + ": " + message)),
                                ],
                            });
                            observer.complete();
                            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;
                            // Notify concurrent unsubscription
                            if (typeof subscriptionFailedCallback_1 === 'function') {
                                subscriptionFailedCallback_1();
                            }
                            return [2 /*return*/];
                        case 6:
                            _g = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;
                            // This must be done before sending the message in order to be listening immediately
                            this.subscriptionObserverMap.set(subscriptionId, {
                                observer: observer,
                                subscriptionState: subscriptionState,
                                variables: variables,
                                query: query,
                                subscriptionReadyCallback: subscriptionReadyCallback,
                                subscriptionFailedCallback: subscriptionFailedCallback,
                                startAckTimeoutId: setTimeout(function () {
                                    _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);
                                }, START_ACK_TIMEOUT),
                            });
                            if (this.awsRealTimeSocket) {
                                this.awsRealTimeSocket.send(stringToAWSRealTime);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Waiting that subscription has been connected before trying to unsubscribe
        AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {
            return __awaiter$3(this, void 0, void 0, function () {
                var subscriptionState;
                var _this = this;
                return __generator$3(this, function (_a) {
                    subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState;
                    // This in case unsubscribe is invoked before sending start subscription message
                    if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {
                        return [2 /*return*/, new Promise(function (res, rej) {
                                var _a = _this.subscriptionObserverMap.get(subscriptionId), observer = _a.observer, subscriptionState = _a.subscriptionState, variables = _a.variables, query = _a.query;
                                _this.subscriptionObserverMap.set(subscriptionId, {
                                    observer: observer,
                                    subscriptionState: subscriptionState,
                                    variables: variables,
                                    query: query,
                                    subscriptionReadyCallback: res,
                                    subscriptionFailedCallback: rej,
                                });
                            })];
                    }
                    return [2 /*return*/];
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {
            try {
                if (this.awsRealTimeSocket &&
                    this.awsRealTimeSocket.readyState === WebSocket.OPEN &&
                    this.socketStatus === SOCKET_STATUS.READY) {
                    // Preparing unsubscribe message to stop receiving messages for that subscription
                    var unsubscribeMessage = {
                        id: subscriptionId,
                        type: MESSAGE_TYPES.GQL_STOP,
                    };
                    var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);
                    this.awsRealTimeSocket.send(stringToAWSRealTime);
                }
            }
            catch (err) {
                // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do
                logger$3.debug({ err: err });
            }
        };
        AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {
            this.subscriptionObserverMap.delete(subscriptionId);
            // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount
            setTimeout(this._closeSocketIfRequired.bind(this), 1000);
        };
        AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {
            if (this.subscriptionObserverMap.size > 0) {
                // Active subscriptions on the WebSocket
                return;
            }
            if (!this.awsRealTimeSocket) {
                this.socketStatus = SOCKET_STATUS.CLOSED;
                return;
            }
            if (this.awsRealTimeSocket.bufferedAmount > 0) {
                // Still data on the WebSocket
                setTimeout(this._closeSocketIfRequired.bind(this), 1000);
            }
            else {
                logger$3.debug('closing WebSocket...');
                clearTimeout(this.keepAliveTimeoutId);
                var tempSocket = this.awsRealTimeSocket;
                // Cleaning callbacks to avoid race condition, socket still exists
                tempSocket.onclose = undefined;
                tempSocket.onerror = undefined;
                tempSocket.close(1000);
                this.awsRealTimeSocket = null;
                this.socketStatus = SOCKET_STATUS.CLOSED;
            }
        };
        AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {
            logger$3.debug("subscription message from AWS AppSync RealTime: " + message.data);
            var _a = JSON.parse(message.data), _b = _a.id, id = _b === void 0 ? '' : _b, payload = _a.payload, type = _a.type;
            var _c = this.subscriptionObserverMap.get(id) || {}, _d = _c.observer, observer = _d === void 0 ? null : _d, _e = _c.query, query = _e === void 0 ? '' : _e, _f = _c.variables, variables = _f === void 0 ? {} : _f, startAckTimeoutId = _c.startAckTimeoutId, subscriptionReadyCallback = _c.subscriptionReadyCallback, subscriptionFailedCallback = _c.subscriptionFailedCallback;
            logger$3.debug({ id: id, observer: observer, query: query, variables: variables });
            if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {
                if (observer) {
                    observer.next(payload);
                }
                else {
                    logger$3.debug("observer not found for id: " + id);
                }
                return;
            }
            if (type === MESSAGE_TYPES.GQL_START_ACK) {
                logger$3.debug("subscription ready for " + JSON.stringify({ query: query, variables: variables }));
                if (typeof subscriptionReadyCallback === 'function') {
                    subscriptionReadyCallback();
                }
                clearTimeout(startAckTimeoutId);
                dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, { query: query, variables: variables }, 'Connection established for subscription');
                var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;
                this.subscriptionObserverMap.set(id, {
                    observer: observer,
                    query: query,
                    variables: variables,
                    startAckTimeoutId: null,
                    subscriptionState: subscriptionState,
                    subscriptionReadyCallback: subscriptionReadyCallback,
                    subscriptionFailedCallback: subscriptionFailedCallback,
                });
                // TODO: emit event on hub but it requires to store the id first
                return;
            }
            if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {
                clearTimeout(this.keepAliveTimeoutId);
                this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);
                return;
            }
            if (type === MESSAGE_TYPES.GQL_ERROR) {
                var subscriptionState = SUBSCRIPTION_STATUS.FAILED;
                this.subscriptionObserverMap.set(id, {
                    observer: observer,
                    query: query,
                    variables: variables,
                    startAckTimeoutId: startAckTimeoutId,
                    subscriptionReadyCallback: subscriptionReadyCallback,
                    subscriptionFailedCallback: subscriptionFailedCallback,
                    subscriptionState: subscriptionState,
                });
                observer.error({
                    errors: [
                        __assign$2({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + ": " + JSON.stringify(payload))),
                    ],
                });
                clearTimeout(startAckTimeoutId);
                observer.complete();
                if (typeof subscriptionFailedCallback === 'function') {
                    subscriptionFailedCallback();
                }
            }
        };
        AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {
            logger$3.debug("Disconnect error: " + msg);
            this.subscriptionObserverMap.forEach(function (_a) {
                var observer = _a.observer;
                if (observer && !observer.closed) {
                    observer.error({
                        errors: [__assign$2({}, new GraphQLError(msg))],
                    });
                }
            });
            this.subscriptionObserverMap.clear();
            if (this.awsRealTimeSocket) {
                this.awsRealTimeSocket.close();
            }
            this.socketStatus = SOCKET_STATUS.CLOSED;
        };
        AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {
            var _a = this.subscriptionObserverMap.get(subscriptionId) || {}, observer = _a.observer, query = _a.query, variables = _a.variables;
            if (!observer) {
                return;
            }
            this.subscriptionObserverMap.set(subscriptionId, {
                observer: observer,
                query: query,
                variables: variables,
                subscriptionState: SUBSCRIPTION_STATUS.FAILED,
            });
            if (observer && !observer.closed) {
                observer.error({
                    errors: [
                        __assign$2({}, new GraphQLError("Subscription timeout " + JSON.stringify({ query: query, variables: variables }))),
                    ],
                });
                // Cleanup will be automatically executed
                observer.complete();
            }
            logger$3.debug('timeoutStartSubscription', JSON.stringify({ query: query, variables: variables }));
        };
        AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {
            var _this = this;
            var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, authenticationType = _a.authenticationType, apiKey = _a.apiKey, region = _a.region;
            if (this.socketStatus === SOCKET_STATUS.READY) {
                return;
            }
            return new Promise(function (res, rej) { return __awaiter$3(_this, void 0, void 0, function () {
                var protocol, discoverableEndpoint, payloadString, headerString, _a, _b, headerQs, payloadQs, awsRealTimeUrl, err_3;
                return __generator$3(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.promiseArray.push({ res: res, rej: rej });
                            if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 4, , 5]);
                            this.socketStatus = SOCKET_STATUS.CONNECTING;
                            protocol = this.isSSLEnabled ? 'wss://' : 'ws://';
                            discoverableEndpoint = appSyncGraphqlEndpoint
                                .replace('https://', protocol)
                                .replace('http://', protocol)
                                .replace('appsync-api', 'appsync-realtime-api')
                                .replace('gogi-beta', 'grt-beta');
                            payloadString = '{}';
                            _b = (_a = JSON).stringify;
                            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({
                                    authenticationType: authenticationType,
                                    payload: payloadString,
                                    canonicalUri: '/connect',
                                    apiKey: apiKey,
                                    appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,
                                    region: region,
                                })];
                        case 2:
                            headerString = _b.apply(_a, [_c.sent()]);
                            headerQs = buffer.Buffer.from(headerString).toString('base64');
                            payloadQs = buffer.Buffer.from(payloadString).toString('base64');
                            awsRealTimeUrl = discoverableEndpoint + "?header=" + headerQs + "&payload=" + payloadQs;
                            return [4 /*yield*/, this._initializeRetryableHandshake({ awsRealTimeUrl: awsRealTimeUrl })];
                        case 3:
                            _c.sent();
                            this.promiseArray.forEach(function (_a) {
                                var res = _a.res;
                                logger$3.debug('Notifying connection successful');
                                res();
                            });
                            this.socketStatus = SOCKET_STATUS.READY;
                            this.promiseArray = [];
                            return [3 /*break*/, 5];
                        case 4:
                            err_3 = _c.sent();
                            this.promiseArray.forEach(function (_a) {
                                var rej = _a.rej;
                                return rej(err_3);
                            });
                            this.promiseArray = [];
                            if (this.awsRealTimeSocket &&
                                this.awsRealTimeSocket.readyState === WebSocket.OPEN) {
                                this.awsRealTimeSocket.close(3001);
                            }
                            this.awsRealTimeSocket = null;
                            this.socketStatus = SOCKET_STATUS.CLOSED;
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {
            var awsRealTimeUrl = _a.awsRealTimeUrl;
            return __awaiter$3(this, void 0, void 0, function () {
                return __generator$3(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger$3.debug("Initializaling retryable Handshake");
                            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [{ awsRealTimeUrl: awsRealTimeUrl }], MAX_DELAY_MS)];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {
            var awsRealTimeUrl = _a.awsRealTimeUrl;
            return __awaiter$3(this, void 0, void 0, function () {
                var err_4, errorType, errorCode;
                var _this = this;
                return __generator$3(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger$3.debug("Initializing handshake " + awsRealTimeUrl);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, (function () {
                                    return new Promise(function (res, rej) {
                                        var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');
                                        newSocket.onerror = function () {
                                            logger$3.debug("WebSocket connection error");
                                        };
                                        newSocket.onclose = function () {
                                            rej(new Error('Connection handshake error'));
                                        };
                                        newSocket.onopen = function () {
                                            _this.awsRealTimeSocket = newSocket;
                                            return res();
                                        };
                                    });
                                })()];
                        case 2:
                            _b.sent();
                            // Step 2: wait for ack from AWS AppSyncReaTime after sending init
                            return [4 /*yield*/, (function () {
                                    return new Promise(function (res, rej) {
                                        var ackOk = false;
                                        _this.awsRealTimeSocket.onerror = function (error) {
                                            logger$3.debug("WebSocket error " + JSON.stringify(error));
                                        };
                                        _this.awsRealTimeSocket.onclose = function (event) {
                                            logger$3.debug("WebSocket closed " + event.reason);
                                            rej(new Error(JSON.stringify(event)));
                                        };
                                        _this.awsRealTimeSocket.onmessage = function (message) {
                                            logger$3.debug("subscription message from AWS AppSyncRealTime: " + message.data + " ");
                                            var data = JSON.parse(message.data);
                                            var type = data.type, _a = data.payload, _b = (_a === void 0 ? {} : _a).connectionTimeoutMs, connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;
                                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {
                                                ackOk = true;
                                                _this.keepAliveTimeout = connectionTimeoutMs;
                                                _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);
                                                _this.awsRealTimeSocket.onerror = function (err) {
                                                    logger$3.debug(err);
                                                    _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);
                                                };
                                                _this.awsRealTimeSocket.onclose = function (event) {
                                                    logger$3.debug("WebSocket closed " + event.reason);
                                                    _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);
                                                };
                                                res('Cool, connected to AWS AppSyncRealTime');
                                                return;
                                            }
                                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {
                                                var _c = data.payload, _d = (_c === void 0 ? {} : _c).errors, _e = __read$1(_d === void 0 ? [] : _d, 1), _f = _e[0], _g = _f === void 0 ? {} : _f, _h = _g.errorType, errorType = _h === void 0 ? '' : _h, _j = _g.errorCode, errorCode = _j === void 0 ? 0 : _j;
                                                rej({ errorType: errorType, errorCode: errorCode });
                                            }
                                        };
                                        var gqlInit = {
                                            type: MESSAGE_TYPES.GQL_CONNECTION_INIT,
                                        };
                                        _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));
                                        function checkAckOk() {
                                            if (!ackOk) {
                                                rej(new Error("Connection timeout: ack from AWSRealTime was not received on " + CONNECTION_INIT_TIMEOUT + " ms"));
                                            }
                                        }
                                        setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);
                                    });
                                })()];
                        case 3:
                            // Step 2: wait for ack from AWS AppSyncReaTime after sending init
                            _b.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            err_4 = _b.sent();
                            errorType = err_4.errorType, errorCode = err_4.errorCode;
                            if (NON_RETRYABLE_CODES.includes(errorCode)) {
                                throw new NonRetryableError(errorType);
                            }
                            else if (errorType) {
                                throw new Error(errorType);
                            }
                            else {
                                throw err_4;
                            }
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {
            var authenticationType = _a.authenticationType, payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, apiKey = _a.apiKey, region = _a.region;
            return __awaiter$3(this, void 0, void 0, function () {
                var headerHandler, handler, host, result;
                return __generator$3(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            headerHandler = {
                                API_KEY: this._awsRealTimeApiKeyHeader.bind(this),
                                AWS_IAM: this._awsRealTimeIAMHeader.bind(this),
                                OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),
                                AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),
                            };
                            handler = headerHandler[authenticationType];
                            if (typeof handler !== 'function') {
                                logger$3.debug("Authentication type " + authenticationType + " not supported");
                                return [2 /*return*/, ''];
                            }
                            host = url__namespace.parse(appSyncGraphqlEndpoint).host;
                            return [4 /*yield*/, handler({
                                    payload: payload,
                                    canonicalUri: canonicalUri,
                                    appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,
                                    apiKey: apiKey,
                                    region: region,
                                    host: host,
                                })];
                        case 1:
                            result = _b.sent();
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {
            var host = _a.host;
            return __awaiter$3(this, void 0, void 0, function () {
                var session;
                return __generator$3(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Auth.currentSession()];
                        case 1:
                            session = _b.sent();
                            return [2 /*return*/, {
                                    Authorization: session.getAccessToken().getJwtToken(),
                                    host: host,
                                }];
                    }
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {
            var host = _a.host;
            return __awaiter$3(this, void 0, void 0, function () {
                var token, federatedInfo, currentUser;
                return __generator$3(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, BrowserStorageCache.getItem('federatedInfo')];
                        case 1:
                            federatedInfo = _b.sent();
                            if (!federatedInfo) return [3 /*break*/, 2];
                            token = federatedInfo.token;
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                        case 3:
                            currentUser = _b.sent();
                            if (currentUser) {
                                token = currentUser.token;
                            }
                            _b.label = 4;
                        case 4:
                            if (!token) {
                                throw new Error('No federated jwt');
                            }
                            return [2 /*return*/, {
                                    Authorization: token,
                                    host: host,
                                }];
                    }
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {
            var apiKey = _a.apiKey, host = _a.host;
            return __awaiter$3(this, void 0, void 0, function () {
                var dt, dtStr;
                return __generator$3(this, function (_b) {
                    dt = new Date();
                    dtStr = dt.toISOString().replace(/[:\-]|\.\d{3}/g, '');
                    return [2 /*return*/, {
                            host: host,
                            'x-amz-date': dtStr,
                            'x-api-key': apiKey,
                        }];
                });
            });
        };
        AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {
            var payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, region = _a.region;
            return __awaiter$3(this, void 0, void 0, function () {
                var endpointInfo, credentialsOK, creds, request, signed_params;
                return __generator$3(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            endpointInfo = {
                                region: region,
                                service: 'appsync',
                            };
                            return [4 /*yield*/, this._ensureCredentials()];
                        case 1:
                            credentialsOK = _b.sent();
                            if (!credentialsOK) {
                                throw new Error('No credentials');
                            }
                            return [4 /*yield*/, Credentials.get().then(function (credentials) { return ({
                                    secret_key: credentials.secretAccessKey,
                                    access_key: credentials.accessKeyId,
                                    session_token: credentials.sessionToken,
                                }); })];
                        case 2:
                            creds = _b.sent();
                            request = {
                                url: "" + appSyncGraphqlEndpoint + canonicalUri,
                                data: payload,
                                method: 'POST',
                                headers: __assign$2({}, AWS_APPSYNC_REALTIME_HEADERS),
                            };
                            signed_params = Signer.sign(request, creds, endpointInfo);
                            return [2 /*return*/, signed_params.headers];
                    }
                });
            });
        };
        /**
         * @private
         */
        AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {
            return Credentials.get()
                .then(function (credentials) {
                if (!credentials)
                    return false;
                var cred = Credentials.shear(credentials);
                logger$3.debug('set credentials for AWSAppSyncRealTimeProvider', cred);
                return true;
            })
                .catch(function (err) {
                logger$3.warn('ensure credentials error', err);
                return false;
            });
        };
        return AWSAppSyncRealTimeProvider;
    }(AbstractPubSubProvider));

    var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$2 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var isNode = browserOrNode().isNode;
    var logger$2 = new ConsoleLogger('PubSub');
    var PubSubClass = /** @class */ (function () {
        /**
         * Initialize PubSub with AWS configurations
         *
         * @param {PubSubOptions} options - Configuration object for PubSub
         */
        function PubSubClass(options) {
            this._options = options;
            logger$2.debug('PubSub Options', this._options);
            this._pluggables = [];
            this.subscribe = this.subscribe.bind(this);
        }
        Object.defineProperty(PubSubClass.prototype, "awsAppSyncProvider", {
            /**
             * Lazy instantiate AWSAppSyncProvider when it is required by the API category
             */
            get: function () {
                if (!this._awsAppSyncProvider) {
                    this._awsAppSyncProvider = new AWSAppSyncProvider(this._options);
                }
                return this._awsAppSyncProvider;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PubSubClass.prototype, "awsAppSyncRealTimeProvider", {
            /**
             * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category
             */
            get: function () {
                if (!this._awsAppSyncRealTimeProvider) {
                    this._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(this._options);
                }
                return this._awsAppSyncRealTimeProvider;
            },
            enumerable: true,
            configurable: true
        });
        PubSubClass.prototype.getModuleName = function () {
            return 'PubSub';
        };
        /**
         * Configure PubSub part with configurations
         *
         * @param {PubSubOptions} config - Configuration for PubSub
         * @return {Object} - The current configuration
         */
        PubSubClass.prototype.configure = function (options) {
            var _this = this;
            var opt = options ? options.PubSub || options : {};
            logger$2.debug('configure PubSub', { opt: opt });
            this._options = Object.assign({}, this._options, opt);
            this._pluggables.map(function (pluggable) { return pluggable.configure(_this._options); });
            return this._options;
        };
        /**
         * add plugin into Analytics category
         * @param {Object} pluggable - an instance of the plugin
         */
        PubSubClass.prototype.addPluggable = function (pluggable) {
            return __awaiter$2(this, void 0, void 0, function () {
                var config;
                return __generator$2(this, function (_a) {
                    if (pluggable && pluggable.getCategory() === 'PubSub') {
                        this._pluggables.push(pluggable);
                        config = pluggable.configure(this._options);
                        return [2 /*return*/, config];
                    }
                    return [2 /*return*/];
                });
            });
        };
        PubSubClass.prototype.getProviderByName = function (providerName) {
            if (providerName === INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER) {
                return this.awsAppSyncProvider;
            }
            if (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {
                return this.awsAppSyncRealTimeProvider;
            }
            return this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === providerName; });
        };
        PubSubClass.prototype.getProviders = function (options) {
            if (options === void 0) { options = {}; }
            var providerName = options.provider;
            if (!providerName) {
                return this._pluggables;
            }
            var provider = this.getProviderByName(providerName);
            if (!provider) {
                throw new Error("Could not find provider named " + providerName);
            }
            return [provider];
        };
        PubSubClass.prototype.publish = function (topics, msg, options) {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$2(this, function (_a) {
                    return [2 /*return*/, Promise.all(this.getProviders(options).map(function (provider) {
                            return provider.publish(topics, msg, options);
                        }))];
                });
            });
        };
        PubSubClass.prototype.subscribe = function (topics, options) {
            if (isNode && this._options && this._options.ssr) {
                throw new Error('Subscriptions are not supported for Server-Side Rendering (SSR)');
            }
            logger$2.debug('subscribe options', options);
            var providers = this.getProviders(options);
            return new Observable(function (observer) {
                var observables = providers.map(function (provider) { return ({
                    provider: provider,
                    observable: provider.subscribe(topics, options),
                }); });
                var subscriptions = observables.map(function (_a) {
                    var provider = _a.provider, observable = _a.observable;
                    return observable.subscribe({
                        start: console.error,
                        next: function (value) { return observer.next({ provider: provider, value: value }); },
                        error: function (error) { return observer.error({ provider: provider, error: error }); },
                    });
                });
                return function () {
                    return subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
                };
            });
        };
        return PubSubClass;
    }());
    var PubSub = new PubSubClass(null);
    Amplify.register(PubSub);

    /*
     * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    var CONTROL_MSG;
    (function (CONTROL_MSG) {
        CONTROL_MSG["CONNECTION_CLOSED"] = "Connection closed";
        CONTROL_MSG["CONNECTION_FAILED"] = "Connection failed";
        CONTROL_MSG["REALTIME_SUBSCRIPTION_INIT_ERROR"] = "AppSync Realtime subscription init error";
        CONTROL_MSG["SUBSCRIPTION_ACK"] = "Subscription ack";
        CONTROL_MSG["TIMEOUT_DISCONNECT"] = "Timeout disconnect";
    })(CONTROL_MSG || (CONTROL_MSG = {}));

    var GRAPHQL_AUTH_MODE;
    (function (GRAPHQL_AUTH_MODE) {
        GRAPHQL_AUTH_MODE["API_KEY"] = "API_KEY";
        GRAPHQL_AUTH_MODE["AWS_IAM"] = "AWS_IAM";
        GRAPHQL_AUTH_MODE["OPENID_CONNECT"] = "OPENID_CONNECT";
        GRAPHQL_AUTH_MODE["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
    })(GRAPHQL_AUTH_MODE || (GRAPHQL_AUTH_MODE = {}));
    var GraphQLAuthError;
    (function (GraphQLAuthError) {
        GraphQLAuthError["NO_API_KEY"] = "No api-key configured";
        GraphQLAuthError["NO_CURRENT_USER"] = "No current user";
        GraphQLAuthError["NO_CREDENTIALS"] = "No credentials";
        GraphQLAuthError["NO_FEDERATED_JWT"] = "No federated jwt";
    })(GraphQLAuthError || (GraphQLAuthError = {}));

    var __assign$1 = (undefined && undefined.__assign) || function () {
        __assign$1 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };
    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$1 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __rest = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var __read = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var USER_AGENT_HEADER = 'x-amz-user-agent';
    var logger$1 = new ConsoleLogger('GraphQLAPI');
    var graphqlOperation = function (query, variables) {
        if (variables === void 0) { variables = {}; }
        return ({
            query: query,
            variables: variables,
        });
    };
    /**
     * Export Cloud Logic APIs
     */
    var GraphQLAPIClass = /** @class */ (function () {
        /**
         * Initialize GraphQL API with AWS configuration
         * @param {Object} options - Configuration object for API
         */
        function GraphQLAPIClass(options) {
            this._api = null;
            this.Auth = Auth;
            this.Cache = BrowserStorageCache;
            this.Credentials = Credentials;
            this._options = options;
            logger$1.debug('API Options', this._options);
        }
        GraphQLAPIClass.prototype.getModuleName = function () {
            return 'GraphQLAPI';
        };
        /**
         * Configure API
         * @param {Object} config - Configuration of the API
         * @return {Object} - The current configuration
         */
        GraphQLAPIClass.prototype.configure = function (options) {
            var _a = options || {}, _b = _a.API, API = _b === void 0 ? {} : _b, otherOptions = __rest(_a, ["API"]);
            var opt = __assign$1(__assign$1({}, otherOptions), API);
            logger$1.debug('configure GraphQL API', { opt: opt });
            if (opt['aws_project_region']) {
                opt = Object.assign({}, opt, {
                    region: opt['aws_project_region'],
                    header: {},
                });
            }
            if (typeof opt.graphql_headers !== 'undefined' &&
                typeof opt.graphql_headers !== 'function') {
                logger$1.warn('graphql_headers should be a function');
                opt.graphql_headers = undefined;
            }
            this._options = Object.assign({}, this._options, opt);
            this.createInstance();
            return this._options;
        };
        /**
         * Create an instance of API for the library
         * @return - A promise of true if Success
         */
        GraphQLAPIClass.prototype.createInstance = function () {
            logger$1.debug('create Rest instance');
            if (this._options) {
                this._api = new RestClient(this._options);
                // Share instance Credentials with client for SSR
                this._api.Credentials = this.Credentials;
                return true;
            }
            else {
                return Promise.reject('API not configured');
            }
        };
        GraphQLAPIClass.prototype._headerBasedAuth = function (defaultAuthenticationType) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, aws_appsync_authenticationType, apiKey, authenticationType, headers, _b, credentialsOK, token, federatedInfo, currentUser, session;
                return __generator$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = this._options, aws_appsync_authenticationType = _a.aws_appsync_authenticationType, apiKey = _a.aws_appsync_apiKey;
                            authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';
                            headers = {};
                            _b = authenticationType;
                            switch (_b) {
                                case 'API_KEY': return [3 /*break*/, 1];
                                case 'AWS_IAM': return [3 /*break*/, 2];
                                case 'OPENID_CONNECT': return [3 /*break*/, 4];
                                case 'AMAZON_COGNITO_USER_POOLS': return [3 /*break*/, 11];
                            }
                            return [3 /*break*/, 15];
                        case 1:
                            if (!apiKey) {
                                throw new Error(GraphQLAuthError.NO_API_KEY);
                            }
                            headers = {
                                Authorization: null,
                                'X-Api-Key': apiKey,
                            };
                            return [3 /*break*/, 16];
                        case 2: return [4 /*yield*/, this._ensureCredentials()];
                        case 3:
                            credentialsOK = _c.sent();
                            if (!credentialsOK) {
                                throw new Error(GraphQLAuthError.NO_CREDENTIALS);
                            }
                            return [3 /*break*/, 16];
                        case 4:
                            _c.trys.push([4, 9, , 10]);
                            token = void 0;
                            return [4 /*yield*/, BrowserStorageCache.getItem('federatedInfo')];
                        case 5:
                            federatedInfo = _c.sent();
                            if (!federatedInfo) return [3 /*break*/, 6];
                            token = federatedInfo.token;
                            return [3 /*break*/, 8];
                        case 6: return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                        case 7:
                            currentUser = _c.sent();
                            if (currentUser) {
                                token = currentUser.token;
                            }
                            _c.label = 8;
                        case 8:
                            if (!token) {
                                throw new Error(GraphQLAuthError.NO_FEDERATED_JWT);
                            }
                            headers = {
                                Authorization: token,
                            };
                            return [3 /*break*/, 10];
                        case 9:
                            _c.sent();
                            throw new Error(GraphQLAuthError.NO_CURRENT_USER);
                        case 10: return [3 /*break*/, 16];
                        case 11:
                            _c.trys.push([11, 13, , 14]);
                            return [4 /*yield*/, this.Auth.currentSession()];
                        case 12:
                            session = _c.sent();
                            headers = {
                                Authorization: session.getAccessToken().getJwtToken(),
                            };
                            return [3 /*break*/, 14];
                        case 13:
                            _c.sent();
                            throw new Error(GraphQLAuthError.NO_CURRENT_USER);
                        case 14: return [3 /*break*/, 16];
                        case 15:
                            headers = {
                                Authorization: null,
                            };
                            return [3 /*break*/, 16];
                        case 16: return [2 /*return*/, headers];
                    }
                });
            });
        };
        /**
         * to get the operation type
         * @param operation
         */
        GraphQLAPIClass.prototype.getGraphqlOperationType = function (operation) {
            var doc = parse(operation);
            var _a = __read(doc.definitions, 1), operationType = _a[0].operation;
            return operationType;
        };
        /**
         * Executes a GraphQL operation
         *
         * @param {GraphQLOptions} GraphQL Options
         * @param {object} additionalHeaders headers to merge in after any `graphql_headers` set in the config
         * @returns {Promise<GraphQLResult> | Observable<object>}
         */
        GraphQLAPIClass.prototype.graphql = function (_a, additionalHeaders) {
            var paramQuery = _a.query, _b = _a.variables, variables = _b === void 0 ? {} : _b, authMode = _a.authMode;
            var query = typeof paramQuery === 'string'
                ? parse(paramQuery)
                : parse(print(paramQuery));
            var _c = __read(query.definitions.filter(function (def) { return def.kind === 'OperationDefinition'; }), 1), _d = _c[0], operationDef = _d === void 0 ? {} : _d;
            var operationType = operationDef.operation;
            switch (operationType) {
                case 'query':
                case 'mutation':
                    var cancellableToken = this._api.getCancellableToken();
                    var initParams = { cancellableToken: cancellableToken };
                    var responsePromise = this._graphql({ query: query, variables: variables, authMode: authMode }, additionalHeaders, initParams);
                    this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
                    return responsePromise;
                case 'subscription':
                    return this._graphqlSubscribe({ query: query, variables: variables, authMode: authMode }, additionalHeaders);
            }
            throw new Error("invalid operation type: " + operationType);
        };
        GraphQLAPIClass.prototype._graphql = function (_a, additionalHeaders, initParams) {
            var query = _a.query, variables = _a.variables, authMode = _a.authMode;
            if (additionalHeaders === void 0) { additionalHeaders = {}; }
            if (initParams === void 0) { initParams = {}; }
            return __awaiter$1(this, void 0, void 0, function () {
                var _b, region, appSyncGraphqlEndpoint, _c, graphql_headers, customGraphqlEndpoint, customEndpointRegion, headers, _d, _e, _f, _g, _h, _j, body, init, endpoint, error, response, err_1, errors;
                var _k;
                return __generator$1(this, function (_l) {
                    switch (_l.label) {
                        case 0:
                            if (!!this._api) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.createInstance()];
                        case 1:
                            _l.sent();
                            _l.label = 2;
                        case 2:
                            _b = this._options, region = _b.aws_appsync_region, appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint, _c = _b.graphql_headers, graphql_headers = _c === void 0 ? function () { return ({}); } : _c, customGraphqlEndpoint = _b.graphql_endpoint, customEndpointRegion = _b.graphql_endpoint_iam_region;
                            _d = [{}];
                            _e = !customGraphqlEndpoint;
                            if (!_e) return [3 /*break*/, 4];
                            return [4 /*yield*/, this._headerBasedAuth(authMode)];
                        case 3:
                            _e = (_l.sent());
                            _l.label = 4;
                        case 4:
                            _f = [__assign$1.apply(void 0, _d.concat([(_e)]))];
                            _g = customGraphqlEndpoint;
                            if (!_g) return [3 /*break*/, 8];
                            if (!customEndpointRegion) return [3 /*break*/, 6];
                            return [4 /*yield*/, this._headerBasedAuth(authMode)];
                        case 5:
                            _h = _l.sent();
                            return [3 /*break*/, 7];
                        case 6:
                            _h = { Authorization: null };
                            _l.label = 7;
                        case 7:
                            _g = (_h);
                            _l.label = 8;
                        case 8:
                            _j = [__assign$1.apply(void 0, _f.concat([(_g)]))];
                            return [4 /*yield*/, graphql_headers({ query: query, variables: variables })];
                        case 9:
                            headers = __assign$1.apply(void 0, [__assign$1.apply(void 0, [__assign$1.apply(void 0, _j.concat([(_l.sent())])), additionalHeaders]), (!customGraphqlEndpoint && (_k = {},
                                    _k[USER_AGENT_HEADER] = Constants.userAgent,
                                    _k))]);
                            body = {
                                query: print(query),
                                variables: variables,
                            };
                            init = Object.assign({
                                headers: headers,
                                body: body,
                                signerServiceInfo: {
                                    service: !customGraphqlEndpoint ? 'appsync' : 'execute-api',
                                    region: !customGraphqlEndpoint ? region : customEndpointRegion,
                                },
                            }, initParams);
                            endpoint = customGraphqlEndpoint || appSyncGraphqlEndpoint;
                            if (!endpoint) {
                                error = new GraphQLError('No graphql endpoint provided.');
                                throw {
                                    data: {},
                                    errors: [error],
                                };
                            }
                            _l.label = 10;
                        case 10:
                            _l.trys.push([10, 12, , 13]);
                            return [4 /*yield*/, this._api.post(endpoint, init)];
                        case 11:
                            response = _l.sent();
                            return [3 /*break*/, 13];
                        case 12:
                            err_1 = _l.sent();
                            // If the exception is because user intentionally
                            // cancelled the request, do not modify the exception
                            // so that clients can identify the exception correctly.
                            if (this._api.isCancel(err_1)) {
                                throw err_1;
                            }
                            response = {
                                data: {},
                                errors: [new GraphQLError(err_1.message, null, null, null, null, err_1)],
                            };
                            return [3 /*break*/, 13];
                        case 13:
                            errors = response.errors;
                            if (errors && errors.length) {
                                throw response;
                            }
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        /**
         * Checks to see if an error thrown is from an api request cancellation
         * @param {any} error - Any error
         * @return {boolean} - A boolean indicating if the error was from an api request cancellation
         */
        GraphQLAPIClass.prototype.isCancel = function (error) {
            return this._api.isCancel(error);
        };
        /**
         * Cancels an inflight request. Only applicable for graphql queries and mutations
         * @param {any} request - request to cancel
         * @return {boolean} - A boolean indicating if the request was cancelled
         */
        GraphQLAPIClass.prototype.cancel = function (request, message) {
            return this._api.cancel(request, message);
        };
        GraphQLAPIClass.prototype._graphqlSubscribe = function (_a, additionalHeaders) {
            var query = _a.query, variables = _a.variables, defaultAuthenticationType = _a.authMode;
            if (additionalHeaders === void 0) { additionalHeaders = {}; }
            var _b = this._options, region = _b.aws_appsync_region, appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint, aws_appsync_authenticationType = _b.aws_appsync_authenticationType, apiKey = _b.aws_appsync_apiKey, _c = _b.graphql_headers, graphql_headers = _c === void 0 ? function () { return ({}); } : _c;
            var authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';
            if (PubSub && typeof PubSub.subscribe === 'function') {
                return PubSub.subscribe('', {
                    provider: INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,
                    appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,
                    authenticationType: authenticationType,
                    apiKey: apiKey,
                    query: print(query),
                    region: region,
                    variables: variables,
                    graphql_headers: graphql_headers,
                    additionalHeaders: additionalHeaders,
                });
            }
            else {
                logger$1.debug('No pubsub module applied for subscription');
                throw new Error('No pubsub module applied for subscription');
            }
        };
        /**
         * @private
         */
        GraphQLAPIClass.prototype._ensureCredentials = function () {
            var _this = this;
            return this.Credentials.get()
                .then(function (credentials) {
                if (!credentials)
                    return false;
                var cred = _this.Credentials.shear(credentials);
                logger$1.debug('set credentials for api', cred);
                return true;
            })
                .catch(function (err) {
                logger$1.warn('ensure credentials error', err);
                return false;
            });
        };
        return GraphQLAPIClass;
    }());
    var GraphQLAPI = new GraphQLAPIClass(null);
    Amplify.register(GraphQLAPI);

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var logger = new ConsoleLogger('API');
    /**
     * @deprecated
     * Use RestApi or GraphQLAPI to reduce your application bundle size
     * Export Cloud Logic APIs
     */
    var APIClass = /** @class */ (function () {
        /**
         * Initialize API with AWS configuration
         * @param {Object} options - Configuration object for API
         */
        function APIClass(options) {
            this.Auth = Auth;
            this.Cache = BrowserStorageCache;
            this.Credentials = Credentials;
            this._options = options;
            this._restApi = new RestAPIClass(options);
            this._graphqlApi = new GraphQLAPIClass(options);
            logger.debug('API Options', this._options);
        }
        APIClass.prototype.getModuleName = function () {
            return 'API';
        };
        /**
         * Configure API part with aws configurations
         * @param {Object} config - Configuration of the API
         * @return {Object} - The current configuration
         */
        APIClass.prototype.configure = function (options) {
            this._options = Object.assign({}, this._options, options);
            // Share Amplify instance with client for SSR
            this._restApi.Credentials = this.Credentials;
            this._graphqlApi.Auth = this.Auth;
            this._graphqlApi.Cache = this.Cache;
            this._graphqlApi.Credentials = this.Credentials;
            var restAPIConfig = this._restApi.configure(this._options);
            var graphQLAPIConfig = this._graphqlApi.configure(this._options);
            return __assign(__assign({}, restAPIConfig), graphQLAPIConfig);
        };
        /**
         * Make a GET request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        APIClass.prototype.get = function (apiName, path, init) {
            return this._restApi.get(apiName, path, init);
        };
        /**
         * Make a POST request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        APIClass.prototype.post = function (apiName, path, init) {
            return this._restApi.post(apiName, path, init);
        };
        /**
         * Make a PUT request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        APIClass.prototype.put = function (apiName, path, init) {
            return this._restApi.put(apiName, path, init);
        };
        /**
         * Make a PATCH request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        APIClass.prototype.patch = function (apiName, path, init) {
            return this._restApi.patch(apiName, path, init);
        };
        /**
         * Make a DEL request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        APIClass.prototype.del = function (apiName, path, init) {
            return this._restApi.del(apiName, path, init);
        };
        /**
         * Make a HEAD request
         * @param {string} apiName - The api name of the request
         * @param {string} path - The path of the request
         * @param {json} [init] - Request extra params
         * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.
         */
        APIClass.prototype.head = function (apiName, path, init) {
            return this._restApi.head(apiName, path, init);
        };
        /**
         * Checks to see if an error thrown is from an api request cancellation
         * @param {any} error - Any error
         * @return {boolean} - A boolean indicating if the error was from an api request cancellation
         */
        APIClass.prototype.isCancel = function (error) {
            return this._restApi.isCancel(error);
        };
        /**
         * Cancels an inflight request
         * @param {any} request - request to cancel
         * @return {boolean} - A boolean indicating if the request was cancelled
         */
        APIClass.prototype.cancel = function (request, message) {
            return this._restApi.cancel(request, message);
        };
        /**
         * Getting endpoint for API
         * @param {string} apiName - The name of the api
         * @return {string} - The endpoint of the api
         */
        APIClass.prototype.endpoint = function (apiName) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._restApi.endpoint(apiName)];
                });
            });
        };
        /**
         * to get the operation type
         * @param operation
         */
        APIClass.prototype.getGraphqlOperationType = function (operation) {
            return this._graphqlApi.getGraphqlOperationType(operation);
        };
        /**
         * Executes a GraphQL operation
         *
         * @param {GraphQLOptions} GraphQL Options
         * @param {object} additionalHeaders headers to merge in after any `graphql_headers` set in the config
         * @returns {Promise<GraphQLResult> | Observable<object>}
         */
        APIClass.prototype.graphql = function (options, additionalHeaders) {
            return this._graphqlApi.graphql(options, additionalHeaders);
        };
        return APIClass;
    }());
    var API = new APIClass(null);
    Amplify.register(API);

    createCommonjsModule(function (module, exports) {
    !function(t,_){module.exports=_();}(commonjsGlobal,(function(){return function(t){var _={};function n(o){if(_[o])return _[o].exports;var e=_[o]={i:o,l:!1,exports:{}};return t[o].call(e.exports,e,e.exports,n),e.l=!0,e.exports}return n.m=t,n.c=_,n.d=function(t,_,o){n.o(t,_)||Object.defineProperty(t,_,{enumerable:!0,get:o});},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},n.t=function(t,_){if(1&_&&(t=n(t)),8&_)return t;if(4&_&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&_&&"string"!=typeof t)for(var e in t)n.d(o,e,function(_){return t[_]}.bind(null,e));return o},n.n=function(t){var _=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(_,"a",_),_},n.o=function(t,_){return Object.prototype.hasOwnProperty.call(t,_)},n.p="",n(n.s=0)}([function(t,_,n){function o(t){for(var n in t)_.hasOwnProperty(n)||(_[n]=t[n]);}Object.defineProperty(_,"__esModule",{value:!0}),o(n(1)),o(n(2)),o(n(3)),o(n(4)),o(n(5)),o(n(6)),o(n(7)),o(n(8)),o(n(9)),o(n(10)),o(n(11)),o(n(12)),o(n(13));},function(t,_,n){t.exports={a:"Anchor__a___1_Iz8"};},function(t,_,n){t.exports={button:"Button__button___vS7Mv",signInButton:"Button__signInButton___3bUH-",googleSignInButton:"Button__googleSignInButton___1YiCu",signInButtonIcon:"Button__signInButtonIcon___ihN75",auth0SignInButton:"Button__auth0SignInButton___znnCj",facebookSignInButton:"Button__facebookSignInButton___34Txh",amazonSignInButton:"Button__amazonSignInButton___2EMtl",oAuthSignInButton:"Button__oAuthSignInButton___3UGOl",signInButtonContent:"Button__signInButtonContent___xqTXJ"};},function(t,_,n){t.exports={formContainer:"Form__formContainer___1GA3x",formSection:"Form__formSection___1PPvW",formField:"Form__formField___38Ikl",formRow:"Form__formRow___2mwRs"};},function(t,_,n){t.exports={hint:"Hint__hint___2XngB"};},function(t,_,n){t.exports={input:"Input__input___3e_bf",inputLabel:"Input__inputLabel___3VF0S",label:"Input__label___23sO8",radio:"Input__radio___2hllK"};},function(t,_,n){t.exports={navBar:"Nav__navBar___xtCFA",navRight:"Nav__navRight___1QG2J",nav:"Nav__nav___2Dx2Y",navItem:"Nav__navItem___1LtFQ"};},function(t,_,n){t.exports={photoPickerButton:"PhotoPicker__photoPickerButton___2XdVn",photoPlaceholder:"PhotoPicker__photoPlaceholder___2JXO4",photoPlaceholderIcon:"PhotoPicker__photoPlaceholderIcon___3Et71"};},function(t,_,n){t.exports={container:"Section__container___3YYTG",actionRow:"Section__actionRow___2LWSU",sectionHeader:"Section__sectionHeader___2djyg",sectionHeaderHint:"Section__sectionHeaderHint___3Wxdc",sectionBody:"Section__sectionBody___ihqqd",sectionHeaderContent:"Section__sectionHeaderContent___1UCqa",sectionFooter:"Section__sectionFooter___1T54C",sectionFooterPrimaryContent:"Section__sectionFooterPrimaryContent___2r9ZX",sectionFooterSecondaryContent:"Section__sectionFooterSecondaryContent___Nj41Q"};},function(t,_,n){t.exports={selectInput:"SelectInput__selectInput___3efO4"};},function(t,_,n){t.exports={strike:"Strike__strike___1XV1b",strikeContent:"Strike__strikeContent___10gLb"};},function(t,_,n){t.exports={toast:"Toast__toast___XXr3v",toastClose:"Toast__toastClose___18lU4"};},function(t,_,n){t.exports={totpQrcode:"Totp__totpQrcode___1crLx"};},function(t,_,n){t.exports={sumerianSceneContainer:"XR__sumerianSceneContainer___3nVMt",sumerianScene:"XR__sumerianScene___2Tt7-",loadingOverlay:"XR__loadingOverlay___IbqcI",loadingContainer:"XR__loadingContainer___2Itxb",loadingLogo:"XR__loadingLogo___Ub7xQ",loadingSceneName:"XR__loadingSceneName___3__ne",loadingBar:"XR__loadingBar___2vcke",loadingBarFill:"XR__loadingBarFill___3M-D9",sceneErrorText:"XR__sceneErrorText___2y0tp",sceneBar:"XR__sceneBar___2ShrP",sceneName:"XR__sceneName___1ApHr",sceneActions:"XR__sceneActions___7plGs",actionButton:"XR__actionButton___2poIM",tooltip:"XR__tooltip___UYyhn",actionIcon:"XR__actionIcon___2qnd2",autoShowTooltip:"XR__autoShowTooltip___V1QH7"};}])}));
    //# sourceMappingURL=aws-amplify-ui.js.map
    });

    /*
     * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
     * the License. A copy of the License is located at
     *
     *     http://aws.amazon.com/apache2.0/
     *
     * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
     * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
     * and limitations under the License.
     */
    /** Always importing Auth when users import Amplify such that
        for unauthenticated access (no sign in and sign up),
        users don't have to import Auth explicitly **/
    Amplify.Auth = Auth;
    Amplify.Cache = BrowserStorageCache;
    Amplify.ServiceWorker = ServiceWorkerClass;

    const awsconfig = {
      // ...
      'aws_appsync_graphqlEndpoint': 'https://7syx72f7wjcqvpwnyzt67esjsi.appsync-api.eu-central-1.amazonaws.com/graphql',
      'aws_appsync_region': 'eu-central-1',
      'aws_appsync_authenticationType': 'OPENID_CONNECT', // Before calling API.graphql(...) is required to do Auth.federatedSignIn(...) check authentication guide for details.
      // ...
    };

    /* eslint-disable */
    const listTasks = /* GraphQL */ `
  query ListTasks(
    $filter: ModelTaskFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listTasks(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        _deleted
        _lastChangedAt
        _version
        completed
        createdAt
        id
        name
        updatedAt
      }
      nextToken
      startedAt
    }
  }
`;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var e=function(t,n){return (e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);})(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t;}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r);}var n=function(){return (n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function r(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]]);}return n}function o(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e));}catch(e){i(e);}}function c(e){try{s(r.throw(e));}catch(e){i(e);}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t);}))).then(a,c);}s((r=r.apply(e,t||[])).next());}))}function i(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a);}catch(e){i=[6,e],r=0;}finally{n=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}var a="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function c(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function s(e,t){return e(t={exports:{}},t.exports),t.exports}var u=function(e){return e&&e.Math==Math&&e},l=u("object"==typeof globalThis&&globalThis)||u("object"==typeof window&&window)||u("object"==typeof self&&self)||u("object"==typeof a&&a)||function(){return this}()||Function("return this")(),f=function(e){try{return !!e()}catch(e){return !0}},d=!f((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),p={}.propertyIsEnumerable,h=Object.getOwnPropertyDescriptor,y={f:h&&!p.call({1:2},1)?function(e){var t=h(this,e);return !!t&&t.enumerable}:p},v=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},m={}.toString,g=function(e){return m.call(e).slice(8,-1)},b="".split,w=f((function(){return !Object("z").propertyIsEnumerable(0)}))?function(e){return "String"==g(e)?b.call(e,""):Object(e)}:Object,S=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e},_=function(e){return w(S(e))},k=function(e){return "object"==typeof e?null!==e:"function"==typeof e},I=function(e,t){if(!k(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!k(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!k(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!k(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")},T=function(e){return Object(S(e))},O={}.hasOwnProperty,E=function(e,t){return O.call(T(e),t)},x=l.document,R=k(x)&&k(x.createElement),L=function(e){return R?x.createElement(e):{}},C=!d&&!f((function(){return 7!=Object.defineProperty(L("div"),"a",{get:function(){return 7}}).a})),j=Object.getOwnPropertyDescriptor,U={f:d?j:function(e,t){if(e=_(e),t=I(t,!0),C)try{return j(e,t)}catch(e){}if(E(e,t))return v(!y.f.call(e,t),e[t])}},A=function(e){if(!k(e))throw TypeError(String(e)+" is not an object");return e},P=Object.defineProperty,F={f:d?P:function(e,t,n){if(A(e),t=I(t,!0),A(n),C)try{return P(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return "value"in n&&(e[t]=n.value),e}},K=d?function(e,t,n){return F.f(e,t,v(1,n))}:function(e,t,n){return e[t]=n,e},W=function(e,t){try{K(l,e,t);}catch(n){l[e]=t;}return t},z=l["__core-js_shared__"]||W("__core-js_shared__",{}),V=Function.toString;"function"!=typeof z.inspectSource&&(z.inspectSource=function(e){return V.call(e)});var Z,X,N,G=z.inspectSource,J=l.WeakMap,D="function"==typeof J&&/native code/.test(G(J)),Y=s((function(e){(e.exports=function(e,t){return z[e]||(z[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.11.0",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"});})),B=0,M=Math.random(),q=function(e){return "Symbol("+String(void 0===e?"":e)+")_"+(++B+M).toString(36)},H=Y("keys"),Q=function(e){return H[e]||(H[e]=q(e))},$={},ee=l.WeakMap;if(D){var te=z.state||(z.state=new ee),ne=te.get,re=te.has,oe=te.set;Z=function(e,t){if(re.call(te,e))throw new TypeError("Object already initialized");return t.facade=e,oe.call(te,e,t),t},X=function(e){return ne.call(te,e)||{}},N=function(e){return re.call(te,e)};}else {var ie=Q("state");$[ie]=!0,Z=function(e,t){if(E(e,ie))throw new TypeError("Object already initialized");return t.facade=e,K(e,ie,t),t},X=function(e){return E(e,ie)?e[ie]:{}},N=function(e){return E(e,ie)};}var ae,ce,se={set:Z,get:X,has:N,enforce:function(e){return N(e)?X(e):Z(e,{})},getterFor:function(e){return function(t){var n;if(!k(t)||(n=X(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}},ue=s((function(e){var t=se.get,n=se.enforce,r=String(String).split("String");(e.exports=function(e,t,o,i){var a,c=!!i&&!!i.unsafe,s=!!i&&!!i.enumerable,u=!!i&&!!i.noTargetGet;"function"==typeof o&&("string"!=typeof t||E(o,"name")||K(o,"name",t),(a=n(o)).source||(a.source=r.join("string"==typeof t?t:""))),e!==l?(c?!u&&e[t]&&(s=!0):delete e[t],s?e[t]=o:K(e,t,o)):s?e[t]=o:W(t,o);})(Function.prototype,"toString",(function(){return "function"==typeof this&&t(this).source||G(this)}));})),le=l,fe=function(e){return "function"==typeof e?e:void 0},de=function(e,t){return arguments.length<2?fe(le[e])||fe(l[e]):le[e]&&le[e][t]||l[e]&&l[e][t]},pe=Math.ceil,he=Math.floor,ye=function(e){return isNaN(e=+e)?0:(e>0?he:pe)(e)},ve=Math.min,me=function(e){return e>0?ve(ye(e),9007199254740991):0},ge=Math.max,be=Math.min,we=function(e){return function(t,n,r){var o,i=_(t),a=me(i.length),c=function(e,t){var n=ye(e);return n<0?ge(n+t,0):be(n,t)}(r,a);if(e&&n!=n){for(;a>c;)if((o=i[c++])!=o)return !0}else for(;a>c;c++)if((e||c in i)&&i[c]===n)return e||c||0;return !e&&-1}},Se={includes:we(!0),indexOf:we(!1)},_e=Se.indexOf,ke=function(e,t){var n,r=_(e),o=0,i=[];for(n in r)!E($,n)&&E(r,n)&&i.push(n);for(;t.length>o;)E(r,n=t[o++])&&(~_e(i,n)||i.push(n));return i},Ie=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Te=Ie.concat("length","prototype"),Oe={f:Object.getOwnPropertyNames||function(e){return ke(e,Te)}},Ee={f:Object.getOwnPropertySymbols},xe=de("Reflect","ownKeys")||function(e){var t=Oe.f(A(e)),n=Ee.f;return n?t.concat(n(e)):t},Re=function(e,t){for(var n=xe(t),r=F.f,o=U.f,i=0;i<n.length;i++){var a=n[i];E(e,a)||r(e,a,o(t,a));}},Le=/#|\.prototype\./,Ce=function(e,t){var n=Ue[je(e)];return n==Pe||n!=Ae&&("function"==typeof t?f(t):!!t)},je=Ce.normalize=function(e){return String(e).replace(Le,".").toLowerCase()},Ue=Ce.data={},Ae=Ce.NATIVE="N",Pe=Ce.POLYFILL="P",Fe=Ce,Ke=U.f,We=function(e,t){var n,r,o,i,a,c=e.target,s=e.global,u=e.stat;if(n=s?l:u?l[c]||W(c,{}):(l[c]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=Ke(n,r))&&a.value:n[r],!Fe(s?r:c+(u?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Re(i,o);}(e.sham||o&&o.sham)&&K(i,"sham",!0),ue(n,r,i,e);}},ze="process"==g(l.process),Ve=de("navigator","userAgent")||"",Ze=l.process,Xe=Ze&&Ze.versions,Ne=Xe&&Xe.v8;Ne?ce=(ae=Ne.split("."))[0]+ae[1]:Ve&&(!(ae=Ve.match(/Edge\/(\d+)/))||ae[1]>=74)&&(ae=Ve.match(/Chrome\/(\d+)/))&&(ce=ae[1]);var Ge,Je=ce&&+ce,De=!!Object.getOwnPropertySymbols&&!f((function(){return !Symbol.sham&&(ze?38===Je:Je>37&&Je<41)})),Ye=De&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Be=Y("wks"),Me=l.Symbol,qe=Ye?Me:Me&&Me.withoutSetter||q,He=function(e){return E(Be,e)&&(De||"string"==typeof Be[e])||(De&&E(Me,e)?Be[e]=Me[e]:Be[e]=qe("Symbol."+e)),Be[e]},Qe=He("match"),$e=function(e){if(function(e){var t;return k(e)&&(void 0!==(t=e[Qe])?!!t:"RegExp"==g(e))}(e))throw TypeError("The method doesn't accept regular expressions");return e},et=He("match"),tt=function(e){var t=/./;try{"/./"[e](t);}catch(n){try{return t[et]=!1,"/./"[e](t)}catch(e){}}return !1},nt=U.f,rt="".startsWith,ot=Math.min,it=tt("startsWith"),at=!(it||(Ge=nt(String.prototype,"startsWith"),!Ge||Ge.writable));We({target:"String",proto:!0,forced:!at&&!it},{startsWith:function(e){var t=String(S(this));$e(e);var n=me(ot(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return rt?rt.call(t,r,n):t.slice(n,n+r.length)===r}});var ct=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e},st=function(e,t,n){if(ct(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}},ut=Function.call,lt=function(e,t,n){return st(ut,l[e].prototype[t],n)};lt("String","startsWith");var ft=Array.isArray||function(e){return "Array"==g(e)},dt=function(e,t,n){var r=I(t);r in e?F.f(e,r,v(0,n)):e[r]=n;},pt=He("species"),ht=function(e,t){var n;return ft(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!ft(n.prototype)?k(n)&&null===(n=n[pt])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)},yt=He("species"),vt=He("isConcatSpreadable"),mt=Je>=51||!f((function(){var e=[];return e[vt]=!1,e.concat()[0]!==e})),gt=function(e){return Je>=51||!f((function(){var t=[];return (t.constructor={})[yt]=function(){return {foo:1}},1!==t[e](Boolean).foo}))}("concat"),bt=function(e){if(!k(e))return !1;var t=e[vt];return void 0!==t?!!t:ft(e)};We({target:"Array",proto:!0,forced:!mt||!gt},{concat:function(e){var t,n,r,o,i,a=T(this),c=ht(a,0),s=0;for(t=-1,r=arguments.length;t<r;t++)if(bt(i=-1===t?a:arguments[t])){if(s+(o=me(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,s++)n in i&&dt(c,s,i[n]);}else {if(s>=9007199254740991)throw TypeError("Maximum allowed index exceeded");dt(c,s++,i);}return c.length=s,c}});var wt={};wt[He("toStringTag")]="z";var St="[object z]"===String(wt),_t=He("toStringTag"),kt="Arguments"==g(function(){return arguments}()),It=St?g:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),_t))?n:kt?g(t):"Object"==(r=g(t))&&"function"==typeof t.callee?"Arguments":r},Tt=St?{}.toString:function(){return "[object "+It(this)+"]"};St||ue(Object.prototype,"toString",Tt,{unsafe:!0});var Ot,Et=Object.keys||function(e){return ke(e,Ie)},xt=d?Object.defineProperties:function(e,t){A(e);for(var n,r=Et(t),o=r.length,i=0;o>i;)F.f(e,n=r[i++],t[n]);return e},Rt=de("document","documentElement"),Lt=Q("IE_PROTO"),Ct=function(){},jt=function(e){return "<script>"+e+"<\/script>"},Ut=function(){try{Ot=document.domain&&new ActiveXObject("htmlfile");}catch(e){}var e,t;Ut=Ot?function(e){e.write(jt("")),e.close();var t=e.parentWindow.Object;return e=null,t}(Ot):((t=L("iframe")).style.display="none",Rt.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(jt("document.F=Object")),e.close(),e.F);for(var n=Ie.length;n--;)delete Ut.prototype[Ie[n]];return Ut()};$[Lt]=!0;var At=Object.create||function(e,t){var n;return null!==e?(Ct.prototype=A(e),n=new Ct,Ct.prototype=null,n[Lt]=e):n=Ut(),void 0===t?n:xt(n,t)},Pt=Oe.f,Ft={}.toString,Kt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Wt={f:function(e){return Kt&&"[object Window]"==Ft.call(e)?function(e){try{return Pt(e)}catch(e){return Kt.slice()}}(e):Pt(_(e))}},zt={f:He},Vt=F.f,Zt=function(e){var t=le.Symbol||(le.Symbol={});E(t,e)||Vt(t,e,{value:zt.f(e)});},Xt=F.f,Nt=He("toStringTag"),Gt=function(e,t,n){e&&!E(e=n?e:e.prototype,Nt)&&Xt(e,Nt,{configurable:!0,value:t});},Jt=[].push,Dt=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,c=5==e||i;return function(s,u,l,f){for(var d,p,h=T(s),y=w(h),v=st(u,l,3),m=me(y.length),g=0,b=f||ht,S=t?b(s,m):n||a?b(s,0):void 0;m>g;g++)if((c||g in y)&&(p=v(d=y[g],g,h),e))if(t)S[g]=p;else if(p)switch(e){case 3:return !0;case 5:return d;case 6:return g;case 2:Jt.call(S,d);}else switch(e){case 4:return !1;case 7:Jt.call(S,d);}return i?-1:r||o?o:S}},Yt={forEach:Dt(0),map:Dt(1),filter:Dt(2),some:Dt(3),every:Dt(4),find:Dt(5),findIndex:Dt(6),filterOut:Dt(7)}.forEach,Bt=Q("hidden"),Mt=He("toPrimitive"),qt=se.set,Ht=se.getterFor("Symbol"),Qt=Object.prototype,$t=l.Symbol,en=de("JSON","stringify"),tn=U.f,nn=F.f,rn=Wt.f,on=y.f,an=Y("symbols"),cn=Y("op-symbols"),sn=Y("string-to-symbol-registry"),un=Y("symbol-to-string-registry"),ln=Y("wks"),fn=l.QObject,dn=!fn||!fn.prototype||!fn.prototype.findChild,pn=d&&f((function(){return 7!=At(nn({},"a",{get:function(){return nn(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=tn(Qt,t);r&&delete Qt[t],nn(e,t,n),r&&e!==Qt&&nn(Qt,t,r);}:nn,hn=function(e,t){var n=an[e]=At($t.prototype);return qt(n,{type:"Symbol",tag:e,description:t}),d||(n.description=t),n},yn=Ye?function(e){return "symbol"==typeof e}:function(e){return Object(e)instanceof $t},vn=function(e,t,n){e===Qt&&vn(cn,t,n),A(e);var r=I(t,!0);return A(n),E(an,r)?(n.enumerable?(E(e,Bt)&&e[Bt][r]&&(e[Bt][r]=!1),n=At(n,{enumerable:v(0,!1)})):(E(e,Bt)||nn(e,Bt,v(1,{})),e[Bt][r]=!0),pn(e,r,n)):nn(e,r,n)},mn=function(e,t){A(e);var n=_(t),r=Et(n).concat(Sn(n));return Yt(r,(function(t){d&&!gn.call(n,t)||vn(e,t,n[t]);})),e},gn=function(e){var t=I(e,!0),n=on.call(this,t);return !(this===Qt&&E(an,t)&&!E(cn,t))&&(!(n||!E(this,t)||!E(an,t)||E(this,Bt)&&this[Bt][t])||n)},bn=function(e,t){var n=_(e),r=I(t,!0);if(n!==Qt||!E(an,r)||E(cn,r)){var o=tn(n,r);return !o||!E(an,r)||E(n,Bt)&&n[Bt][r]||(o.enumerable=!0),o}},wn=function(e){var t=rn(_(e)),n=[];return Yt(t,(function(e){E(an,e)||E($,e)||n.push(e);})),n},Sn=function(e){var t=e===Qt,n=rn(t?cn:_(e)),r=[];return Yt(n,(function(e){!E(an,e)||t&&!E(Qt,e)||r.push(an[e]);})),r};if(De||(ue(($t=function(){if(this instanceof $t)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=q(e),n=function(e){this===Qt&&n.call(cn,e),E(this,Bt)&&E(this[Bt],t)&&(this[Bt][t]=!1),pn(this,t,v(1,e));};return d&&dn&&pn(Qt,t,{configurable:!0,set:n}),hn(t,e)}).prototype,"toString",(function(){return Ht(this).tag})),ue($t,"withoutSetter",(function(e){return hn(q(e),e)})),y.f=gn,F.f=vn,U.f=bn,Oe.f=Wt.f=wn,Ee.f=Sn,zt.f=function(e){return hn(He(e),e)},d&&(nn($t.prototype,"description",{configurable:!0,get:function(){return Ht(this).description}}),ue(Qt,"propertyIsEnumerable",gn,{unsafe:!0}))),We({global:!0,wrap:!0,forced:!De,sham:!De},{Symbol:$t}),Yt(Et(ln),(function(e){Zt(e);})),We({target:"Symbol",stat:!0,forced:!De},{for:function(e){var t=String(e);if(E(sn,t))return sn[t];var n=$t(t);return sn[t]=n,un[n]=t,n},keyFor:function(e){if(!yn(e))throw TypeError(e+" is not a symbol");if(E(un,e))return un[e]},useSetter:function(){dn=!0;},useSimple:function(){dn=!1;}}),We({target:"Object",stat:!0,forced:!De,sham:!d},{create:function(e,t){return void 0===t?At(e):mn(At(e),t)},defineProperty:vn,defineProperties:mn,getOwnPropertyDescriptor:bn}),We({target:"Object",stat:!0,forced:!De},{getOwnPropertyNames:wn,getOwnPropertySymbols:Sn}),We({target:"Object",stat:!0,forced:f((function(){Ee.f(1);}))},{getOwnPropertySymbols:function(e){return Ee.f(T(e))}}),en){var _n=!De||f((function(){var e=$t();return "[null]"!=en([e])||"{}"!=en({a:e})||"{}"!=en(Object(e))}));We({target:"JSON",stat:!0,forced:_n},{stringify:function(e,t,n){for(var r,o=[e],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=t,(k(t)||void 0!==e)&&!yn(e))return ft(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!yn(t))return t}),o[1]=t,en.apply(null,o)}});}$t.prototype[Mt]||K($t.prototype,Mt,$t.prototype.valueOf),Gt($t,"Symbol"),$[Bt]=!0,Zt("asyncIterator");var kn=F.f,In=l.Symbol;if(d&&"function"==typeof In&&(!("description"in In.prototype)||void 0!==In().description)){var Tn={},On=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof On?new In(e):void 0===e?In():In(e);return ""===e&&(Tn[t]=!0),t};Re(On,In);var En=On.prototype=In.prototype;En.constructor=On;var xn=En.toString,Rn="Symbol(test)"==String(In("test")),Ln=/^Symbol\((.*)\)[^)]+$/;kn(En,"description",{configurable:!0,get:function(){var e=k(this)?this.valueOf():this,t=xn.call(e);if(E(Tn,e))return "";var n=Rn?t.slice(7,-1):t.replace(Ln,"$1");return ""===n?void 0:n}}),We({global:!0,forced:!0},{Symbol:On});}Zt("hasInstance"),Zt("isConcatSpreadable"),Zt("iterator"),Zt("match"),Zt("matchAll"),Zt("replace"),Zt("search"),Zt("species"),Zt("split"),Zt("toPrimitive"),Zt("toStringTag"),Zt("unscopables"),Gt(l.JSON,"JSON",!0),Gt(Math,"Math",!0),We({global:!0},{Reflect:{}}),Gt(l.Reflect,"Reflect",!0),le.Symbol;var Cn,jn,Un,An=function(e){return function(t,n){var r,o,i=String(S(t)),a=ye(n),c=i.length;return a<0||a>=c?e?"":void 0:(r=i.charCodeAt(a))<55296||r>56319||a+1===c||(o=i.charCodeAt(a+1))<56320||o>57343?e?i.charAt(a):r:e?i.slice(a,a+2):o-56320+(r-55296<<10)+65536}},Pn={codeAt:An(!1),charAt:An(!0)},Fn=!f((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),Kn=Q("IE_PROTO"),Wn=Object.prototype,zn=Fn?Object.getPrototypeOf:function(e){return e=T(e),E(e,Kn)?e[Kn]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?Wn:null},Vn=He("iterator"),Zn=!1;[].keys&&("next"in(Un=[].keys())?(jn=zn(zn(Un)))!==Object.prototype&&(Cn=jn):Zn=!0),(null==Cn||f((function(){var e={};return Cn[Vn].call(e)!==e})))&&(Cn={}),E(Cn,Vn)||K(Cn,Vn,(function(){return this}));var Xn={IteratorPrototype:Cn,BUGGY_SAFARI_ITERATORS:Zn},Nn={},Gn=Xn.IteratorPrototype,Jn=function(){return this},Dn=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array;}catch(e){}return function(n,r){return A(n),function(e){if(!k(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype")}(r),t?e.call(n,r):n.__proto__=r,n}}():void 0),Yn=Xn.IteratorPrototype,Bn=Xn.BUGGY_SAFARI_ITERATORS,Mn=He("iterator"),qn=function(){return this},Hn=function(e,t,n,r,o,i,a){!function(e,t,n){var r=t+" Iterator";e.prototype=At(Gn,{next:v(1,n)}),Gt(e,r,!1),Nn[r]=Jn;}(n,t,r);var c,s,u,l=function(e){if(e===o&&y)return y;if(!Bn&&e in p)return p[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},f=t+" Iterator",d=!1,p=e.prototype,h=p[Mn]||p["@@iterator"]||o&&p[o],y=!Bn&&h||l(o),m="Array"==t&&p.entries||h;if(m&&(c=zn(m.call(new e)),Yn!==Object.prototype&&c.next&&(zn(c)!==Yn&&(Dn?Dn(c,Yn):"function"!=typeof c[Mn]&&K(c,Mn,qn)),Gt(c,f,!0))),"values"==o&&h&&"values"!==h.name&&(d=!0,y=function(){return h.call(this)}),p[Mn]!==y&&K(p,Mn,y),Nn[t]=y,o)if(s={values:l("values"),keys:i?y:l("keys"),entries:l("entries")},a)for(u in s)(Bn||d||!(u in p))&&ue(p,u,s[u]);else We({target:t,proto:!0,forced:Bn||d},s);return s},Qn=Pn.charAt,$n=se.set,er=se.getterFor("String Iterator");Hn(String,"String",(function(e){$n(this,{type:"String Iterator",string:String(e),index:0});}),(function(){var e,t=er(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=Qn(n,r),t.index+=e.length,{value:e,done:!1})}));var tr=function(e){var t=e.return;if(void 0!==t)return A(t.call(e)).value},nr=function(e,t,n,r){try{return r?t(A(n)[0],n[1]):t(n)}catch(t){throw tr(e),t}},rr=He("iterator"),or=Array.prototype,ir=function(e){return void 0!==e&&(Nn.Array===e||or[rr]===e)},ar=He("iterator"),cr=function(e){if(null!=e)return e[ar]||e["@@iterator"]||Nn[It(e)]},sr=He("iterator"),ur=!1;try{var lr=0,fr={next:function(){return {done:!!lr++}},return:function(){ur=!0;}};fr[sr]=function(){return this},Array.from(fr,(function(){throw 2}));}catch(e){}var dr=function(e,t){if(!t&&!ur)return !1;var n=!1;try{var r={};r[sr]=function(){return {next:function(){return {done:n=!0}}}},e(r);}catch(e){}return n},pr=!dr((function(e){Array.from(e);}));We({target:"Array",stat:!0,forced:pr},{from:function(e){var t,n,r,o,i,a,c=T(e),s="function"==typeof this?this:Array,u=arguments.length,l=u>1?arguments[1]:void 0,f=void 0!==l,d=cr(c),p=0;if(f&&(l=st(l,u>2?arguments[2]:void 0,2)),null==d||s==Array&&ir(d))for(n=new s(t=me(c.length));t>p;p++)a=f?l(c[p],p):c[p],dt(n,p,a);else for(i=(o=d.call(c)).next,n=new s;!(r=i.call(o)).done;p++)a=f?nr(o,l,[r.value,p],!0):r.value,dt(n,p,a);return n.length=p,n}}),le.Array.from;var hr,yr="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView,vr=F.f,mr=l.Int8Array,gr=mr&&mr.prototype,br=l.Uint8ClampedArray,wr=br&&br.prototype,Sr=mr&&zn(mr),_r=gr&&zn(gr),kr=Object.prototype,Ir=kr.isPrototypeOf,Tr=He("toStringTag"),Or=q("TYPED_ARRAY_TAG"),Er=yr&&!!Dn&&"Opera"!==It(l.opera),xr={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},Rr={BigInt64Array:8,BigUint64Array:8},Lr=function(e){if(!k(e))return !1;var t=It(e);return E(xr,t)||E(Rr,t)};for(hr in xr)l[hr]||(Er=!1);if((!Er||"function"!=typeof Sr||Sr===Function.prototype)&&(Sr=function(){throw TypeError("Incorrect invocation")},Er))for(hr in xr)l[hr]&&Dn(l[hr],Sr);if((!Er||!_r||_r===kr)&&(_r=Sr.prototype,Er))for(hr in xr)l[hr]&&Dn(l[hr].prototype,_r);if(Er&&zn(wr)!==_r&&Dn(wr,_r),d&&!E(_r,Tr))for(hr in vr(_r,Tr,{get:function(){return k(this)?this[Or]:void 0}}),xr)l[hr]&&K(l[hr],Or,hr);var Cr=function(e){if(Lr(e))return e;throw TypeError("Target is not a typed array")},jr=function(e){if(Dn){if(Ir.call(Sr,e))return e}else for(var t in xr)if(E(xr,hr)){var n=l[t];if(n&&(e===n||Ir.call(n,e)))return e}throw TypeError("Target is not a typed array constructor")},Ur=function(e,t,n){if(d){if(n)for(var r in xr){var o=l[r];o&&E(o.prototype,e)&&delete o.prototype[e];}_r[e]&&!n||ue(_r,e,n?t:Er&&gr[e]||t);}},Ar=He("species"),Pr=Cr,Fr=jr,Kr=[].slice;Ur("slice",(function(e,t){for(var n=Kr.call(Pr(this),e,t),r=function(e,t){var n,r=A(e).constructor;return void 0===r||null==(n=A(r)[Ar])?t:ct(n)}(this,this.constructor),o=0,i=n.length,a=new(Fr(r))(i);i>o;)a[o]=n[o++];return a}),f((function(){new Int8Array(1).slice();})));var Wr=He("unscopables"),zr=Array.prototype;null==zr[Wr]&&F.f(zr,Wr,{configurable:!0,value:At(null)});var Vr=function(e){zr[Wr][e]=!0;},Zr=Se.includes;We({target:"Array",proto:!0},{includes:function(e){return Zr(this,e,arguments.length>1?arguments[1]:void 0)}}),Vr("includes"),lt("Array","includes"),We({target:"String",proto:!0,forced:!tt("includes")},{includes:function(e){return !!~String(S(this)).indexOf($e(e),arguments.length>1?arguments[1]:void 0)}}),lt("String","includes");var Xr=!f((function(){return Object.isExtensible(Object.preventExtensions({}))})),Nr=s((function(e){var t=F.f,n=q("meta"),r=0,o=Object.isExtensible||function(){return !0},i=function(e){t(e,n,{value:{objectID:"O"+ ++r,weakData:{}}});},a=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!k(e))return "symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!E(e,n)){if(!o(e))return "F";if(!t)return "E";i(e);}return e[n].objectID},getWeakData:function(e,t){if(!E(e,n)){if(!o(e))return !0;if(!t)return !1;i(e);}return e[n].weakData},onFreeze:function(e){return Xr&&a.REQUIRED&&o(e)&&!E(e,n)&&i(e),e}};$[n]=!0;}));Nr.REQUIRED,Nr.fastKey,Nr.getWeakData,Nr.onFreeze;var Gr=function(e,t){this.stopped=e,this.result=t;},Jr=function(e,t,n){var r,o,i,a,c,s,u,l=n&&n.that,f=!(!n||!n.AS_ENTRIES),d=!(!n||!n.IS_ITERATOR),p=!(!n||!n.INTERRUPTED),h=st(t,l,1+f+p),y=function(e){return r&&tr(r),new Gr(!0,e)},v=function(e){return f?(A(e),p?h(e[0],e[1],y):h(e[0],e[1])):p?h(e,y):h(e)};if(d)r=e;else {if("function"!=typeof(o=cr(e)))throw TypeError("Target is not iterable");if(ir(o)){for(i=0,a=me(e.length);a>i;i++)if((c=v(e[i]))&&c instanceof Gr)return c;return new Gr(!1)}r=o.call(e);}for(s=r.next;!(u=s.call(r)).done;){try{c=v(u.value);}catch(e){throw tr(r),e}if("object"==typeof c&&c&&c instanceof Gr)return c}return new Gr(!1)},Dr=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e},Yr=function(e,t,n){for(var r in t)ue(e,r,t[r],n);return e},Br=He("species"),Mr=F.f,qr=Nr.fastKey,Hr=se.set,Qr=se.getterFor;!function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=l[e],c=a&&a.prototype,s=a,u={},d=function(e){var t=c[e];ue(c,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return !(o&&!k(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return o&&!k(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return !(o&&!k(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this});};if(Fe(e,"function"!=typeof a||!(o||c.forEach&&!f((function(){(new a).entries().next();})))))s=n.getConstructor(t,e,r,i),Nr.REQUIRED=!0;else if(Fe(e,!0)){var p=new s,h=p[i](o?{}:-0,1)!=p,y=f((function(){p.has(1);})),v=dr((function(e){new a(e);})),m=!o&&f((function(){for(var e=new a,t=5;t--;)e[i](t,t);return !e.has(-0)}));v||((s=t((function(t,n){Dr(t,s,e);var o=function(e,t,n){var r,o;return Dn&&"function"==typeof(r=t.constructor)&&r!==n&&k(o=r.prototype)&&o!==n.prototype&&Dn(e,o),e}(new a,t,s);return null!=n&&Jr(n,o[i],{that:o,AS_ENTRIES:r}),o}))).prototype=c,c.constructor=s),(y||m)&&(d("delete"),d("has"),r&&d("get")),(m||h)&&d(i),o&&c.clear&&delete c.clear;}u[e]=s,We({global:!0,forced:s!=a},u),Gt(s,e),o||n.setStrong(s,e,r);}("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),{getConstructor:function(e,t,n,r){var o=e((function(e,i){Dr(e,o,t),Hr(e,{type:t,index:At(null),first:void 0,last:void 0,size:0}),d||(e.size=0),null!=i&&Jr(i,e[r],{that:e,AS_ENTRIES:n});})),i=Qr(t),a=function(e,t,n){var r,o,a=i(e),s=c(e,t);return s?s.value=n:(a.last=s={index:o=qr(t,!0),key:t,value:n,previous:r=a.last,next:void 0,removed:!1},a.first||(a.first=s),r&&(r.next=s),d?a.size++:e.size++,"F"!==o&&(a.index[o]=s)),e},c=function(e,t){var n,r=i(e),o=qr(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==t)return n};return Yr(o.prototype,{clear:function(){for(var e=i(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,d?e.size=0:this.size=0;},delete:function(e){var t=this,n=i(t),r=c(t,e);if(r){var o=r.next,a=r.previous;delete n.index[r.index],r.removed=!0,a&&(a.next=o),o&&(o.previous=a),n.first==r&&(n.first=o),n.last==r&&(n.last=a),d?n.size--:t.size--;}return !!r},forEach:function(e){for(var t,n=i(this),r=st(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous;},has:function(e){return !!c(this,e)}}),Yr(o.prototype,n?{get:function(e){var t=c(this,e);return t&&t.value},set:function(e,t){return a(this,0===e?0:e,t)}}:{add:function(e){return a(this,e=0===e?0:e,e)}}),d&&Mr(o.prototype,"size",{get:function(){return i(this).size}}),o},setStrong:function(e,t,n){var r=t+" Iterator",o=Qr(t),i=Qr(r);Hn(e,t,(function(e,t){Hr(this,{type:r,target:e,state:o(e),kind:t,last:void 0});}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),function(e){var t=de(e),n=F.f;d&&t&&!t[Br]&&n(t,Br,{configurable:!0,get:function(){return this}});}(t);}});var $r={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},eo=se.set,to=se.getterFor("Array Iterator"),no=Hn(Array,"Array",(function(e,t){eo(this,{type:"Array Iterator",target:_(e),index:0,kind:t});}),(function(){var e=to(this),t=e.target,n=e.kind,r=e.index++;return !t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");Nn.Arguments=Nn.Array,Vr("keys"),Vr("values"),Vr("entries");var ro=He("iterator"),oo=He("toStringTag"),io=no.values;for(var ao in $r){var co=l[ao],so=co&&co.prototype;if(so){if(so[ro]!==io)try{K(so,ro,io);}catch(e){so[ro]=io;}if(so[oo]||K(so,oo,ao),$r[ao])for(var uo in no)if(so[uo]!==no[uo])try{K(so,uo,no[uo]);}catch(e){so[uo]=no[uo];}}}function lo(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))}function fo(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var a=n.then;if("function"==typeof a)return void a.call(n,(function(t){i(e,t);}),(function(n){r[e]={status:"rejected",reason:n},0==--o&&t(r);}))}r[e]={status:"fulfilled",value:n},0==--o&&t(r);}for(var a=0;a<r.length;a++)i(a,r[a]);}))}le.Set;var po=setTimeout;function ho(e){return Boolean(e&&void 0!==e.length)}function yo(){}function vo(e){if(!(this instanceof vo))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],_o(e,this);}function mo(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,vo._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value);}catch(e){return void bo(t.promise,e)}go(t.promise,r);}else (1===e._state?go:bo)(t.promise,e._value);}))):e._deferreds.push(t);}function go(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof vo)return e._state=3,e._value=t,void wo(e);if("function"==typeof n)return void _o((r=n,o=t,function(){r.apply(o,arguments);}),e)}e._state=1,e._value=t,wo(e);}catch(t){bo(e,t);}var r,o;}function bo(e,t){e._state=2,e._value=t,wo(e);}function wo(e){2===e._state&&0===e._deferreds.length&&vo._immediateFn((function(){e._handled||vo._unhandledRejectionFn(e._value);}));for(var t=0,n=e._deferreds.length;t<n;t++)mo(e,e._deferreds[t]);e._deferreds=null;}function So(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n;}function _o(e,t){var n=!1;try{e((function(e){n||(n=!0,go(t,e));}),(function(e){n||(n=!0,bo(t,e));}));}catch(e){if(n)return;n=!0,bo(t,e);}}vo.prototype.catch=function(e){return this.then(null,e)},vo.prototype.then=function(e,t){var n=new this.constructor(yo);return mo(this,new So(e,t,n)),n},vo.prototype.finally=lo,vo.all=function(e){return new vo((function(t,n){if(!ho(e))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var c=a.then;if("function"==typeof c)return void c.call(a,(function(t){i(e,t);}),n)}r[e]=a,0==--o&&t(r);}catch(e){n(e);}}for(var a=0;a<r.length;a++)i(a,r[a]);}))},vo.allSettled=fo,vo.resolve=function(e){return e&&"object"==typeof e&&e.constructor===vo?e:new vo((function(t){t(e);}))},vo.reject=function(e){return new vo((function(t,n){n(e);}))},vo.race=function(e){return new vo((function(t,n){if(!ho(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,o=e.length;r<o;r++)vo.resolve(e[r]).then(t,n);}))},vo._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e);}||function(e){po(e,0);},vo._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e);};var ko=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();"function"!=typeof ko.Promise?ko.Promise=vo:ko.Promise.prototype.finally?ko.Promise.allSettled||(ko.Promise.allSettled=fo):ko.Promise.prototype.finally=lo,function(e){function t(){}function n(e,t){if(e=void 0===e?"utf-8":e,t=void 0===t?{fatal:!1}:t,-1===o.indexOf(e.toLowerCase()))throw new RangeError("Failed to construct 'TextDecoder': The encoding label provided ('"+e+"') is invalid.");if(t.fatal)throw Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}function r(e){for(var t=0,n=Math.min(65536,e.length+1),r=new Uint16Array(n),o=[],i=0;;){var a=t<e.length;if(!a||i>=n-1){if(o.push(String.fromCharCode.apply(null,r.subarray(0,i))),!a)return o.join("");e=e.subarray(t),i=t=0;}if(0==(128&(a=e[t++])))r[i++]=a;else if(192==(224&a)){var c=63&e[t++];r[i++]=(31&a)<<6|c;}else if(224==(240&a)){c=63&e[t++];var s=63&e[t++];r[i++]=(31&a)<<12|c<<6|s;}else if(240==(248&a)){65535<(a=(7&a)<<18|(c=63&e[t++])<<12|(s=63&e[t++])<<6|63&e[t++])&&(a-=65536,r[i++]=a>>>10&1023|55296,a=56320|1023&a),r[i++]=a;}}}if(e.TextEncoder&&e.TextDecoder)return !1;var o=["utf-8","utf8","unicode-1-1-utf-8"];Object.defineProperty(t.prototype,"encoding",{value:"utf-8"}),t.prototype.encode=function(e,t){if((t=void 0===t?{stream:!1}:t).stream)throw Error("Failed to encode: the 'stream' option is unsupported.");t=0;for(var n=e.length,r=0,o=Math.max(32,n+(n>>>1)+7),i=new Uint8Array(o>>>3<<3);t<n;){var a=e.charCodeAt(t++);if(55296<=a&&56319>=a){if(t<n){var c=e.charCodeAt(t);56320==(64512&c)&&(++t,a=((1023&a)<<10)+(1023&c)+65536);}if(55296<=a&&56319>=a)continue}if(r+4>i.length&&(o+=8,o=(o*=1+t/e.length*2)>>>3<<3,(c=new Uint8Array(o)).set(i),i=c),0==(4294967168&a))i[r++]=a;else {if(0==(4294965248&a))i[r++]=a>>>6&31|192;else if(0==(4294901760&a))i[r++]=a>>>12&15|224,i[r++]=a>>>6&63|128;else {if(0!=(4292870144&a))continue;i[r++]=a>>>18&7|240,i[r++]=a>>>12&63|128,i[r++]=a>>>6&63|128;}i[r++]=63&a|128;}}return i.slice?i.slice(0,r):i.subarray(0,r)},Object.defineProperty(n.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(n.prototype,"fatal",{value:!1}),Object.defineProperty(n.prototype,"ignoreBOM",{value:!1});var i=r;"function"==typeof Buffer&&Buffer.from?i=function(e){return Buffer.from(e.buffer,e.byteOffset,e.byteLength).toString("utf-8")}:"function"==typeof Blob&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&(i=function(e){var t=URL.createObjectURL(new Blob([e],{type:"text/plain;charset=UTF-8"}));try{var n=new XMLHttpRequest;return n.open("GET",t,!1),n.send(),n.responseText}catch(t){return r(e)}finally{URL.revokeObjectURL(t);}}),n.prototype.decode=function(e,t){if((t=void 0===t?{stream:!1}:t).stream)throw Error("Failed to decode: the 'stream' option is unsupported.");return e=e instanceof Uint8Array?e:e.buffer instanceof ArrayBuffer?new Uint8Array(e.buffer):new Uint8Array(e),i(e)},e.TextEncoder=t,e.TextDecoder=n;}("undefined"!=typeof window?window:a),function(){function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}function n(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t);}function o(e){return (o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,t){return (i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return !1}}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){return !t||"object"!=typeof t&&"function"!=typeof t?s(e):t}function l(e){var t=c();return function(){var n,r=o(e);if(t){var i=o(this).constructor;n=Reflect.construct(r,arguments,i);}else n=r.apply(this,arguments);return u(this,n)}}function f(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=o(e)););return e}function d(e,t,n){return (d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=f(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}var p=function(){function t(){e(this,t),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0});}return n(t,[{key:"addEventListener",value:function(e,t,n){e in this.listeners||(this.listeners[e]=[]),this.listeners[e].push({callback:t,options:n});}},{key:"removeEventListener",value:function(e,t){if(e in this.listeners)for(var n=this.listeners[e],r=0,o=n.length;r<o;r++)if(n[r].callback===t)return void n.splice(r,1)}},{key:"dispatchEvent",value:function(e){if(e.type in this.listeners){for(var t=this.listeners[e.type].slice(),n=0,r=t.length;n<r;n++){var o=t[n];try{o.callback.call(this,e);}catch(e){Promise.resolve().then((function(){throw e}));}o.options&&o.options.once&&this.removeEventListener(e.type,o.callback);}return !e.defaultPrevented}}}]),t}(),h=function(t){r(a,t);var i=l(a);function a(){var t;return e(this,a),(t=i.call(this)).listeners||p.call(s(t)),Object.defineProperty(s(t),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(s(t),"onabort",{value:null,writable:!0,configurable:!0}),t}return n(a,[{key:"toString",value:function(){return "[object AbortSignal]"}},{key:"dispatchEvent",value:function(e){"abort"===e.type&&(this.aborted=!0,"function"==typeof this.onabort&&this.onabort.call(this,e)),d(o(a.prototype),"dispatchEvent",this).call(this,e);}}]),a}(p),y=function(){function t(){e(this,t),Object.defineProperty(this,"signal",{value:new h,writable:!0,configurable:!0});}return n(t,[{key:"abort",value:function(){var e;try{e=new Event("abort");}catch(t){"undefined"!=typeof document?document.createEvent?(e=document.createEvent("Event")).initEvent("abort",!1,!1):(e=document.createEventObject()).type="abort":e={type:"abort",bubbles:!1,cancelable:!1};}this.signal.dispatchEvent(e);}},{key:"toString",value:function(){return "[object AbortController]"}}]),t}();function v(e){return e.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL?(console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"),!0):"function"==typeof e.Request&&!e.Request.prototype.hasOwnProperty("signal")||!e.AbortController}"undefined"!=typeof Symbol&&Symbol.toStringTag&&(y.prototype[Symbol.toStringTag]="AbortController",h.prototype[Symbol.toStringTag]="AbortSignal"),function(e){v(e)&&(e.AbortController=y,e.AbortSignal=h);}("undefined"!=typeof self?self:a);}();var Io=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){var e=this;this.locked=new Map,this.addToLocked=function(t,n){var r=e.locked.get(t);void 0===r?void 0===n?e.locked.set(t,[]):e.locked.set(t,[n]):void 0!==n&&(r.unshift(n),e.locked.set(t,r));},this.isLocked=function(t){return e.locked.has(t)},this.lock=function(t){return new Promise((function(n,r){e.isLocked(t)?e.addToLocked(t,n):(e.addToLocked(t),n());}))},this.unlock=function(t){var n=e.locked.get(t);if(void 0!==n&&0!==n.length){var r=n.pop();e.locked.set(t,n),void 0!==r&&setTimeout(r,0);}else e.locked.delete(t);};}return e.getInstance=function(){return void 0===e.instance&&(e.instance=new e),e.instance},e}();t.default=function(){return n.getInstance()};}));c(Io);var To=c(s((function(e,t){var n=a&&a.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e));}catch(e){i(e);}}function c(e){try{s(r.throw(e));}catch(e){i(e);}}function s(e){e.done?o(e.value):new n((function(t){t(e.value);})).then(a,c);}s((r=r.apply(e,t||[])).next());}))},r=a&&a.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a);}catch(e){i=[6,e],r=0;}finally{n=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};Object.defineProperty(t,"__esModule",{value:!0});var o="browser-tabs-lock-key";function i(e){return new Promise((function(t){return setTimeout(t,e)}))}function c(e){for(var t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",n="",r=0;r<e;r++){n+=t[Math.floor(Math.random()*t.length)];}return n}var s=function(){function e(){this.acquiredIatSet=new Set,this.id=Date.now().toString()+c(15),this.acquireLock=this.acquireLock.bind(this),this.releaseLock=this.releaseLock.bind(this),this.releaseLock__private__=this.releaseLock__private__.bind(this),this.waitForSomethingToChange=this.waitForSomethingToChange.bind(this),this.refreshLockWhileAcquired=this.refreshLockWhileAcquired.bind(this),void 0===e.waiters&&(e.waiters=[]);}return e.prototype.acquireLock=function(t,a){return void 0===a&&(a=5e3),n(this,void 0,void 0,(function(){var n,s,u,l,f,d;return r(this,(function(r){switch(r.label){case 0:n=Date.now()+c(4),s=Date.now()+a,u=o+"-"+t,l=window.localStorage,r.label=1;case 1:return Date.now()<s?[4,i(30)]:[3,8];case 2:return r.sent(),null!==l.getItem(u)?[3,5]:(f=this.id+"-"+t+"-"+n,[4,i(Math.floor(25*Math.random()))]);case 3:return r.sent(),l.setItem(u,JSON.stringify({id:this.id,iat:n,timeoutKey:f,timeAcquired:Date.now(),timeRefreshed:Date.now()})),[4,i(30)];case 4:return r.sent(),null!==(d=l.getItem(u))&&(d=JSON.parse(d)).id===this.id&&d.iat===n?(this.acquiredIatSet.add(n),this.refreshLockWhileAcquired(u,n),[2,!0]):[3,7];case 5:return e.lockCorrector(),[4,this.waitForSomethingToChange(s)];case 6:r.sent(),r.label=7;case 7:return n=Date.now()+c(4),[3,1];case 8:return [2,!1]}}))}))},e.prototype.refreshLockWhileAcquired=function(e,t){return n(this,void 0,void 0,(function(){var o=this;return r(this,(function(i){return setTimeout((function(){return n(o,void 0,void 0,(function(){var n,o;return r(this,(function(r){switch(r.label){case 0:return [4,Io.default().lock(t)];case 1:return r.sent(),this.acquiredIatSet.has(t)?(n=window.localStorage,null===(o=n.getItem(e))?(Io.default().unlock(t),[2]):((o=JSON.parse(o)).timeRefreshed=Date.now(),n.setItem(e,JSON.stringify(o)),Io.default().unlock(t),this.refreshLockWhileAcquired(e,t),[2])):(Io.default().unlock(t),[2])}}))}))}),1e3),[2]}))}))},e.prototype.waitForSomethingToChange=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return [4,new Promise((function(n){var r=!1,o=Date.now(),i=!1;function a(){if(i||(window.removeEventListener("storage",a),e.removeFromWaiting(a),clearTimeout(c),i=!0),!r){r=!0;var t=50-(Date.now()-o);t>0?setTimeout(n,t):n();}}window.addEventListener("storage",a),e.addToWaiting(a);var c=setTimeout(a,Math.max(0,t-Date.now()));}))];case 1:return n.sent(),[2]}}))}))},e.addToWaiting=function(t){this.removeFromWaiting(t),void 0!==e.waiters&&e.waiters.push(t);},e.removeFromWaiting=function(t){void 0!==e.waiters&&(e.waiters=e.waiters.filter((function(e){return e!==t})));},e.notifyWaiters=function(){void 0!==e.waiters&&e.waiters.slice().forEach((function(e){return e()}));},e.prototype.releaseLock=function(e){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return [4,this.releaseLock__private__(e)];case 1:return [2,t.sent()]}}))}))},e.prototype.releaseLock__private__=function(t){return n(this,void 0,void 0,(function(){var n,i,a;return r(this,(function(r){switch(r.label){case 0:return n=window.localStorage,i=o+"-"+t,null===(a=n.getItem(i))?[2]:(a=JSON.parse(a)).id!==this.id?[3,2]:[4,Io.default().lock(a.iat)];case 1:r.sent(),this.acquiredIatSet.delete(a.iat),n.removeItem(i),Io.default().unlock(a.iat),e.notifyWaiters(),r.label=2;case 2:return [2]}}))}))},e.lockCorrector=function(){for(var t=Date.now()-5e3,n=window.localStorage,r=Object.keys(n),i=!1,a=0;a<r.length;a++){var c=r[a];if(c.includes(o)){var s=n.getItem(c);null!==s&&(void 0===(s=JSON.parse(s)).timeRefreshed&&s.timeAcquired<t||void 0!==s.timeRefreshed&&s.timeRefreshed<t)&&(n.removeItem(c),i=!0);}}i&&e.notifyWaiters();},e.waiters=void 0,e}();t.default=s;}))),Oo={timeoutInSeconds:60},Eo=["login_required","consent_required","interaction_required","account_selection_required","access_denied"],xo={name:"auth0-spa-js",version:"1.15.0"},Ro=function(e){function n(t,r){var o=e.call(this,r)||this;return o.error=t,o.error_description=r,Object.setPrototypeOf(o,n.prototype),o}return t(n,e),n.fromPayload=function(e){return new n(e.error,e.error_description)},n}(Error),Lo=function(e){function n(t,r,o,i){void 0===i&&(i=null);var a=e.call(this,t,r)||this;return a.state=o,a.appState=i,Object.setPrototypeOf(a,n.prototype),a}return t(n,e),n}(Ro),Co=function(e){function n(){var t=e.call(this,"timeout","Timeout")||this;return Object.setPrototypeOf(t,n.prototype),t}return t(n,e),n}(Ro),jo=function(e){function n(t){var r=e.call(this)||this;return r.popup=t,Object.setPrototypeOf(r,n.prototype),r}return t(n,e),n}(Co),Uo=function(e){function n(t){var r=e.call(this,"cancelled","Popup closed")||this;return r.popup=t,Object.setPrototypeOf(r,n.prototype),r}return t(n,e),n}(Ro),Ao=function(e){return new Promise((function(t,n){var r,o=setInterval((function(){e.popup&&e.popup.closed&&(clearInterval(o),clearTimeout(i),window.removeEventListener("message",r,!1),n(new Uo(e.popup)));}),1e3),i=setTimeout((function(){clearInterval(o),n(new jo(e.popup)),window.removeEventListener("message",r,!1);}),1e3*(e.timeoutInSeconds||60));r=function(a){if(a.data&&"authorization_response"===a.data.type){if(clearTimeout(i),clearInterval(o),window.removeEventListener("message",r,!1),e.popup.close(),a.data.response.error)return n(Ro.fromPayload(a.data.response));t(a.data.response);}},window.addEventListener("message",r);}))},Po=function(){return window.crypto||window.msCrypto},Fo=function(){var e=Po();return e.subtle||e.webkitSubtle},Ko=function(){var e="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~.",t="";return Array.from(Po().getRandomValues(new Uint8Array(43))).forEach((function(n){return t+=e[n%e.length]})),t},Wo=function(e){return btoa(e)},zo=function(e){return Object.keys(e).filter((function(t){return void 0!==e[t]})).map((function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])})).join("&")},Vo=function(e){return o(void 0,void 0,void 0,(function(){var t;return i(this,(function(n){switch(n.label){case 0:return t=Fo().digest({name:"SHA-256"},(new TextEncoder).encode(e)),window.msCrypto?[2,new Promise((function(e,n){t.oncomplete=function(t){e(t.target.result);},t.onerror=function(e){n(e.error);},t.onabort=function(){n("The digest operation was aborted");};}))]:[4,t];case 1:return [2,n.sent()]}}))}))},Zo=function(e){return function(e){return decodeURIComponent(atob(e).split("").map((function(e){return "%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join(""))}(e.replace(/_/g,"/").replace(/-/g,"+"))},Xo=function(e){var t=new Uint8Array(e);return function(e){var t={"+":"-","/":"_","=":""};return e.replace(/[+/=]/g,(function(e){return t[e]}))}(window.btoa(String.fromCharCode.apply(String,Array.from(t))))};var No=function(e,t){return o(void 0,void 0,void 0,(function(){var n,r;return i(this,(function(o){switch(o.label){case 0:return [4,(i=e,a=t,a=a||{},new Promise((function(e,t){var n=new XMLHttpRequest,r=[],o=[],c={},s=function(){return {ok:2==(n.status/100|0),statusText:n.statusText,status:n.status,url:n.responseURL,text:function(){return Promise.resolve(n.responseText)},json:function(){return Promise.resolve(n.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([n.response]))},clone:s,headers:{keys:function(){return r},entries:function(){return o},get:function(e){return c[e.toLowerCase()]},has:function(e){return e.toLowerCase()in c}}}};for(var u in n.open(a.method||"get",i,!0),n.onload=function(){n.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,(function(e,t,n){r.push(t=t.toLowerCase()),o.push([t,n]),c[t]=c[t]?c[t]+","+n:n;})),e(s());},n.onerror=t,n.withCredentials="include"==a.credentials,a.headers)n.setRequestHeader(u,a.headers[u]);n.send(a.body||null);})))];case 1:return n=o.sent(),r={ok:n.ok},[4,n.json()];case 2:return [2,(r.json=o.sent(),r)]}var i,a;}))}))},Go=function(e,t,n){return o(void 0,void 0,void 0,(function(){var r,o;return i(this,(function(i){return r=new AbortController,t.signal=r.signal,[2,Promise.race([No(e,t),new Promise((function(e,t){o=setTimeout((function(){r.abort(),t(new Error("Timeout when executing 'fetch'"));}),n);}))]).finally((function(){clearTimeout(o);}))]}))}))},Jo=function(e,t,n,r,a,c){return o(void 0,void 0,void 0,(function(){return i(this,(function(o){return [2,(i={auth:{audience:t,scope:n},timeout:a,fetchUrl:e,fetchOptions:r},s=c,new Promise((function(e,t){var n=new MessageChannel;n.port1.onmessage=function(n){n.data.error?t(new Error(n.data.error)):e(n.data);},s.postMessage(i,[n.port2]);})))];var i,s;}))}))},Do=function(e,t,n,r,a,c){return void 0===c&&(c=1e4),o(void 0,void 0,void 0,(function(){return i(this,(function(o){return a?[2,Jo(e,t,n,r,c,a)]:[2,Go(e,r,c)]}))}))};function Yo(e,t,n,a,c,s){return o(this,void 0,void 0,(function(){var o,u,l,f,d,p,h,y;return i(this,(function(i){switch(i.label){case 0:o=null,l=0,i.label=1;case 1:if(!(l<3))return [3,6];i.label=2;case 2:return i.trys.push([2,4,,5]),[4,Do(e,n,a,c,s,t)];case 3:return u=i.sent(),o=null,[3,6];case 4:return f=i.sent(),o=f,[3,5];case 5:return l++,[3,1];case 6:if(o)throw o.message=o.message||"Failed to fetch",o;if(d=u.json,p=d.error,h=d.error_description,y=r(d,["error","error_description"]),!u.ok)throw new Ro(p||"request_error",h||"HTTP error. Unable to fetch "+e);return [2,y]}}))}))}function Bo(e,t){var n=e.baseUrl,a=e.timeout,c=e.audience,s=e.scope,u=e.auth0Client,l=r(e,["baseUrl","timeout","audience","scope","auth0Client"]);return o(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return [4,Yo(n+"/oauth/token",a,c||"default",s,{method:"POST",body:JSON.stringify(l),headers:{"Content-type":"application/json","Auth0-Client":btoa(JSON.stringify(u||xo))}},t)];case 1:return [2,e.sent()]}}))}))}var Mo=function(e){return Array.from(new Set(e))},qo=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Mo(e.join(" ").trim().split(/\s+/)).join(" ")},Ho=function(){function e(e,t){void 0===t&&(t=Qo),this.prefix=t,this.client_id=e.client_id,this.scope=e.scope,this.audience=e.audience;}return e.prototype.toKey=function(){return this.prefix+"::"+this.client_id+"::"+this.audience+"::"+this.scope},e.fromKey=function(t){var n=t.split("::"),r=n[0],o=n[1],i=n[2];return new e({client_id:o,scope:n[3],audience:i},r)},e}(),Qo="@@auth0spajs@@",$o=function(e){var t=Math.floor(Date.now()/1e3)+e.expires_in;return {body:e,expiresAt:Math.min(t,e.decodedToken.claims.exp)}},ei=function(e,t){var n=e.client_id,r=e.audience,o=e.scope;return t.filter((function(e){var t=Ho.fromKey(e),i=t.prefix,a=t.client_id,c=t.audience,s=t.scope,u=s&&s.split(" "),l=s&&o.split(" ").reduce((function(e,t){return e&&u.includes(t)}),!0);return i===Qo&&a===n&&c===r&&l}))[0]},ti=function(){function e(){}return e.prototype.save=function(e){var t=new Ho({client_id:e.client_id,scope:e.scope,audience:e.audience}),n=$o(e);window.localStorage.setItem(t.toKey(),JSON.stringify(n));},e.prototype.get=function(e,t){void 0===t&&(t=0);var n=this.readJson(e),r=Math.floor(Date.now()/1e3);if(n){if(!(n.expiresAt-t<r))return n.body;if(n.body.refresh_token){var o=this.stripData(n);return this.writeJson(e.toKey(),o),o.body}localStorage.removeItem(e.toKey());}},e.prototype.clear=function(){for(var e=localStorage.length-1;e>=0;e--)localStorage.key(e).startsWith(Qo)&&localStorage.removeItem(localStorage.key(e));},e.prototype.readJson=function(e){var t,n=ei(e,Object.keys(window.localStorage)),r=n&&window.localStorage.getItem(n);if(r&&(t=JSON.parse(r)))return t},e.prototype.writeJson=function(e,t){localStorage.setItem(e,JSON.stringify(t));},e.prototype.stripData=function(e){return {body:{refresh_token:e.body.refresh_token},expiresAt:e.expiresAt}},e}(),ni=function(){var e;this.enclosedCache=(e={},{save:function(t){var n=new Ho({client_id:t.client_id,scope:t.scope,audience:t.audience}),r=$o(t);e[n.toKey()]=r;},get:function(t,n){void 0===n&&(n=0);var r=ei(t,Object.keys(e)),o=e[r],i=Math.floor(Date.now()/1e3);if(o)return o.expiresAt-n<i?o.body.refresh_token?(o.body={refresh_token:o.body.refresh_token},o.body):void delete e[t.toKey()]:o.body},clear:function(){e={};}});},ri=function(){function e(e){this.storage=e,this.transaction=this.storage.get("a0.spajs.txs");}return e.prototype.create=function(e){this.transaction=e,this.storage.save("a0.spajs.txs",e,{daysUntilExpire:1});},e.prototype.get=function(){return this.transaction},e.prototype.remove=function(){delete this.transaction,this.storage.remove("a0.spajs.txs");},e}(),oi=function(e){return "number"==typeof e},ii=["iss","aud","exp","nbf","iat","jti","azp","nonce","auth_time","at_hash","c_hash","acr","amr","sub_jwk","cnf","sip_from_tag","sip_date","sip_callid","sip_cseq_num","sip_via_branch","orig","dest","mky","events","toe","txn","rph","sid","vot","vtm"],ai=function(e){if(!e.id_token)throw new Error("ID token is required but missing");var t=function(e){var t=e.split("."),n=t[0],r=t[1],o=t[2];if(3!==t.length||!n||!r||!o)throw new Error("ID token could not be decoded");var i=JSON.parse(Zo(r)),a={__raw:e},c={};return Object.keys(i).forEach((function(e){a[e]=i[e],ii.includes(e)||(c[e]=i[e]);})),{encoded:{header:n,payload:r,signature:o},header:JSON.parse(Zo(n)),claims:a,user:c}}(e.id_token);if(!t.claims.iss)throw new Error("Issuer (iss) claim must be a string present in the ID token");if(t.claims.iss!==e.iss)throw new Error('Issuer (iss) claim mismatch in the ID token; expected "'+e.iss+'", found "'+t.claims.iss+'"');if(!t.user.sub)throw new Error("Subject (sub) claim must be a string present in the ID token");if("RS256"!==t.header.alg)throw new Error('Signature algorithm of "'+t.header.alg+'" is not supported. Expected the ID token to be signed with "RS256".');if(!t.claims.aud||"string"!=typeof t.claims.aud&&!Array.isArray(t.claims.aud))throw new Error("Audience (aud) claim must be a string or array of strings present in the ID token");if(Array.isArray(t.claims.aud)){if(!t.claims.aud.includes(e.aud))throw new Error('Audience (aud) claim mismatch in the ID token; expected "'+e.aud+'" but was not one of "'+t.claims.aud.join(", ")+'"');if(t.claims.aud.length>1){if(!t.claims.azp)throw new Error("Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values");if(t.claims.azp!==e.aud)throw new Error('Authorized Party (azp) claim mismatch in the ID token; expected "'+e.aud+'", found "'+t.claims.azp+'"')}}else if(t.claims.aud!==e.aud)throw new Error('Audience (aud) claim mismatch in the ID token; expected "'+e.aud+'" but found "'+t.claims.aud+'"');if(e.nonce){if(!t.claims.nonce)throw new Error("Nonce (nonce) claim must be a string present in the ID token");if(t.claims.nonce!==e.nonce)throw new Error('Nonce (nonce) claim mismatch in the ID token; expected "'+e.nonce+'", found "'+t.claims.nonce+'"')}if(e.max_age&&!oi(t.claims.auth_time))throw new Error("Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified");if(!oi(t.claims.exp))throw new Error("Expiration Time (exp) claim must be a number present in the ID token");if(!oi(t.claims.iat))throw new Error("Issued At (iat) claim must be a number present in the ID token");var n=e.leeway||60,r=new Date(Date.now()),o=new Date(0),i=new Date(0),a=new Date(0);if(a.setUTCSeconds(parseInt(t.claims.auth_time)+e.max_age+n),o.setUTCSeconds(t.claims.exp+n),i.setUTCSeconds(t.claims.nbf-n),r>o)throw new Error("Expiration Time (exp) claim error in the ID token; current time ("+r+") is after expiration time ("+o+")");if(oi(t.claims.nbf)&&r<i)throw new Error("Not Before time (nbf) claim in the ID token indicates that this token can't be used just yet. Currrent time ("+r+") is before "+i);if(oi(t.claims.auth_time)&&r>a)throw new Error("Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Currrent time ("+r+") is after last auth at "+a);if(e.organizationId){if(!t.claims.org_id)throw new Error("Organization ID (org_id) claim must be a string present in the ID token");if(e.organizationId!==t.claims.org_id)throw new Error('Organization ID (org_id) claim mismatch in the ID token; expected "'+e.organizationId+'", found "'+t.claims.org_id+'"')}return t},ci=s((function(e,t){var n=a&&a.__assign||function(){return (n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function r(e,t){if(!t)return "";var n="; "+e;return !0===t?n:n+"="+t}function o(e,t,n){return encodeURIComponent(e).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/\(/g,"%28").replace(/\)/g,"%29")+"="+encodeURIComponent(t).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent)+function(e){if("number"==typeof e.expires){var t=new Date;t.setMilliseconds(t.getMilliseconds()+864e5*e.expires),e.expires=t;}return r("Expires",e.expires?e.expires.toUTCString():"")+r("Domain",e.domain)+r("Path",e.path)+r("Secure",e.secure)+r("SameSite",e.sameSite)}(n)}function i(e){for(var t={},n=e?e.split("; "):[],r=/(%[\dA-F]{2})+/gi,o=0;o<n.length;o++){var i=n[o].split("="),a=i.slice(1).join("=");'"'===a.charAt(0)&&(a=a.slice(1,-1));try{t[i[0].replace(r,decodeURIComponent)]=a.replace(r,decodeURIComponent);}catch(e){}}return t}function c(){return i(document.cookie)}function s(e,t,r){document.cookie=o(e,t,n({path:"/"},r));}t.__esModule=!0,t.encode=o,t.parse=i,t.getAll=c,t.get=function(e){return c()[e]},t.set=s,t.remove=function(e,t){s(e,"",n(n({},t),{expires:-1}));};}));c(ci),ci.encode,ci.parse,ci.getAll;var si=ci.get,ui=ci.set,li=ci.remove,fi={get:function(e){var t=si(e);if(void 0!==t)return JSON.parse(t)},save:function(e,t,n){var r={};"https:"===window.location.protocol&&(r={secure:!0,sameSite:"none"}),r.expires=n.daysUntilExpire,ui(e,JSON.stringify(t),r);},remove:function(e){li(e);}},di={get:function(e){var t=fi.get(e);return t||fi.get("_legacy_"+e)},save:function(e,t,n){var r={};"https:"===window.location.protocol&&(r={secure:!0}),r.expires=n.daysUntilExpire,ui("_legacy_"+e,JSON.stringify(t),r),fi.save(e,t,n);},remove:function(e){fi.remove(e),fi.remove("_legacy_"+e);}},pi={get:function(e){if("undefined"!=typeof sessionStorage){var t=sessionStorage.getItem(e);if(void 0!==t)return JSON.parse(t)}},save:function(e,t){sessionStorage.setItem(e,JSON.stringify(t));},remove:function(e){sessionStorage.removeItem(e);}};function hi(e,t,n){var r=void 0===t?null:t,o=function(e,t){var n=atob(e);if(t){for(var r=new Uint8Array(n.length),o=0,i=n.length;o<i;++o)r[o]=n.charCodeAt(o);return String.fromCharCode.apply(null,new Uint16Array(r.buffer))}return n}(e,void 0!==n&&n),i=o.indexOf("\n",10)+1,a=o.substring(i)+(r?"//# sourceMappingURL="+r:""),c=new Blob([a],{type:"application/javascript"});return URL.createObjectURL(c)}var yi,vi,mi,gi,bi=(yi="Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Ci8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uCgogICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55CiAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuCgogICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEgKICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQogICAgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULAogICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NCiAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUgogICAgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUgogICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS4KICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovdmFyIGU9ZnVuY3Rpb24oKXtyZXR1cm4oZT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQscj0xLG49YXJndW1lbnRzLmxlbmd0aDtyPG47cisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tyXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2Z1bmN0aW9uIHQoZSx0LHIsbil7cmV0dXJuIG5ldyhyfHwocj1Qcm9taXNlKSkoKGZ1bmN0aW9uKG8scyl7ZnVuY3Rpb24gYShlKXt0cnl7dShuLm5leHQoZSkpfWNhdGNoKGUpe3MoZSl9fWZ1bmN0aW9uIGkoZSl7dHJ5e3Uobi50aHJvdyhlKSl9Y2F0Y2goZSl7cyhlKX19ZnVuY3Rpb24gdShlKXt2YXIgdDtlLmRvbmU/byhlLnZhbHVlKToodD1lLnZhbHVlLHQgaW5zdGFuY2VvZiByP3Q6bmV3IHIoKGZ1bmN0aW9uKGUpe2UodCl9KSkpLnRoZW4oYSxpKX11KChuPW4uYXBwbHkoZSx0fHxbXSkpLm5leHQoKSl9KSl9ZnVuY3Rpb24gcihlLHQpe3ZhciByLG4sbyxzLGE9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmb1swXSl0aHJvdyBvWzFdO3JldHVybiBvWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIHM9e25leHQ6aSgwKSx0aHJvdzppKDEpLHJldHVybjppKDIpfSwiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYoc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxzO2Z1bmN0aW9uIGkocyl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiBmdW5jdGlvbihzKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy4iKTtmb3IoO2E7KXRyeXtpZihyPTEsbiYmKG89MiZzWzBdP24ucmV0dXJuOnNbMF0/bi50aHJvd3x8KChvPW4ucmV0dXJuKSYmby5jYWxsKG4pLDApOm4ubmV4dCkmJiEobz1vLmNhbGwobixzWzFdKSkuZG9uZSlyZXR1cm4gbztzd2l0Y2gobj0wLG8mJihzPVsyJnNbMF0sby52YWx1ZV0pLHNbMF0pe2Nhc2UgMDpjYXNlIDE6bz1zO2JyZWFrO2Nhc2UgNDpyZXR1cm4gYS5sYWJlbCsrLHt2YWx1ZTpzWzFdLGRvbmU6ITF9O2Nhc2UgNTphLmxhYmVsKyssbj1zWzFdLHM9WzBdO2NvbnRpbnVlO2Nhc2UgNzpzPWEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEobz1hLnRyeXMsKG89by5sZW5ndGg+MCYmb1tvLmxlbmd0aC0xXSl8fDYhPT1zWzBdJiYyIT09c1swXSkpe2E9MDtjb250aW51ZX1pZigzPT09c1swXSYmKCFvfHxzWzFdPm9bMF0mJnNbMV08b1szXSkpe2EubGFiZWw9c1sxXTticmVha31pZig2PT09c1swXSYmYS5sYWJlbDxvWzFdKXthLmxhYmVsPW9bMV0sbz1zO2JyZWFrfWlmKG8mJmEubGFiZWw8b1syXSl7YS5sYWJlbD1vWzJdLGEub3BzLnB1c2gocyk7YnJlYWt9b1syXSYmYS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlfXM9dC5jYWxsKGUsYSl9Y2F0Y2goZSl7cz1bNixlXSxuPTB9ZmluYWxseXtyPW89MH1pZig1JnNbMF0pdGhyb3cgc1sxXTtyZXR1cm57dmFsdWU6c1swXT9zWzFdOnZvaWQgMCxkb25lOiEwfX0oW3MsaV0pfX19dmFyIG49e30sbz1mdW5jdGlvbihlLHQpe3JldHVybiBlKyJ8Iit0fTthZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwoZnVuY3Rpb24ocyl7dmFyIGE9cy5kYXRhLGk9YS50aW1lb3V0LHU9YS5hdXRoLGM9YS5mZXRjaFVybCxmPWEuZmV0Y2hPcHRpb25zLGw9cy5wb3J0c1swXTtyZXR1cm4gdCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxzLGEsaCxwLGIseSxkLHYsdztyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmE9KHM9dXx8e30pLmF1ZGllbmNlLGg9cy5zY29wZSxyLmxhYmVsPTE7Y2FzZSAxOmlmKHIudHJ5cy5wdXNoKFsxLDcsLDhdKSwhKHA9SlNPTi5wYXJzZShmLmJvZHkpKS5yZWZyZXNoX3Rva2VuJiYicmVmcmVzaF90b2tlbiI9PT1wLmdyYW50X3R5cGUpe2lmKCEoYj1mdW5jdGlvbihlLHQpe3JldHVybiBuW28oZSx0KV19KGEsaCkpKXRocm93IG5ldyBFcnJvcigiVGhlIHdlYiB3b3JrZXIgaXMgbWlzc2luZyB0aGUgcmVmcmVzaCB0b2tlbiIpO2YuYm9keT1KU09OLnN0cmluZ2lmeShlKGUoe30scCkse3JlZnJlc2hfdG9rZW46Yn0pKX15PXZvaWQgMCwiZnVuY3Rpb24iPT10eXBlb2YgQWJvcnRDb250cm9sbGVyJiYoeT1uZXcgQWJvcnRDb250cm9sbGVyLGYuc2lnbmFsPXkuc2lnbmFsKSxkPXZvaWQgMCxyLmxhYmVsPTI7Y2FzZSAyOnJldHVybiByLnRyeXMucHVzaChbMiw0LCw1XSksWzQsUHJvbWlzZS5yYWNlKFsoZz1pLG5ldyBQcm9taXNlKChmdW5jdGlvbihlKXtyZXR1cm4gc2V0VGltZW91dChlLGcpfSkpKSxmZXRjaChjLGUoe30sZikpXSldO2Nhc2UgMzpyZXR1cm4gZD1yLnNlbnQoKSxbMyw1XTtjYXNlIDQ6cmV0dXJuIHY9ci5zZW50KCksbC5wb3N0TWVzc2FnZSh7ZXJyb3I6di5tZXNzYWdlfSksWzJdO2Nhc2UgNTpyZXR1cm4gZD9bNCxkLmpzb24oKV06KHkmJnkuYWJvcnQoKSxsLnBvc3RNZXNzYWdlKHtlcnJvcjoiVGltZW91dCB3aGVuIGV4ZWN1dGluZyAnZmV0Y2gnIn0pLFsyXSk7Y2FzZSA2OnJldHVybih0PXIuc2VudCgpKS5yZWZyZXNoX3Rva2VuPyhmdW5jdGlvbihlLHQscil7bltvKHQscildPWV9KHQucmVmcmVzaF90b2tlbixhLGgpLGRlbGV0ZSB0LnJlZnJlc2hfdG9rZW4pOmZ1bmN0aW9uKGUsdCl7ZGVsZXRlIG5bbyhlLHQpXX0oYSxoKSxsLnBvc3RNZXNzYWdlKHtvazpkLm9rLGpzb246dH0pLFszLDhdO2Nhc2UgNzpyZXR1cm4gdz1yLnNlbnQoKSxsLnBvc3RNZXNzYWdlKHtvazohMSxqc29uOntlcnJvcl9kZXNjcmlwdGlvbjp3Lm1lc3NhZ2V9fSksWzMsOF07Y2FzZSA4OnJldHVyblsyXX12YXIgZ30pKX0pKX0pKX0oKTsKCg==",vi=null,mi=!1,function(e){return gi=gi||hi(yi,vi,mi),new Worker(gi,e)}),wi={},Si=new To,_i={memory:function(){return (new ni).enclosedCache},localstorage:function(){return new ti}},ki=function(e){return _i[e]},Ii=function(){return !/Trident.*rv:11\.0/.test(navigator.userAgent)},Ti=function(){function e(e){var t,n;if(this.options=e,"undefined"!=typeof window&&function(){if(!Po())throw new Error("For security reasons, `window.crypto` is required to run `auth0-spa-js`.");if(void 0===Fo())throw new Error("\n      auth0-spa-js must run on a secure origin. See https://github.com/auth0/auth0-spa-js/blob/master/FAQ.md#why-do-i-get-auth0-spa-js-must-run-on-a-secure-origin for more information.\n    ")}(),this.cacheLocation=e.cacheLocation||"memory",this.cookieStorage=!1===e.legacySameSiteCookie?fi:di,this.sessionCheckExpiryDays=e.sessionCheckExpiryDays||1,!ki(this.cacheLocation))throw new Error('Invalid cache location "'+this.cacheLocation+'"');var o,i,a=e.useCookiesForTransactions?this.cookieStorage:pi;this.cache=ki(this.cacheLocation)(),this.scope=this.options.scope,this.transactionManager=new ri(a),this.domainUrl="https://"+this.options.domain,this.tokenIssuer=(o=this.options.issuer,i=this.domainUrl,o?o.startsWith("https://")?o:"https://"+o+"/":i+"/"),this.defaultScope=qo("openid",void 0!==(null===(n=null===(t=this.options)||void 0===t?void 0:t.advancedOptions)||void 0===n?void 0:n.defaultScope)?this.options.advancedOptions.defaultScope:"openid profile email"),this.options.useRefreshTokens&&(this.scope=qo(this.scope,"offline_access")),"undefined"!=typeof window&&window.Worker&&this.options.useRefreshTokens&&"memory"===this.cacheLocation&&Ii()&&(this.worker=new bi),this.customOptions=function(e){return e.advancedOptions,e.audience,e.auth0Client,e.authorizeTimeoutInSeconds,e.cacheLocation,e.client_id,e.domain,e.issuer,e.leeway,e.max_age,e.redirect_uri,e.scope,e.useRefreshTokens,r(e,["advancedOptions","audience","auth0Client","authorizeTimeoutInSeconds","cacheLocation","client_id","domain","issuer","leeway","max_age","redirect_uri","scope","useRefreshTokens"])}(e);}return e.prototype._url=function(e){var t=encodeURIComponent(btoa(JSON.stringify(this.options.auth0Client||xo)));return ""+this.domainUrl+e+"&auth0Client="+t},e.prototype._getParams=function(e,t,o,i,a){var c=this.options;c.domain,c.leeway,c.useRefreshTokens,c.useCookiesForTransactions,c.auth0Client,c.cacheLocation,c.advancedOptions;var s=r(c,["domain","leeway","useRefreshTokens","useCookiesForTransactions","auth0Client","cacheLocation","advancedOptions"]);return n(n(n({},s),e),{scope:qo(this.defaultScope,this.scope,e.scope),response_type:"code",response_mode:"query",state:t,nonce:o,redirect_uri:a||this.options.redirect_uri,code_challenge:i,code_challenge_method:"S256"})},e.prototype._authorizeUrl=function(e){return this._url("/authorize?"+zo(e))},e.prototype._verifyIdToken=function(e,t,n){return ai({iss:this.tokenIssuer,aud:this.options.client_id,id_token:e,nonce:t,organizationId:n,leeway:this.options.leeway,max_age:this._parseNumber(this.options.max_age)})},e.prototype._parseNumber=function(e){return "string"!=typeof e?e:parseInt(e,10)||void 0},e.prototype.buildAuthorizeUrl=function(e){return void 0===e&&(e={}),o(this,void 0,void 0,(function(){var t,o,a,c,s,u,l,f,d,p,h,y;return i(this,(function(i){switch(i.label){case 0:return t=e.redirect_uri,o=e.appState,a=r(e,["redirect_uri","appState"]),c=Wo(Ko()),s=Wo(Ko()),u=Ko(),[4,Vo(u)];case 1:return l=i.sent(),f=Xo(l),d=e.fragment?"#"+e.fragment:"",p=this._getParams(a,c,s,f,t),h=this._authorizeUrl(p),y=e.organization||this.options.organization,this.transactionManager.create(n({nonce:s,code_verifier:u,appState:o,scope:p.scope,audience:p.audience||"default",redirect_uri:p.redirect_uri},y&&{organizationId:y})),[2,h+d]}}))}))},e.prototype.loginWithPopup=function(e,t){return o(this,void 0,void 0,(function(){var o,a,c,s,u,l,f,d,p,h,y,v,m;return i(this,(function(i){switch(i.label){case 0:return e=e||{},(t=t||{}).popup||(t.popup=function(e){var t=window.screenX+(window.innerWidth-400)/2,n=window.screenY+(window.innerHeight-600)/2;return window.open(e,"auth0:authorize:popup","left="+t+",top="+n+",width=400,height=600,resizable,scrollbars=yes,status=1")}("")),o=r(e,[]),a=Wo(Ko()),c=Wo(Ko()),s=Ko(),[4,Vo(s)];case 1:return u=i.sent(),l=Xo(u),f=this._getParams(o,a,c,l,this.options.redirect_uri||window.location.origin),d=this._authorizeUrl(n(n({},f),{response_mode:"web_message"})),t.popup.location.href=d,[4,Ao(n(n({},t),{timeoutInSeconds:t.timeoutInSeconds||this.options.authorizeTimeoutInSeconds||60}))];case 2:if(p=i.sent(),a!==p.state)throw new Error("Invalid state");return [4,Bo({audience:f.audience,scope:f.scope,baseUrl:this.domainUrl,client_id:this.options.client_id,code_verifier:s,code:p.code,grant_type:"authorization_code",redirect_uri:f.redirect_uri,auth0Client:this.options.auth0Client},this.worker)];case 3:return h=i.sent(),y=e.organization||this.options.organization,v=this._verifyIdToken(h.id_token,c,y),m=n(n({},h),{decodedToken:v,scope:f.scope,audience:f.audience||"default",client_id:this.options.client_id}),this.cache.save(m),this.cookieStorage.save("auth0.is.authenticated",!0,{daysUntilExpire:this.sessionCheckExpiryDays}),[2]}}))}))},e.prototype.getUser=function(e){return void 0===e&&(e={}),o(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){return t=e.audience||this.options.audience||"default",n=qo(this.defaultScope,this.scope,e.scope),[2,(r=this.cache.get(new Ho({client_id:this.options.client_id,audience:t,scope:n})))&&r.decodedToken&&r.decodedToken.user]}))}))},e.prototype.getIdTokenClaims=function(e){return void 0===e&&(e={}),o(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){return t=e.audience||this.options.audience||"default",n=qo(this.defaultScope,this.scope,e.scope),[2,(r=this.cache.get(new Ho({client_id:this.options.client_id,audience:t,scope:n})))&&r.decodedToken&&r.decodedToken.claims]}))}))},e.prototype.loginWithRedirect=function(e){return void 0===e&&(e={}),o(this,void 0,void 0,(function(){var t,n,o;return i(this,(function(i){switch(i.label){case 0:return t=e.redirectMethod,n=r(e,["redirectMethod"]),[4,this.buildAuthorizeUrl(n)];case 1:return o=i.sent(),window.location[t||"assign"](o),[2]}}))}))},e.prototype.handleRedirectCallback=function(e){return void 0===e&&(e=window.location.href),o(this,void 0,void 0,(function(){var t,r,o,a,c,s,u,l,f,d,p;return i(this,(function(i){switch(i.label){case 0:if(0===(t=e.split("?").slice(1)).length)throw new Error("There are no query params available for parsing.");if(r=function(e){e.indexOf("#")>-1&&(e=e.substr(0,e.indexOf("#")));var t=e.split("&"),r={};return t.forEach((function(e){var t=e.split("="),n=t[0],o=t[1];r[n]=decodeURIComponent(o);})),n(n({},r),{expires_in:parseInt(r.expires_in)})}(t.join("")),o=r.state,a=r.code,c=r.error,s=r.error_description,!(u=this.transactionManager.get())||!u.code_verifier)throw new Error("Invalid state");if(this.transactionManager.remove(),c)throw new Lo(c,s,o,u.appState);return l={audience:u.audience,scope:u.scope,baseUrl:this.domainUrl,client_id:this.options.client_id,code_verifier:u.code_verifier,grant_type:"authorization_code",code:a,auth0Client:this.options.auth0Client},void 0!==u.redirect_uri&&(l.redirect_uri=u.redirect_uri),[4,Bo(l,this.worker)];case 1:return f=i.sent(),d=this._verifyIdToken(f.id_token,u.nonce,u.organizationId),p=n(n({},f),{decodedToken:d,audience:u.audience,scope:u.scope,client_id:this.options.client_id}),this.cache.save(p),this.cookieStorage.save("auth0.is.authenticated",!0,{daysUntilExpire:this.sessionCheckExpiryDays}),[2,{appState:u.appState}]}}))}))},e.prototype.checkSession=function(e){return o(this,void 0,void 0,(function(){var t;return i(this,(function(n){switch(n.label){case 0:if(!this.cookieStorage.get("auth0.is.authenticated"))return [2];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.getTokenSilently(e)];case 2:return n.sent(),[3,4];case 3:if(t=n.sent(),!Eo.includes(t.error))throw t;return [3,4];case 4:return [2]}}))}))},e.prototype.getTokenSilently=function(e){return void 0===e&&(e={}),o(this,void 0,void 0,(function(){var t,o,a,c=this;return i(this,(function(i){return t=n(n({audience:this.options.audience,ignoreCache:!1},e),{scope:qo(this.defaultScope,this.scope,e.scope)}),o=t.ignoreCache,a=r(t,["ignoreCache"]),[2,(s=function(){return c._getTokenSilently(n({ignoreCache:o},a))},u=this.options.client_id+"::"+a.audience+"::"+a.scope,l=wi[u],l||(l=s().finally((function(){delete wi[u],l=null;})),wi[u]=l),l)];var s,u,l;}))}))},e.prototype._getTokenSilently=function(e){return void 0===e&&(e={}),o(this,void 0,void 0,(function(){var t,a,c,s,u,l,f=this;return i(this,(function(d){switch(d.label){case 0:return t=e.ignoreCache,a=r(e,["ignoreCache"]),c=function(){var e=f.cache.get(new Ho({scope:a.scope,audience:a.audience||"default",client_id:f.options.client_id}),60);return e&&e.access_token},!t&&(s=c())?[2,s]:[4,(p=function(){return Si.acquireLock("auth0.lock.getTokenSilently",5e3)},h=10,void 0===h&&(h=3),o(void 0,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:e=0,t.label=1;case 1:return e<h?[4,p()]:[3,4];case 2:if(t.sent())return [2,!0];t.label=3;case 3:return e++,[3,1];case 4:return [2,!1]}}))})))];case 1:if(!d.sent())return [3,10];d.label=2;case 2:return d.trys.push([2,,7,9]),!t&&(s=c())?[2,s]:this.options.useRefreshTokens?[4,this._getTokenUsingRefreshToken(a)]:[3,4];case 3:return l=d.sent(),[3,6];case 4:return [4,this._getTokenFromIFrame(a)];case 5:l=d.sent(),d.label=6;case 6:return u=l,this.cache.save(n({client_id:this.options.client_id},u)),this.cookieStorage.save("auth0.is.authenticated",!0,{daysUntilExpire:this.sessionCheckExpiryDays}),[2,u.access_token];case 7:return [4,Si.releaseLock("auth0.lock.getTokenSilently")];case 8:return d.sent(),[7];case 9:return [3,11];case 10:throw new Co;case 11:return [2]}var p,h;}))}))},e.prototype.getTokenWithPopup=function(e,t){return void 0===e&&(e={}),void 0===t&&(t={}),o(this,void 0,void 0,(function(){return i(this,(function(r){switch(r.label){case 0:return e.audience=e.audience||this.options.audience,e.scope=qo(this.defaultScope,this.scope,e.scope),t=n(n({},Oo),t),[4,this.loginWithPopup(e,t)];case 1:return r.sent(),[2,this.cache.get(new Ho({scope:e.scope,audience:e.audience||"default",client_id:this.options.client_id})).access_token]}}))}))},e.prototype.isAuthenticated=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return [4,this.getUser()];case 1:return [2,!!e.sent()]}}))}))},e.prototype.buildLogoutUrl=function(e){void 0===e&&(e={}),null!==e.client_id?e.client_id=e.client_id||this.options.client_id:delete e.client_id;var t=e.federated,n=r(e,["federated"]),o=t?"&federated":"";return this._url("/v2/logout?"+zo(n))+o},e.prototype.logout=function(e){void 0===e&&(e={});var t=e.localOnly,n=r(e,["localOnly"]);if(t&&n.federated)throw new Error("It is invalid to set both the `federated` and `localOnly` options to `true`");if(this.cache.clear(),this.cookieStorage.remove("auth0.is.authenticated"),!t){var o=this.buildLogoutUrl(n);window.location.assign(o);}},e.prototype._getTokenFromIFrame=function(e){return o(this,void 0,void 0,(function(){var t,o,a,c,s,u,l,f,d,p,h,y,v,m,g;return i(this,(function(i){switch(i.label){case 0:return t=Wo(Ko()),o=Wo(Ko()),a=Ko(),[4,Vo(a)];case 1:c=i.sent(),s=Xo(c),u=this._getParams(e,t,o,s,e.redirect_uri||this.options.redirect_uri||window.location.origin),l=this._authorizeUrl(n(n({},u),{prompt:"none",response_mode:"web_message"})),f=e.timeoutInSeconds||this.options.authorizeTimeoutInSeconds,i.label=2;case 2:return i.trys.push([2,5,,6]),[4,(b=l,w=this.domainUrl,S=f,void 0===S&&(S=60),new Promise((function(e,t){var n=window.document.createElement("iframe");n.setAttribute("width","0"),n.setAttribute("height","0"),n.style.display="none";var r,o=function(){window.document.body.contains(n)&&(window.document.body.removeChild(n),window.removeEventListener("message",r,!1));},i=setTimeout((function(){t(new Co),o();}),1e3*S);r=function(n){if(n.origin==w&&n.data&&"authorization_response"===n.data.type){var a=n.source;a&&a.close(),n.data.response.error?t(Ro.fromPayload(n.data.response)):e(n.data.response),clearTimeout(i),window.removeEventListener("message",r,!1),setTimeout(o,2e3);}},window.addEventListener("message",r,!1),window.document.body.appendChild(n),n.setAttribute("src",b);})))];case 3:if(d=i.sent(),t!==d.state)throw new Error("Invalid state");return p=e.scope,h=e.audience,e.redirect_uri,e.ignoreCache,e.timeoutInSeconds,y=r(e,["scope","audience","redirect_uri","ignoreCache","timeoutInSeconds"]),[4,Bo(n(n(n({},this.customOptions),y),{scope:p,audience:h,baseUrl:this.domainUrl,client_id:this.options.client_id,code_verifier:a,code:d.code,grant_type:"authorization_code",redirect_uri:u.redirect_uri,auth0Client:this.options.auth0Client}),this.worker)];case 4:return v=i.sent(),m=this._verifyIdToken(v.id_token,o),[2,n(n({},v),{decodedToken:m,scope:u.scope,audience:u.audience||"default"})];case 5:throw "login_required"===(g=i.sent()).error&&this.logout({localOnly:!0}),g;case 6:return [2]}var b,w,S;}))}))},e.prototype._getTokenUsingRefreshToken=function(e){return o(this,void 0,void 0,(function(){var t,o,a,c,s,u,l,f,d;return i(this,(function(i){switch(i.label){case 0:return e.scope=qo(this.defaultScope,this.options.scope,e.scope),(t=this.cache.get(new Ho({scope:e.scope,audience:e.audience||"default",client_id:this.options.client_id})))&&t.refresh_token||this.worker?[3,2]:[4,this._getTokenFromIFrame(e)];case 1:return [2,i.sent()];case 2:o=e.redirect_uri||this.options.redirect_uri||window.location.origin,c=e.scope,s=e.audience,e.ignoreCache,e.timeoutInSeconds,u=r(e,["scope","audience","ignoreCache","timeoutInSeconds"]),l="number"==typeof e.timeoutInSeconds?1e3*e.timeoutInSeconds:null,i.label=3;case 3:return i.trys.push([3,5,,8]),[4,Bo(n(n(n(n(n({},this.customOptions),u),{audience:s,scope:c,baseUrl:this.domainUrl,client_id:this.options.client_id,grant_type:"refresh_token",refresh_token:t&&t.refresh_token,redirect_uri:o}),l&&{timeout:l}),{auth0Client:this.options.auth0Client}),this.worker)];case 4:return a=i.sent(),[3,8];case 5:return "The web worker is missing the refresh token"===(f=i.sent()).message||f.message&&f.message.indexOf("invalid refresh token")>-1?[4,this._getTokenFromIFrame(e)]:[3,7];case 6:return [2,i.sent()];case 7:throw f;case 8:return d=this._verifyIdToken(a.id_token),[2,n(n({},a),{decodedToken:d,scope:e.scope,audience:e.audience||"default"})]}}))}))},e}();function Ei(e){return o(this,void 0,void 0,(function(){var t;return i(this,(function(n){switch(n.label){case 0:return [4,(t=new Ti(e)).checkSession()];case 1:return n.sent(),[2,t]}}))}))}

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    // src/store.js

    const isAuthenticated = writable(false);
    const user = writable({});
    const popupOpen = writable(false);

    const tasks = writable([]);

    const user_tasks = derived([tasks, user], ([$tasks, $user]) => {
      let logged_in_user_tasks = [];

      if ($user && $user.email) {
        logged_in_user_tasks = $tasks.filter((task) => task.user === $user.email);
      }

      return logged_in_user_tasks;
    });

    // auth_config.js

    const config = {
      domain: "clxs.eu.auth0.com",
      clientId: "2ZNtsXTWwazwmyTDLTuli6XeLXXSMuZJ"
    };

    // src/authService.js

    async function createClient() {
      let auth0Client = await Ei({
        domain: config.domain,
        client_id: config.clientId,
        audience: "https://auth0demoAndy_API"
      });

      return auth0Client;
    }

    async function loginWithPopup(client, options) {
      popupOpen.set(true);
      try {
        await client.loginWithPopup(options);

        const usr = await client.getUser();
        console.log(usr);
        user.set(usr);
        isAuthenticated.set(true);
      } catch (e) {
        // eslint-disable-next-line
        console.error(e);
      } finally {
        popupOpen.set(false);
      }
    }

    async function loginWithRedirect(client, options) {
      try {
        await client.loginWithRedirect(options);

        user.set(await client.getUser());
        isAuthenticated.set(true);
        const user = await auth0.getUser();
        console.log(user);

      } catch (e) {
        // eslint-disable-next-line
        console.error(e);
      } finally {
        isAuthenticated.set(true);
      }
    }

    function logout(client) {
      return client.logout();
    }

    const auth = {
      createClient,
      loginWithPopup,
      loginWithRedirect,
      logout
    };

    /* src/components/TaskItem.svelte generated by Svelte v3.38.2 */

    const { console: console_1$1 } = globals;
    const file$1 = "src/components/TaskItem.svelte";

    function create_fragment$1(ctx) {
    	let main;
    	let li;
    	let input;
    	let t0;
    	let span;
    	let t1_value = /*task*/ ctx[0].description + "";
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			main = element("main");
    			li = element("li");
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "class", "form-check-input");
    			attr_dev(input, "id", "exampleCheck1");
    			add_location(input, file$1, 24, 4, 459);
    			attr_dev(span, "class", "svelte-fbxgy2");
    			toggle_class(span, "completed", /*task*/ ctx[0].completed);
    			add_location(span, file$1, 31, 4, 623);
    			attr_dev(li, "class", "list-group-item");
    			add_location(li, file$1, 23, 2, 426);
    			add_location(main, file$1, 22, 0, 417);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, li);
    			append_dev(li, input);
    			input.checked = /*isChecked*/ ctx[1];
    			append_dev(li, t0);
    			append_dev(li, span);
    			append_dev(span, t1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[3]),
    					listen_dev(input, "change", /*change_handler*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*isChecked*/ 2) {
    				input.checked = /*isChecked*/ ctx[1];
    			}

    			if (dirty & /*task*/ 1 && t1_value !== (t1_value = /*task*/ ctx[0].description + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*task*/ 1) {
    				toggle_class(span, "completed", /*task*/ ctx[0].completed);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $tasks;
    	validate_store(tasks, "tasks");
    	component_subscribe($$self, tasks, $$value => $$invalidate(5, $tasks = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TaskItem", slots, []);
    	let { task = {} } = $$props;
    	let isChecked;

    	function taskDone() {
    		console.log(isChecked);

    		let updatedTasks = $tasks.map(currentTask => {
    			if (currentTask.id === task.id) {
    				currentTask.completed = isChecked;
    				return currentTask;
    			}

    			return currentTask;
    		});

    		tasks.set(updatedTasks);
    		console.log($tasks);
    	}

    	const writable_props = ["task"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<TaskItem> was created with unknown prop '${key}'`);
    	});

    	function input_change_handler() {
    		isChecked = this.checked;
    		$$invalidate(1, isChecked);
    	}

    	const change_handler = e => taskDone();

    	$$self.$$set = $$props => {
    		if ("task" in $$props) $$invalidate(0, task = $$props.task);
    	};

    	$$self.$capture_state = () => ({ tasks, task, isChecked, taskDone, $tasks });

    	$$self.$inject_state = $$props => {
    		if ("task" in $$props) $$invalidate(0, task = $$props.task);
    		if ("isChecked" in $$props) $$invalidate(1, isChecked = $$props.isChecked);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [task, isChecked, taskDone, input_change_handler, change_handler];
    }

    class TaskItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { task: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TaskItem",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get task() {
    		throw new Error("<TaskItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set task(value) {
    		throw new Error("<TaskItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.38.2 */

    const { console: console_1 } = globals;
    const file = "src/App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (92:8) {:else}
    function create_else_block_2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = " ";
    			add_location(span, file, 91, 15, 2395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(92:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (88:8) {#if $isAuthenticated}
    function create_if_block_2(ctx) {
    	let span;
    	let t0;
    	let t1_value = /*$user*/ ctx[1].name + "";
    	let t1;
    	let t2;
    	let t3_value = /*$user*/ ctx[1].email + "";
    	let t3;
    	let t4;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text("  ");
    			t1 = text(t1_value);
    			t2 = text(" (");
    			t3 = text(t3_value);
    			t4 = text(")");
    			attr_dev(span, "class", "text-white");
    			add_location(span, file, 88, 10, 2283);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    			append_dev(span, t3);
    			append_dev(span, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$user*/ 2 && t1_value !== (t1_value = /*$user*/ ctx[1].name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$user*/ 2 && t3_value !== (t3_value = /*$user*/ ctx[1].email + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(88:8) {#if $isAuthenticated}",
    		ctx
    	});

    	return block;
    }

    // (100:10) {:else}
    function create_else_block_1(ctx) {
    	let li;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			a.textContent = "Log In";
    			attr_dev(a, "class", "nav-link");
    			attr_dev(a, "href", "/#");
    			add_location(a, file, 101, 14, 2735);
    			attr_dev(li, "class", "nav-item");
    			add_location(li, file, 100, 12, 2699);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*login*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(100:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:10) {#if $isAuthenticated}
    function create_if_block_1(ctx) {
    	let li;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			a.textContent = "Log Out";
    			attr_dev(a, "class", "nav-link");
    			attr_dev(a, "href", "/#");
    			add_location(a, file, 97, 14, 2591);
    			attr_dev(li, "class", "nav-item");
    			add_location(li, file, 96, 12, 2555);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*logout*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(96:10) {#if $isAuthenticated}",
    		ctx
    	});

    	return block;
    }

    // (133:2) {:else}
    function create_else_block(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let ul;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t0;
    	let div1;
    	let input;
    	let t1;
    	let br0;
    	let t2;
    	let button0;
    	let t4;
    	let br1;
    	let t5;
    	let button1;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*$user_tasks*/ ctx[3];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[11].id;
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div1 = element("div");
    			input = element("input");
    			t1 = space();
    			br0 = element("br");
    			t2 = space();
    			button0 = element("button");
    			button0.textContent = "Add Task";
    			t4 = space();
    			br1 = element("br");
    			t5 = space();
    			button1 = element("button");
    			button1.textContent = "Get Token";
    			attr_dev(ul, "class", "list-group");
    			add_location(ul, file, 136, 10, 3720);
    			attr_dev(div0, "class", "col-md-6");
    			add_location(div0, file, 135, 8, 3687);
    			attr_dev(input, "class", "form-control");
    			attr_dev(input, "placeholder", "Enter New Task");
    			add_location(input, file, 143, 10, 3925);
    			add_location(br0, file, 148, 10, 4062);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-primary");
    			add_location(button0, file, 149, 10, 4079);
    			add_location(br1, file, 152, 10, 4196);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-primary");
    			add_location(button1, file, 153, 10, 4213);
    			attr_dev(div1, "class", "col-md-6");
    			add_location(div1, file, 142, 8, 3892);
    			attr_dev(div2, "class", "row");
    			add_location(div2, file, 134, 6, 3661);
    			attr_dev(div3, "class", "container svelte-1tnsjy2");
    			attr_dev(div3, "id", "main-application");
    			add_location(div3, file, 133, 4, 3609);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*newTask*/ ctx[0]);
    			append_dev(div1, t1);
    			append_dev(div1, br0);
    			append_dev(div1, t2);
    			append_dev(div1, button0);
    			append_dev(div1, t4);
    			append_dev(div1, br1);
    			append_dev(div1, t5);
    			append_dev(div1, button1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[8]),
    					listen_dev(button0, "click", /*addItem*/ ctx[6], false, false, false),
    					listen_dev(button1, "click", /*getToken*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$user_tasks*/ 8) {
    				each_value = /*$user_tasks*/ ctx[3];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block, null, get_each_context);
    				check_outros();
    			}

    			if (dirty & /*newTask*/ 1 && input.value !== /*newTask*/ ctx[0]) {
    				set_input_value(input, /*newTask*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(133:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (111:2) {#if !$isAuthenticated}
    function create_if_block(ctx) {
    	let div3;
    	let div2;
    	let div1;
    	let div0;
    	let h1;
    	let t1;
    	let p;
    	let t3;
    	let ul;
    	let li0;
    	let t5;
    	let li1;
    	let t7;
    	let li2;
    	let t9;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Task Management made Easy!";
    			t1 = space();
    			p = element("p");
    			p.textContent = "Instructions";
    			t3 = space();
    			ul = element("ul");
    			li0 = element("li");
    			li0.textContent = "Login to start 🔐";
    			t5 = space();
    			li1 = element("li");
    			li1.textContent = "Create Tasks 📝";
    			t7 = space();
    			li2 = element("li");
    			li2.textContent = "Tick off completed tasks ✅";
    			t9 = space();
    			a = element("a");
    			a.textContent = "Log In";
    			attr_dev(h1, "class", "display-4");
    			add_location(h1, file, 115, 12, 3072);
    			attr_dev(p, "class", "lead");
    			add_location(p, file, 116, 12, 3138);
    			add_location(li0, file, 118, 14, 3202);
    			add_location(li1, file, 119, 14, 3250);
    			add_location(li2, file, 120, 14, 3296);
    			add_location(ul, file, 117, 12, 3183);
    			attr_dev(a, "class", "btn btn-primary btn-lg mr-auto ml-auto");
    			attr_dev(a, "href", "/#");
    			attr_dev(a, "role", "button");
    			add_location(a, file, 122, 12, 3368);
    			attr_dev(div0, "class", "jumbotron");
    			add_location(div0, file, 114, 10, 3036);
    			attr_dev(div1, "class", "col-md-10 offset-md-1");
    			add_location(div1, file, 113, 8, 2990);
    			attr_dev(div2, "class", "row");
    			add_location(div2, file, 112, 6, 2964);
    			attr_dev(div3, "class", "container mt-5");
    			add_location(div3, file, 111, 4, 2929);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h1);
    			append_dev(div0, t1);
    			append_dev(div0, p);
    			append_dev(div0, t3);
    			append_dev(div0, ul);
    			append_dev(ul, li0);
    			append_dev(ul, t5);
    			append_dev(ul, li1);
    			append_dev(ul, t7);
    			append_dev(ul, li2);
    			append_dev(div0, t9);
    			append_dev(div0, a);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*login*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(111:2) {#if !$isAuthenticated}",
    		ctx
    	});

    	return block;
    }

    // (138:12) {#each $user_tasks as item (item.id)}
    function create_each_block(key_1, ctx) {
    	let first;
    	let taskitem;
    	let current;

    	taskitem = new TaskItem({
    			props: { task: /*item*/ ctx[11] },
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(taskitem.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(taskitem, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const taskitem_changes = {};
    			if (dirty & /*$user_tasks*/ 8) taskitem_changes.task = /*item*/ ctx[11];
    			taskitem.$set(taskitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(taskitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(taskitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(taskitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(138:12) {#each $user_tasks as item (item.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let main;
    	let nav;
    	let a;
    	let t1;
    	let button;
    	let span0;
    	let t2;
    	let div1;
    	let div0;
    	let t3;
    	let span1;
    	let ul;
    	let t4;
    	let current_block_type_index;
    	let if_block2;
    	let current;

    	function select_block_type(ctx, dirty) {
    		if (/*$isAuthenticated*/ ctx[2]) return create_if_block_2;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*$isAuthenticated*/ ctx[2]) return create_if_block_1;
    		return create_else_block_1;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block1 = current_block_type_1(ctx);
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (!/*$isAuthenticated*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			nav = element("nav");
    			a = element("a");
    			a.textContent = "Task Manager";
    			t1 = space();
    			button = element("button");
    			span0 = element("span");
    			t2 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if_block0.c();
    			t3 = space();
    			span1 = element("span");
    			ul = element("ul");
    			if_block1.c();
    			t4 = space();
    			if_block2.c();
    			attr_dev(a, "class", "navbar-brand");
    			attr_dev(a, "href", "/#");
    			add_location(a, file, 73, 4, 1797);
    			attr_dev(span0, "class", "navbar-toggler-icon");
    			add_location(span0, file, 83, 6, 2080);
    			attr_dev(button, "class", "navbar-toggler");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "data-toggle", "collapse");
    			attr_dev(button, "data-target", "#navbarText");
    			attr_dev(button, "aria-controls", "navbarText");
    			attr_dev(button, "aria-expanded", "false");
    			attr_dev(button, "aria-label", "Toggle navigation");
    			add_location(button, file, 74, 4, 1852);
    			attr_dev(div0, "class", "navbar-nav mr-auto user-details");
    			add_location(div0, file, 86, 6, 2196);
    			attr_dev(ul, "class", "navbar-nav float-right");
    			add_location(ul, file, 94, 8, 2474);
    			attr_dev(span1, "class", "navbar-text");
    			add_location(span1, file, 93, 6, 2439);
    			attr_dev(div1, "class", "collapse navbar-collapse");
    			attr_dev(div1, "id", "navbarText");
    			add_location(div1, file, 85, 4, 2135);
    			attr_dev(nav, "class", "navbar navbar-expand-lg navbar-dark bg-dark");
    			add_location(nav, file, 72, 2, 1735);
    			add_location(main, file, 70, 0, 1707);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, nav);
    			append_dev(nav, a);
    			append_dev(nav, t1);
    			append_dev(nav, button);
    			append_dev(button, span0);
    			append_dev(nav, t2);
    			append_dev(nav, div1);
    			append_dev(div1, div0);
    			if_block0.m(div0, null);
    			append_dev(div1, t3);
    			append_dev(div1, span1);
    			append_dev(span1, ul);
    			if_block1.m(ul, null);
    			append_dev(main, t4);
    			if_blocks[current_block_type_index].m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(ul, null);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(main, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if_block0.d();
    			if_block1.d();
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function genRandom(length = 7) {
    	var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    	var result = "";
    	for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
    	return result;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $user;
    	let $tasks;
    	let $isAuthenticated;
    	let $user_tasks;
    	validate_store(user, "user");
    	component_subscribe($$self, user, $$value => $$invalidate(1, $user = $$value));
    	validate_store(tasks, "tasks");
    	component_subscribe($$self, tasks, $$value => $$invalidate(10, $tasks = $$value));
    	validate_store(isAuthenticated, "isAuthenticated");
    	component_subscribe($$self, isAuthenticated, $$value => $$invalidate(2, $isAuthenticated = $$value));
    	validate_store(user_tasks, "user_tasks");
    	component_subscribe($$self, user_tasks, $$value => $$invalidate(3, $user_tasks = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let auth0Client;
    	let newTask;

    	onMount(async () => {
    		auth0Client = await auth.createClient();
    		isAuthenticated.set(await auth0Client.isAuthenticated());
    		user.set(await auth0Client.getUser());
    		Amplify.configure(awsconfig);
    	});

    	function login() {
    		auth.loginWithPopup(auth0Client);
    	} /* auth.loginWithRedirect(auth0Client, {
      redirect_uri: "http://localhost:5000/",
    }); */

    	function logout() {
    		auth.logout(auth0Client);
    	}

    	function addItem() {
    		let newTaskObject = {
    			id: genRandom(),
    			description: newTask,
    			completed: false,
    			user: $user.email
    		};

    		console.log(newTaskObject);
    		let updatedTasks = [...$tasks, newTaskObject];
    		tasks.set(updatedTasks);
    		$$invalidate(0, newTask = "");
    	}

    	async function getToken() {
    		const token = await auth0Client.getTokenSilently();
    		console.log(token);
    		const claims = await auth0Client.getIdTokenClaims();
    		console.log(claims);
    		const tasks = await API.graphql(graphqlOperation(listTasks));
    		console.log(tasks);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		newTask = this.value;
    		$$invalidate(0, newTask);
    	}

    	$$self.$capture_state = () => ({
    		Amplify,
    		API,
    		graphqlOperation,
    		awsconfig,
    		listTasks,
    		onMount,
    		auth,
    		isAuthenticated,
    		user,
    		user_tasks,
    		tasks,
    		TaskItem,
    		auth0Client,
    		newTask,
    		login,
    		logout,
    		addItem,
    		genRandom,
    		getToken,
    		$user,
    		$tasks,
    		$isAuthenticated,
    		$user_tasks
    	});

    	$$self.$inject_state = $$props => {
    		if ("auth0Client" in $$props) auth0Client = $$props.auth0Client;
    		if ("newTask" in $$props) $$invalidate(0, newTask = $$props.newTask);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		newTask,
    		$user,
    		$isAuthenticated,
    		$user_tasks,
    		login,
    		logout,
    		addItem,
    		getToken,
    		input_input_handler
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app;

}(buffer, url, events));
//# sourceMappingURL=bundle.js.map
